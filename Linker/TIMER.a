;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <delay.h>
;#include <math.h>
;
;#include "TIMER.h"
;#include "RTU_USART.h"
;
;interrupt [TIM2_COMP] void timer2_comp(void)
; 0001 000A {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 000B     TIMER2_OVERFLOW++;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0001 000C }
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;
;interrupt [TIM0_OVF] void timer0_ovf(void)
; 0001 000F {
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0001 0010     TIMER0_OVERFLOW++;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0001 0011 }
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;
;
;interrupt [TIM1_COMPB] void timer0_comp(void)
; 0001 0015 {
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0001 0016     TIMER1_OVERFLOW++;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0001 0017     TCNT1H = 0x00;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0001 0018     TCNT1L = 0x00;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0001 0019 }
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;
;void timer2_init(void)
; 0001 001C {
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0001 001D     //TIMER2
; 0001 001E     TCCR2 = (1<<WGM21)|(1<<CS22)|(1<<CS20);// CTC모드, 1024분주
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0001 001F 
; 0001 0020     OCR2 = 40;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0001 0021     TIMSK = (1<<OCIE2)|(1<<OCIE0);
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0001 0022     //TIMSK = (1<<OCIE2);
; 0001 0023 }
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;void timer0_init(void)
; 0001 0025 {
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0001 0026     TCCR0 = (1<<CS02)|(1<<CS01)|(1<<CS00); // CTC모드, 1024분주
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0001 0027     TIMSK = (1<<OCIE2)|(1<<TOIE0);
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0001 0028 }
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;
;void timer1_init(void)
; 0001 002B {
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0001 002C     // TCCR1A = (1<<COM1B0);
; 0001 002D     TCCR1B = (1<<WGM13)|(1<<WGM12)|(1<<CS12)|(1<<CS10);; // WGM bit setting
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0001 002E 
; 0001 002F     OCR1B = 255;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0001 0030     ICR1 = 1200;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0001 0031     TIMSK |= (1<<OCIE1B);
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0001 0032 }
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
