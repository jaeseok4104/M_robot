;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <delay.h>
;
;#define bps_115200 0x0007
;
;#define POLYNORMIAL 0xA001
;
;#define CHARACTER3_5 25
;
;#define R 0x01
;#define L 0x02
;
;unsigned char TIMER2_OVERFLOW = 0;
;unsigned char PACKET_BUFF[100] = {0,};
;unsigned char PACKET_BUFF_IDX = 0;
;
;unsigned char TIMER0_OVERFLOW = 0;
;unsigned char VELOCITY_BUFF[20] = {0,};
;unsigned char VELOCITY_BUFF_IDX = 0;
;unsigned char CHECK_GETS = 0;
;
;void usart1_init(int bps)
; 0000 0018 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0019     UCSR1A = 0x00;
;	bps -> Y+0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 001A     UCSR1B = (1<<RXEN1)|(1<<TXEN1)|(1<<RXCIE1); // RXCIE1 bit is recevie interrupt allow
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 001B     UCSR1C = (1<<UCSZ11)|(1<<UCSZ10);
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 001C     UCSR1C &= ~(1<<UMSEL1);
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 001D 
; 0000 001E     UBRR1H = (unsigned char)((bps>>8)  & 0x00ff);
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 001F     UBRR1L = (unsigned char)(bps & 0x00ff);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0020 }
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;
;void usart0_init(int bps)
; 0000 0023 {
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0024     UCSR0A = 0x00;
;	bps -> Y+0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0025     UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0); // RXCIE1 bit is recevie interrupt allow
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0026     UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0027     UCSR0C &= ~(1<<UMSEL0);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0028 
; 0000 0029     UBRR0H = (unsigned char)((bps>>8)  & 0x00ff);
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 002A     UBRR0L = (unsigned char)(bps & 0x00ff);
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 002B }
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;
;void timer2_init(void)
; 0000 002E {
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 002F     //TIMER2
; 0000 0030     TCCR2 = (1<<WGM21)|(1<<CS22)|(1<<CS20);// CTC모드, 1024분주
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0031 
; 0000 0032     OCR2 = 40;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0033     TIMSK = (1<<OCIE2)|(1<<OCIE0);
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0034     //TIMSK = (1<<OCIE2);
; 0000 0035 }
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;void timer0_init(void)
; 0000 0037 {
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0038     TCCR0 = (1<<WGM01)|(1<<CS02)|(1<<CS01)|(1<<CS00); // CTC모드, 1024분주
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0039     OCR0 = 40;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 003A     TIMSK = (1<<OCIE2)|(1<<OCIE0);
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 003B }
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;
;void putch_USART1(char data)
; 0000 003E {
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 003F     while(!(UCSR1A & (1<<UDRE1))); // UDRE flag is USART Data Register Empty
;	data -> Y+0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0040     UDR1 = data;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0041 }
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;
;//USART 문자열 송신
;void puts_USART1(char *str,char IDX)
; 0000 0045 {
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0046     unsigned char i = 0;
; 0000 0047 
; 0000 0048     for(i = 0;i<IDX;i++)
;PCODE: $0000005A VOL: 0
;	*str -> Y+2
;	IDX -> Y+1
;	i -> R17
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0049     {
; 0000 004A         putch_USART1(*(str+i));
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 004B     }
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 004C 
; 0000 004D     for(i = 0; i<IDX; i++)
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 004E     {
; 0000 004F         *(str+i) = 0;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0050     }
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0051 }
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;
;void puts_Modbus1(char *str,char IDX)
; 0000 0054 {
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0055     unsigned char i = 0;
; 0000 0056     UCSR0B &= ~(1<<RXEN0);
;PCODE: $0000008D VOL: 0
;	*str -> Y+2
;	IDX -> Y+1
;	i -> R17
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 0057     if(TIMER2_OVERFLOW>0)
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 0058     {
; 0000 0059         for(i = 0;i<IDX-1;i++) putch_USART1(*(str+i));
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 005B for(i = 0; i<IDX; i++) *(str+i) = 0;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 005C }
; 0000 005D     UCSR0B |= (1<<RXEN0);
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 005E }
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;
;void putch_USART0(char data)
; 0000 0061 {
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 0062     while(!(UCSR0A & (1<<UDRE0))); // UDRE flag is USART Data Register Empty
;	data -> Y+0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 0063     UDR0 = data;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 0064 }
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;
;void puts_USART0(char *str,char IDX)
; 0000 0067 {
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 0068     //PACKET_BUFF[PACKET_BUFF_IDX] = 0;
; 0000 0069     unsigned char i = 0;
; 0000 006A     for(i = 0;i<IDX-1;i++)
;PCODE: $000000D9 VOL: 0
;	*str -> Y+2
;	IDX -> Y+1
;	i -> R17
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 006B     {
; 0000 006C         putch_USART1(*(str+i));
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 006D     }
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 006E 
; 0000 006F     for(i = 0; i<IDX; i++)
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 0070     {
; 0000 0071         *(str+i) = 0;
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 0072     }
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 0073 }
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;
;unsigned short CRC16(unsigned char *puchMsg, int usDataLen)
; 0000 0076 {
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 0077     int i;
; 0000 0078     unsigned short crc, flag;
; 0000 0079     crc = 0xffff;
;PCODE: $00000110 VOL: 0
;	*puchMsg -> Y+8
;	usDataLen -> Y+6
;	i -> R16,R17
;	crc -> R18,R19
;	flag -> R20,R21
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 007A 
; 0000 007B     while(usDataLen--){
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 007C         crc ^= *puchMsg++;
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 007D 
; 0000 007E         for (i=0; i<8; i++){
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 007F             flag = crc & 0x0001;
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 0080             crc >>= 1;
;PCODE: $0000012B VOL: 0
; 0000 0081             if(flag) crc ^= POLYNORMIAL;
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 0082         }
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 0083     }
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 0084     return crc;
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 0085 }
;PCODE: $0000013D VOL: 0
;
;int RTU_WriteOperate0(char device_address,int starting_address,int data)
; 0000 0088 {
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 0089     char protocol[8];
; 0000 008A     unsigned short crc16;
; 0000 008B     int i=0;
; 0000 008C     //PACKET_BUFF_IDX = 0;
; 0000 008D 
; 0000 008E     protocol[0]=device_address;
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;	device_address -> Y+16
;	starting_address -> Y+14
;	data -> Y+12
;	protocol -> Y+4
;	crc16 -> R16,R17
;	i -> R18,R19
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 008F     protocol[1]=0x06;
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 0090     protocol[2]=((starting_address>>8)  & 0x00ff);
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 0091     protocol[3]=((starting_address)     & 0x00ff);
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 0092     protocol[4]=((data>>8)              & 0x00ff);
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 0093     protocol[5]=((data)                 & 0x00ff);
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 0094     protocol[6]=0;
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 0095     protocol[7]=0;
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 0096 
; 0000 0097     crc16 = CRC16(protocol, 6);
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 0098 
; 0000 0099     protocol[6] = (unsigned char)((crc16>>0) & 0x00ff);
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 009A     protocol[7] = (unsigned char)((crc16>>8) & 0x00ff);
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 009B 
; 0000 009C 
; 0000 009D     for(i=0;i<8;i++)
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 009E     {
; 0000 009F         putch_USART0(*(protocol+i));
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 00A0     }
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 00A1 }
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;
;int RTU_WriteOperate1(char device_address,int starting_address,int data)
; 0000 00A4 {
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 00A5     char protocol[8];
; 0000 00A6     unsigned short crc16;
; 0000 00A7     int i=0;
; 0000 00A8    // PACKET_BUFF_IDX = 0;
; 0000 00A9 
; 0000 00AA     protocol[0]=device_address;
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;	device_address -> Y+16
;	starting_address -> Y+14
;	data -> Y+12
;	protocol -> Y+4
;	crc16 -> R16,R17
;	i -> R18,R19
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 00AB     protocol[1]=0x06;
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 00AC     protocol[2]=((starting_address>>8)  & 0x00ff);
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 00AD     protocol[3]=((starting_address)     & 0x00ff);
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0000 00AE     protocol[4]=((data>>8)              & 0x00ff);
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 00AF     protocol[5]=((data)                 & 0x00ff);
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0000 00B0     protocol[6]=0;
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 00B1     protocol[7]=0;
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 00B2 
; 0000 00B3     crc16 = CRC16(protocol, 6);
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0000 00B4 
; 0000 00B5     protocol[6] = (unsigned char)((crc16>>0) & 0x00ff);
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 00B6     protocol[7] = (unsigned char)((crc16>>8) & 0x00ff);
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0000 00B7 
; 0000 00B8 
; 0000 00B9     for(i=0;i<8;i++)
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 00BA     {
; 0000 00BB         putch_USART1(*(protocol+i));
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 00BC     }
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0000 00BD }
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;
;int RTU_ReedOperate0(char device_address,int starting_address,int data)
; 0000 00C0 {
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0000 00C1     char protocol[8];
; 0000 00C2     unsigned short crc16;
; 0000 00C3     int i=0;
; 0000 00C4     //PACKET_BUFF_IDX = 0;
; 0000 00C5 
; 0000 00C6     protocol[0]=device_address;
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;	device_address -> Y+16
;	starting_address -> Y+14
;	data -> Y+12
;	protocol -> Y+4
;	crc16 -> R16,R17
;	i -> R18,R19
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
; 0000 00C7     protocol[1]=0x03;
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
; 0000 00C8     protocol[2]=((starting_address>>8)  & 0x00ff);
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
; 0000 00C9     protocol[3]=((starting_address)     & 0x00ff);
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0000 00CA     protocol[4]=((data>>8)              & 0x00ff);
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0000 00CB     protocol[5]=((data)                 & 0x00ff);
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
; 0000 00CC     protocol[6]=0;
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
; 0000 00CD     protocol[7]=0;
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
; 0000 00CE 
; 0000 00CF     crc16 = CRC16(protocol, 6);
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0000 00D0 
; 0000 00D1     protocol[6] = (unsigned char)((crc16>>0) & 0x00ff);
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0000 00D2     protocol[7] = (unsigned char)((crc16>>8) & 0x00ff);
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0000 00D3 
; 0000 00D4 
; 0000 00D5     for(i=0;i<8;i++)
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0000 00D6     {
; 0000 00D7         putch_USART0(*(protocol+i));
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0000 00D8     }
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
; 0000 00D9 }
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;
;// interrupt [USART0_RXC] void usart0_rxc(void)
;// {
;//     unsigned char i = 0;
;
;//     i = UDR0;
;//     if(i == '<'){
;//         PACKET_BUFF_IDX = 0;
;//         PACKET_BUFF[PACKET_BUFF_IDX] = i;
;//         PACKET_BUFF_IDX++;
;//     }
;//     else if(i == '>'){
;//         PACKET_BUFF[PACKET_BUFF_IDX] = i;
;//         PACKET_BUFF_IDX+=2;
;//     }
;//     else{
;//         PACKET_BUFF[PACKET_BUFF_IDX] = i;
;//         PACKET_BUFF_IDX++;
;//     }
;// }
;
;interrupt [USART0_RXC] void usart0_rxc(void)
; 0000 00F0 {
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
; 0000 00F1     if(((TCNT2 < CHARACTER3_5) && (TIMER2_OVERFLOW == 0)) || PACKET_BUFF_IDX == 0)
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
; 0000 00F2     {
; 0000 00F3         PACKET_BUFF[PACKET_BUFF_IDX] = UDR0;
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
; 0000 00F4         PACKET_BUFF_IDX++;
;PCODE: $0000020C VOL: 0
; 0000 00F5         TCNT2 = 0;
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
; 0000 00F6     }
; 0000 00F7     else {
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
; 0000 00F8         PACKET_BUFF_IDX = 0;
;PCODE: $00000211 VOL: 0
; 0000 00F9         PACKET_BUFF[PACKET_BUFF_IDX] = UDR0;
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
; 0000 00FA         PACKET_BUFF_IDX++;
;PCODE: $00000217 VOL: 0
; 0000 00FB         TCNT2 = 0;
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
; 0000 00FC         TIMER2_OVERFLOW = 0;
;PCODE: $0000021A VOL: 0
; 0000 00FD     }
;PCODE: $0000021B VOL: 0
; 0000 00FE }
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;
;interrupt [USART1_RXC] void usart1_rxc(void)
; 0000 0101 {
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
; 0000 0102     unsigned char i = 0;
; 0000 0103     i = UDR1;
;PCODE: $00000221 VOL: 0
;	i -> R17
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
; 0000 0104     if(i == '<'){
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
; 0000 0105         VELOCITY_BUFF_IDX = 0;
;PCODE: $00000229 VOL: 0
; 0000 0106         VELOCITY_BUFF[VELOCITY_BUFF_IDX] = i;
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
; 0000 0107         VELOCITY_BUFF_IDX++;
;PCODE: $0000022E VOL: 0
; 0000 0108         CHECK_GETS = 1;
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
; 0000 0109     }
; 0000 010A     else if(i == '>'){
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
; 0000 010B         VELOCITY_BUFF[VELOCITY_BUFF_IDX] = i;
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
; 0000 010C         VELOCITY_BUFF_IDX++;
;PCODE: $0000023A VOL: 0
; 0000 010D         CHECK_GETS = 0;
;PCODE: $0000023B VOL: 0
; 0000 010E     }
; 0000 010F     else{
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
; 0000 0110         VELOCITY_BUFF[VELOCITY_BUFF_IDX] = i;
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
; 0000 0111         VELOCITY_BUFF_IDX++;
;PCODE: $00000242 VOL: 0
; 0000 0112     }
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
; 0000 0113 }
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;
;// interrupt [USART1_RXC] void usart1_rxc(void)
;// {
;//     if(((TCNT0 < CHARACTER3_5) && (TIMER2_OVERFLOW == 0)) || VELOCITY_BUFF_IDX == 0)
;//     {
;//         VELOCITY_BUFF[VELOCITY_BUFF_IDX] = UDR1;
;//         TCNT0 = 0;
;//         //PORTB.1 = ~PORTB.1;
;//     }
;//     else {
;//         VELOCITY_BUFF_IDX = 0;
;//         VELOCITY_BUFF[VELOCITY_BUFF_IDX] = UDR0;
;//         VELOCITY_BUFF_IDX++;
;//         TCNT0 = 0;
;//         //PORTB.1 = ~PORTB.1;
;//         TIMER2_OVERFLOW = 0;
;
;//     }
;// }
;
;// interrupt [USART1_RXC] void usart1_rxc(void)
;// {
;//     if(((TCNT0 < CHARACTER3_5) && (TIMER2_OVERFLOW == 0)) || VELOCITY_BUFF_IDX == 0)
;//     {
;//         VELOCITY_BUFF[VELOCITY_BUFF_IDX] = UDR1;
;//         TCNT0 = 0;
;//         //PORTB.1 = ~PORTB.1;
;//     }
;//     else {
;//         VELOCITY_BUFF_IDX = 0;
;//         VELOCITY_BUFF[VELOCITY_BUFF_IDX] = UDR0;
;//         VELOCITY_BUFF_IDX++;
;//         TCNT0 = 0;
;//         //PORTB.1 = ~PORTB.1;
;//     }
;// }
;
;interrupt [TIM2_COMP] void timer2_comp(void)
; 0000 013A {
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
; 0000 013B     if(TIMER2_OVERFLOW == 0) PORTB.1 = ~PORTB.1;
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
; 0000 013C 
; 0000 013D     TIMER2_OVERFLOW++;
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
; 0000 013E }
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;
;interrupt [TIM0_COMP] void timer0_comp(void)
; 0000 0141 {
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
; 0000 0142     TIMER0_OVERFLOW++;
;PCODE: $0000025E VOL: 0
; 0000 0143 }
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;
;void main(void)
; 0000 0146 {
;PCODE: $00000262 VOL: 0
; 0000 0147     int velocity_R = 0;
; 0000 0148     int velocity_L = 0;
; 0000 0149     unsigned char BUFF[100] = {0,};
; 0000 014A 
; 0000 014B     usart1_init(bps_115200);
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;	velocity_R -> R16,R17
;	velocity_L -> R18,R19
;	BUFF -> Y+0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
; 0000 014C     usart0_init(bps_115200);
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
; 0000 014D     timer2_init();
;PCODE: $00000272 VOL: 0
; 0000 014E     SREG |= 0x80;
;PCODE: $00000273 VOL: 0
; 0000 014F     DDRB.1 = 1;
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
; 0000 0150     PORTB.1 = 0;
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
; 0000 0151     //delay_ms(5000);
; 0000 0152     while(1)
;PCODE: $00000278 VOL: 0
; 0000 0153     {
; 0000 0154         // if(CHECK_GETS == 0)
; 0000 0155         // {
; 0000 0156             // //UCSR1B &= ~(1<<RXEN1);
; 0000 0157             // sscanf(VELOCITY_BUFF,"<%d,%d>", &velocity_R, &velocity_L);
; 0000 0158             // sprintf(BUFF,"<%d,%d>", velocity_R, velocity_L);
; 0000 0159 
; 0000 015A             //puts_USART1(BUFF,VELOCITY_BUFF_IDX);
; 0000 015B 
; 0000 015C             //UCSR1B |=(1<<RXEN1);
; 0000 015D             RTU_WriteOperate0(R,(unsigned int)121,(int)(300));
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
; 0000 015E             puts_Modbus1(PACKET_BUFF,PACKET_BUFF_IDX);
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
; 0000 015F             delay_ms(50);
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
; 0000 0160 
; 0000 0161             // RTU_WriteOperate0(L,(unsigned int)121,(int)-(velocity_L));
; 0000 0162             // delay_ms(5);
; 0000 0163 
; 0000 0164             // RTU_WriteOperate0(R,(unsigned int)120,(int)(1));
; 0000 0165             // delay_ms(5);
; 0000 0166 
; 0000 0167             // RTU_WriteOperate0(L,(unsigned int)120,(int)(1));
; 0000 0168             // delay_ms(5);
; 0000 0169         // }
; 0000 016A     }
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
; 0000 016B }
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
