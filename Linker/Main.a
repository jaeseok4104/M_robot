;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <delay.h>
;#include <math.h>
;
;#define bps_115200 0x0007
;
;#define POLYNORMIAL 0xA001
;
;#define CHARACTER3_5 60 // 0.03msec
;#define TRUE 0
;#define FALSE 1
;
;#define R 0x01
;#define L 0x02
;#define START 1
;#define STOP 2
;
;#define Length 0.281
;#define Gearratio 20
;
;#define Circular 57.29                      // 180 / PI
;
;
;/////////////////////////TWI//////////////////////////
;#define Inches 0x50
;#define Centimeters 0x51
;#define microSec 0x52
;#define USID 0xE4
;
;#define CommandReg 0
;#define Unused 1
;#define RangeHighByte 2
;#define RangeLowByte 3
;
;#define TWI_START 0x08
;#define MT_REPEATED_START 0x10
;#define MT_SLAW_ACK 0x18
;#define MT_DATA_ACK 0x28
;#define MT_SLAR_ACK 0x40
;#define MT_DATA_NACK 0x58
;
;#define ts 0.070         /// 샘플링 시간
;#define tau 0.1         /// 시정수
;
;//////////////////////integer////////////////
;unsigned char TIMER2_OVERFLOW = 0;
;unsigned char PACKET_BUFF[100] = {0,};
;unsigned char PACKET_BUFF_IDX = 0;
;
;unsigned int TIMER0_OVERFLOW = 0;
;unsigned char VELOCITY_BUFF[20] = {0,};
;unsigned char VELOCITY_BUFF_IDX = 0;
;
;///////////////FLAG//////////////////////
;unsigned char SRF02_CONVERTING_FLAG = 0;
;unsigned char SRF02_WAIT_FLAG = 0;
;unsigned char CHECK_GETS = 0;
;
;unsigned char CHECK_CONTROL = 0;
;unsigned int TIMER1_OVERFLOW = 0;
;
;void usart1_init(int bps)
; 0000 0040 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0041     UCSR1A = 0x00;
;	bps -> Y+0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0042     UCSR1B = (1<<RXEN1)|(1<<TXEN1)|(1<<RXCIE1); // RXCIE1 bit is recevie interrupt allow
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0043     UCSR1C = (1<<UCSZ11)|(1<<UCSZ10);
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0044     UCSR1C &= ~(1<<UMSEL1);
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0045 
; 0000 0046     UBRR1H = (unsigned char)((bps>>8)  & 0x00ff);
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0047     UBRR1L = (unsigned char)(bps & 0x00ff);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0048 }
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;
;void usart0_init(int bps)
; 0000 004B {
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 004C     UCSR0A = 0x00;
;	bps -> Y+0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 004D     UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0); // RXCIE1 bit is recevie interrupt allow
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 004E     UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 004F     UCSR0C &= ~(1<<UMSEL0);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0050 
; 0000 0051     UBRR0H = (unsigned char)((bps>>8)  & 0x00ff);
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0052     UBRR0L = (unsigned char)(bps & 0x00ff);
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0053 }
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;
;void timer2_init(void)
; 0000 0056 {
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0057     //TIMER2
; 0000 0058     TCCR2 = (1<<WGM21)|(1<<CS21)|(1<<CS20);// CTC모드, 1분주
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0059 
; 0000 005A     OCR2 = 40;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 005B     TIMSK = (1<<OCIE2)|(1<<OCIE0);
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 005C     //TIMSK = (1<<OCIE2);
; 0000 005D }
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;void timer0_init(void)
; 0000 005F {
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0060     TCCR0 = (1<<CS02)|(1<<CS01)|(1<<CS00); // CTC모드, 1024분주
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0061     TIMSK = (1<<OCIE2)|(1<<TOIE0);
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0062 }
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;
;void timer1_init(void)
; 0000 0065 {
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0066     // TCCR1A = (1<<COM1B0);
; 0000 0067     TCCR1B = (1<<WGM13)|(1<<WGM12)|(1<<CS12)|(1<<CS10);; // WGM bit setting
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0068 
; 0000 0069     OCR1B = 255;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 006A     ICR1 = 1200;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 006B     TIMSK |= (1<<OCIE1B);
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 006C }
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;
;void TWI_Init(){
; 0000 006E void TWI_Init(){
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 006F     TWBR = 10;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0070     TWSR = 0;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0071     TWCR = 0;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0072 }
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;
;
;////////////////////USART RTX/////////////////////////////////
;void putch_USART1(char data)
; 0000 0077 {
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0078     while(!(UCSR1A & (1<<UDRE1))); // UDRE flag is USART Data Register Empty
;	data -> Y+0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0079     UDR1 = data;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 007A }
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;
;void puts_USART1(char *str)
; 0000 007D {
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 007E     unsigned char i = 0;
; 0000 007F     unsigned char x = 0;
; 0000 0080     for(i = 0; str[i] ;i++){
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;	*str -> Y+2
;	i -> R17
;	x -> R16
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0081         putch_USART1(str[i]);
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0082     }
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0083     for(x = 0; x<i; x++){
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0084         *(str++) = 0;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0085     }
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 0086 }
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;
;void puts_Modbus1(char *str,char IDX)
; 0000 0089 {
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 008A     unsigned char i = 0;
; 0000 008B     UCSR0B &= ~(1<<RXEN0);
;PCODE: $000000A7 VOL: 0
;	*str -> Y+2
;	IDX -> Y+1
;	i -> R17
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 008C     // if(TIMER2_OVERFLOW>0)
; 0000 008D     // {
; 0000 008E         for(i = 0;i<IDX;i++) putch_USART1(*(str+i));
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 008F for(i = 0; i<IDX; i++) *(str+i) = 0;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 0091 UCSR0B |= (1<<4       );
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 0092 }
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;
;void putch_USART0(char data)
; 0000 0095 {
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 0096     while(!(UCSR0A & (1<<UDRE0))); // UDRE flag is USART Data Register Empty
;	data -> Y+0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 0097     UDR0 = data;
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 0098 }
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;
;void puts_USART0(char *str,char IDX)
; 0000 009B {
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 009C     //PACKET_BUFF[PACKET_BUFF_IDX] = 0;
; 0000 009D     unsigned char i = 0;
; 0000 009E     for(i = 0;i<IDX-1;i++)
;PCODE: $000000EB VOL: 0
;	*str -> Y+2
;	IDX -> Y+1
;	i -> R17
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 009F     {
; 0000 00A0         putch_USART1(*(str+i));
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 00A1     }
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 00A2 
; 0000 00A3     for(i = 0; i<IDX; i++)
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 00A4     {
; 0000 00A5         *(str+i) = 0;
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 00A6     }
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 00A7 }
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;
;///////////////////////Modbus///////////////////////////////////////
;unsigned short CRC16(unsigned char *puchMsg, int usDataLen)
; 0000 00AB {
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 00AC     int i;
; 0000 00AD     unsigned short crc, flag;
; 0000 00AE     crc = 0xffff;
;PCODE: $00000122 VOL: 0
;	*puchMsg -> Y+8
;	usDataLen -> Y+6
;	i -> R16,R17
;	crc -> R18,R19
;	flag -> R20,R21
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 00AF 
; 0000 00B0     while(usDataLen--){
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 00B1         crc ^= *puchMsg++;
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 00B2 
; 0000 00B3         for (i=0; i<8; i++){
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 00B4             flag = crc & 0x0001;
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 00B5             crc >>= 1;
;PCODE: $0000013D VOL: 0
; 0000 00B6             if(flag) crc ^= POLYNORMIAL;
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 00B7         }
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 00B8     }
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 00B9     return crc;
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 00BA }
;PCODE: $0000014F VOL: 0
;
;int RTU_WriteOperate0(char device_address,int starting_address,int data)
; 0000 00BD {
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 00BE     char protocol[8];
; 0000 00BF     unsigned short crc16;
; 0000 00C0     int i=0;
; 0000 00C1     PACKET_BUFF_IDX = 0;
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;	device_address -> Y+16
;	starting_address -> Y+14
;	data -> Y+12
;	protocol -> Y+4
;	crc16 -> R16,R17
;	i -> R18,R19
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 00C2 
; 0000 00C3     protocol[0]=device_address;
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 00C4     protocol[1]=0x06;
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 00C5     protocol[2]=((starting_address>>8)  & 0x00ff);
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 00C6     protocol[3]=((starting_address)     & 0x00ff);
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0000 00C7     protocol[4]=((data>>8)              & 0x00ff);
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 00C8     protocol[5]=((data)                 & 0x00ff);
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 00C9     protocol[6]=0;
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 00CA     protocol[7]=0;
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 00CB 
; 0000 00CC     crc16 = CRC16(protocol, 6);
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 00CD 
; 0000 00CE     protocol[6] = (unsigned char)((crc16>>0) & 0x00ff);
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 00CF     protocol[7] = (unsigned char)((crc16>>8) & 0x00ff);
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 00D0 
; 0000 00D1 
; 0000 00D2     for(i=0;i<8;i++)
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 00D3     {
; 0000 00D4         putch_USART0(*(protocol+i));
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 00D5     }
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 00D6 }
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;
;int RTU_ReedOperate0(char device_address,int starting_address,int data)
; 0000 00D9 {
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 00DA     char protocol[8];
; 0000 00DB     unsigned short crc16;
; 0000 00DC     int i=0;
; 0000 00DD     PACKET_BUFF_IDX = 0;
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;	device_address -> Y+16
;	starting_address -> Y+14
;	data -> Y+12
;	protocol -> Y+4
;	crc16 -> R16,R17
;	i -> R18,R19
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 00DE 
; 0000 00DF     protocol[0]=device_address;
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 00E0     protocol[1]=0x04;
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0000 00E1     protocol[2]=((starting_address>>8)  & 0x00ff);
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0000 00E2     protocol[3]=((starting_address)     & 0x00ff);
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 00E3     protocol[4]=((data>>8)              & 0x00ff);
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0000 00E4     protocol[5]=((data)                 & 0x00ff);
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0000 00E5     protocol[6]=0;
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0000 00E6     protocol[7]=0;
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 00E7 
; 0000 00E8     crc16 = CRC16(protocol, 6);
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 0000 00E9 
; 0000 00EA     protocol[6] = (unsigned char)((crc16>>0) & 0x00ff);
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0000 00EB     protocol[7] = (unsigned char)((crc16>>8) & 0x00ff);
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0000 00EC 
; 0000 00ED 
; 0000 00EE     for(i=0;i<8;i++)
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0000 00EF     {
; 0000 00F0         putch_USART0(*(protocol+i));
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0000 00F1     }
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
; 0000 00F2 }
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;
;void Make_MSPEED(float* _velocity, float* _angularV, int* R_RPM, int* L_RPM)
; 0000 00F5 {
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0000 00F6     float VelocityR = 0;
; 0000 00F7     float VelocityL = 0;
; 0000 00F8 
; 0000 00F9     if(*_velocity>=0){
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;	*_velocity -> Y+14
;	*_angularV -> Y+12
;	*R_RPM -> Y+10
;	*L_RPM -> Y+8
;	VelocityR -> Y+4
;	VelocityL -> Y+0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
; 0000 00FA         *_angularV = -(*_angularV);
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0000 00FB     }
; 0000 00FC 
; 0000 00FD     VelocityR = *_velocity+(*_angularV*Length)/2;
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
; 0000 00FE     // VelocityR = *_velocity+(*_angularV*Length)/4;
; 0000 00FF     VelocityL = *_velocity-(*_angularV*Length)/2;
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0000 0100     // VelocityL = *_velocity-(*_angularV*Length)/4;
; 0000 0101 
; 0000 0102     *R_RPM = (int)(152.788*VelocityR*Gearratio);
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
; 0000 0103     *L_RPM = (int)(152.788*VelocityL*Gearratio);
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
; 0000 0104 
; 0000 0105     if( ((*R_RPM<300)&&(*R_RPM>-300))&&((*L_RPM<300)&&(*L_RPM>-300))){
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
<<<<<<< HEAD
=======
; 0000 0113     }
; 0000 0114 
; 0000 0115     VelocityR = *_velocity+(*_angularV*Length)/2;
>>>>>>> merget
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
<<<<<<< HEAD
=======
; 0000 0116     VelocityL = *_velocity-(*_angularV*Length)/2;
>>>>>>> merget
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
; 0000 0106         *R_RPM = 0;
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
; 0000 0107         *L_RPM = 0;
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
; 0000 0108     }
; 0000 0109 }
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;
;void oper_Disapath(int velocity_R, int velocity_L)
; 0000 010C {
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
; 0000 010D     RTU_WriteOperate0(R,(unsigned int)121,(int)(velocity_R));
;	velocity_R -> Y+2
;	velocity_L -> Y+0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
; 0000 010E     delay_ms(1);
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
; 0000 010F 
; 0000 0110     RTU_WriteOperate0(L,(unsigned int)121,(int)-(velocity_L));
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
; 0000 0111     delay_ms(1);
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
; 0000 0112 
; 0000 0113     RTU_WriteOperate0(R,(unsigned int)120,(int)(START));
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
; 0000 0114     delay_ms(1);
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
; 0000 0115 
; 0000 0116     RTU_WriteOperate0(L,(unsigned int)120,(int)(START));
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
; 0000 0117     delay_ms(1);
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
; 0000 0118 }
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;
;int get_RPM(char *str,char IDX, int* goal)
; 0000 011B {
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
; 0000 011C     unsigned char i = 0;
; 0000 011D     unsigned int RPM = 0;
; 0000 011E     if(PACKET_BUFF[1] == 0x04){
;PCODE: $0000026E VOL: 0
;	*str -> Y+7
;	IDX -> Y+6
;	*goal -> Y+4
;	i -> R17
;	RPM -> R18,R19
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
; 0000 011F         RPM = (int)(PACKET_BUFF[5] << 8)+ (int)(PACKET_BUFF[6]);
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
; 0000 0120         *goal = (int)(PACKET_BUFF[3] << 8) + (int)(PACKET_BUFF[4]);
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
; 0000 0121         for(i = 0; i<IDX; i++) *(str+i) = 0;
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
; 0000 0123 return RPM;
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
; 0000 0124     }
; 0000 0125     return -1;
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
<<<<<<< HEAD
=======
; 0000 0132     unsigned char i = 0;
; 0000 0133     unsigned int RPM = 0;
; 0000 0134 
; 0000 0135     if(PACKET_BUFF[1]!=0x07){
>>>>>>> merget
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
; 0000 0126 }
;PCODE: $000002A7 VOL: 0
;
;///////////////// TWI /////////////////////////////
;unsigned char TWI_Read(unsigned char addr, unsigned char regAddr)
; 0000 012A {
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
; 0000 012B     unsigned char Data;
; 0000 012C     TWCR = ((1<<TWINT)|(1<<TWEN)|(1<<TWSTA));//Start조건 전송
;PCODE: $000002AA VOL: 0
;	addr -> Y+2
;	regAddr -> Y+1
;	Data -> R17
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
<<<<<<< HEAD
; 0000 012D     while(((TWCR & (1 << TWINT)) == 0x00) || ((TWSR & 0xf8)!=TWI_START));
=======
; 0000 0136         RPM = (int)(PACKET_BUFF[5] << 8)+ (int)(PACKET_BUFF[6]);
>>>>>>> merget
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
; 0000 0137         *goal = (int)(PACKET_BUFF[3] << 8) + (int)(PACKET_BUFF[4]);
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
; 0000 012E 
; 0000 012F     TWDR = addr&(~0x01);                //쓰기 위한 주소 전송
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
<<<<<<< HEAD
; 0000 0130     TWCR = ((1<<TWINT)|(1<<TWEN));
=======
>>>>>>> merget
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
; 0000 0131     while(((TWCR & (1 << TWINT)) == 0x00) || ((TWSR & 0xf8)!=MT_SLAW_ACK));
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
; 0000 0138         for(i = 0; i<IDX; i++) *(str+i) = 0;
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
; 0000 0132 
; 0000 0133     TWDR = regAddr;                     //Reg주소 전송
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
; 0000 0134     TWCR = ((1<<TWINT)|(1<<TWEN));
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
; 0000 0135     while(((TWCR & (1 << TWINT)) == 0x00) || ((TWSR & 0xf8)!=MT_DATA_ACK));
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
<<<<<<< HEAD
=======
; 0000 0139 return RPM;
>>>>>>> merget
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
; 0000 013A     }
; 0000 013B }
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
; 0000 0136 
; 0000 0137     TWCR = ((1<<TWINT)|(1<<TWEN)|(1<<TWSTA)); //Repeated start 전송
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
; 0000 0138     while(((TWCR & (1 << TWINT)) == 0x00) || ((TWSR & 0xf8)!=MT_REPEATED_START));
;PCODE: $000002DC VOL: 0
;
;interrupt [USART0_RXC] void usart0_rxc(void)
; 0000 013E {
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
; 0000 013F     if(((TCNT2 < CHARACTER3_5) && (TIMER2_OVERFLOW == 0)) || PACKET_BUFF_IDX == 0)
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
; 0000 0139 
; 0000 013A     TWDR = addr|0x01;                       //읽기 위한 주소 전송
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
; 0000 013B     TWCR = ((1<<TWINT)|(1<<TWEN));
;PCODE: $000002EB VOL: 0
<<<<<<< HEAD
=======
; 0000 0140     {
; 0000 0141         PACKET_BUFF[PACKET_BUFF_IDX] = UDR0;
>>>>>>> merget
;PCODE: $000002EC VOL: 0
; 0000 013C     while(((TWCR & (1 << TWINT)) == 0x00) || ((TWSR & 0xf8)!=MT_SLAR_ACK));
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
; 0000 0142         PACKET_BUFF_IDX++;
;PCODE: $000002F1 VOL: 0
; 0000 0143         TCNT2 = 0;
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
<<<<<<< HEAD
=======
; 0000 0144     }
; 0000 0145     else {
>>>>>>> merget
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
; 0000 0146         PACKET_BUFF_IDX = 0;
;PCODE: $000002F6 VOL: 0
<<<<<<< HEAD
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
; 0000 013D 
; 0000 013E 
; 0000 013F     TWCR = ((1<<TWINT)|(1<<TWEN));
=======
; 0000 0147         PACKET_BUFF[PACKET_BUFF_IDX] = UDR0;
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
>>>>>>> merget
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
; 0000 0140     while(((TWCR & (1 << TWINT)) == 0x00) || ((TWSR & 0xf8)!=MT_DATA_NACK));
;PCODE: $000002FB VOL: 0
<<<<<<< HEAD
=======
; 0000 0148         PACKET_BUFF_IDX++;
>>>>>>> merget
;PCODE: $000002FC VOL: 0
; 0000 0149         TCNT2 = 0;
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
<<<<<<< HEAD
=======
; 0000 014A         TIMER2_OVERFLOW = 0;
>>>>>>> merget
;PCODE: $000002FF VOL: 0
; 0000 014B     }
;PCODE: $00000300 VOL: 0
; 0000 014C }
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;
;interrupt [USART1_RXC] void usart1_rxc(void)
; 0000 014F {
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
; 0000 0150     unsigned char i = 0;
; 0000 0151     i = UDR1;
;PCODE: $00000306 VOL: 0
<<<<<<< HEAD
; 0000 0141     Data = TWDR;                        //Data읽기
=======
;	i -> R17
>>>>>>> merget
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
; 0000 0142 
; 0000 0143     TWCR = ((1<<TWINT)|(1<<TWEN)|(1<<TWSTO));
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
<<<<<<< HEAD
; 0000 0144 
; 0000 0145     return Data;
=======
; 0000 0152     if((i == '<') && (CHECK_GETS == 0)){
>>>>>>> merget
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
; 0000 0146 }
;PCODE: $00000310 VOL: 0
;
;void TWI_Write(unsigned char addr, unsigned char Data[],int NumberOfData)
; 0000 0149 {
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
; 0000 014A     int i=0;
; 0000 014B 
; 0000 014C     TWCR = ((1<<TWINT)|(1<<TWEN)|(1<<TWSTA));
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
<<<<<<< HEAD
;	addr -> Y+6
;	Data -> Y+4
;	NumberOfData -> Y+2
;	i -> R16,R17
=======
; 0000 0153         PORTB.3 = ~PORTB.3;
>>>>>>> merget
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
; 0000 014D     while(((TWCR & (1 << TWINT)) == 0x00) || ((TWSR & 0xf8)!=TWI_START));
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
; 0000 0154         VELOCITY_BUFF_IDX = 0;
;PCODE: $0000031F VOL: 0
; 0000 0155         VELOCITY_BUFF[VELOCITY_BUFF_IDX] = i;
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
; 0000 0156         VELOCITY_BUFF_IDX++;
;PCODE: $00000324 VOL: 0
<<<<<<< HEAD
; 0000 014E 
; 0000 014F     TWDR = addr&(~0x01);
=======
; 0000 0157     }
; 0000 0158     else if(i == '>' && (CHECK_GETS == 0)){
>>>>>>> merget
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
; 0000 0150     TWCR = ((1<<TWINT)|(1<<TWEN));
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
; 0000 0151     while(((TWCR & (1 << TWINT)) == 0x00) || ((TWSR & 0xf8)!=MT_SLAW_ACK));
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
; 0000 0159         VELOCITY_BUFF[VELOCITY_BUFF_IDX] = i;
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
; 0000 015A         VELOCITY_BUFF_IDX++;
;PCODE: $00000335 VOL: 0
<<<<<<< HEAD
; 0000 0152 
; 0000 0153     for(i=0;i<NumberOfData;i++){
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
=======
; 0000 015B         CHECK_GETS = 1;
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
; 0000 015C     }
; 0000 015D     else if(CHECK_GETS == 0){
>>>>>>> merget
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
; 0000 015E         VELOCITY_BUFF[VELOCITY_BUFF_IDX] = i;
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
; 0000 0154         TWDR = Data[i];
;PCODE: $0000033F VOL: 0
<<<<<<< HEAD
=======
; 0000 015F         VELOCITY_BUFF_IDX++;
>>>>>>> merget
;PCODE: $00000340 VOL: 0
; 0000 0160     }
; 0000 0161 }
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
; 0000 0155         TWCR = ((1<<TWINT)|(1<<TWEN));
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
<<<<<<< HEAD
; 0000 0156         while(((TWCR & (1 << TWINT)) == 0x00) || ((TWSR & 0xf8)!=MT_DATA_ACK));
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
=======
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
;
;interrupt [TIM2_COMP] void timer2_comp(void)
; 0000 0164 {
>>>>>>> merget
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
; 0000 0165     TIMER2_OVERFLOW++;
;PCODE: $0000034A VOL: 0
<<<<<<< HEAD
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
=======
; 0000 0166 }
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;
;interrupt [TIM0_OVF] void timer0_ovf(void)
; 0000 0169 {
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
; 0000 016A     TIMER0_OVERFLOW++;
>>>>>>> merget
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
; 0000 0157     }
;PCODE: $00000352 VOL: 0
<<<<<<< HEAD
=======
; 0000 016B }
>>>>>>> merget
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;
;
;interrupt [TIM1_COMPB] void timer0_comp(void)
; 0000 016F {
;PCODE: $00000356 VOL: 0
<<<<<<< HEAD
; 0000 0158 
; 0000 0159     TWCR = ((1<<TWINT)|(1<<TWEN)|(1<<TWSTO));
=======
>>>>>>> merget
;PCODE: $00000357 VOL: 0
; 0000 0170     TIMER1_OVERFLOW++;
;PCODE: $00000358 VOL: 0
; 0000 015A }
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
<<<<<<< HEAD
=======
; 0000 0171     TCNT1H = 0x00;
>>>>>>> merget
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
; 0000 0172     TCNT1L = 0x00;
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
; 0000 0173 }
;PCODE: $0000035F VOL: 0
<<<<<<< HEAD
;
;
;void Start_SRF02_Conv(unsigned char Adress, unsigned char mode){
; 0000 015D void Start_SRF02_Conv(unsigned char Adress, unsigned char mode){
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
; 0000 015E     unsigned char ConvMode[2] = {0x00,};
; 0000 015F     ConvMode[1] = mode;
=======
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
;
;void main(void)
; 0000 0176 {
>>>>>>> merget
;PCODE: $00000362 VOL: 0
; 0000 0177     float a_buff;
; 0000 0178     float v_buff;
; 0000 0179 
; 0000 017A     int velocity = 0;
; 0000 017B     int angularV = 0;
; 0000 017C     int velocity_R = 0;
; 0000 017D     int velocity_L = 0;
; 0000 017E     int past_velocity_R = 0;
; 0000 017F     int past_velocity_L = 0;
; 0000 0180     int del_ms = 0;
; 0000 0181 
; 0000 0182     int currentRPM_R = 0;
; 0000 0183     int currentRPM_L = 0;
; 0000 0184     float currentV_R = 0;
; 0000 0185     float currentV_L = 0;
; 0000 0186     int goal_current_R = 0;
; 0000 0187     int goal_current_L = 0;
; 0000 0188 
; 0000 0189     float d_velocity = 0;
; 0000 018A     float d_angularV = 0;
; 0000 018B     float control_time = 0;
; 0000 018C 
; 0000 018D     float d_x = 0;
; 0000 018E     float d_y = 0;
; 0000 018F     float d_angular = 0;
; 0000 0190     int d_angular_circula = 0;
; 0000 0191 
; 0000 0192     float goal_x = 0;
; 0000 0193     float goal_y = 0;
; 0000 0194     int goal_angular = 0;
; 0000 0195 
; 0000 0196     float TIMER1_TIME = 0;
; 0000 0197     float TIMER0_TIME = 0;
; 0000 0198 
; 0000 0199     char rootine_test = 0;
; 0000 019A 
; 0000 019B     unsigned char BUFF[500] = {0,};
; 0000 019C 
; 0000 019D     usart1_init(bps_115200);
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
;	Adress -> Y+3
;	mode -> Y+2
;	ConvMode -> Y+0
;PCODE: $00000367 VOL: 0
;	a_buff -> Y+573
;	v_buff -> Y+569
;	velocity -> R16,R17
;	angularV -> R18,R19
;	velocity_R -> R20,R21
;	velocity_L -> Y+567
;	past_velocity_R -> Y+565
;	past_velocity_L -> Y+563
;	del_ms -> Y+561
;	currentRPM_R -> Y+559
;	currentRPM_L -> Y+557
;	currentV_R -> Y+553
;	currentV_L -> Y+549
;	goal_current_R -> Y+547
;	goal_current_L -> Y+545
;	d_velocity -> Y+541
;	d_angularV -> Y+537
;	control_time -> Y+533
;	d_x -> Y+529
;	d_y -> Y+525
;	d_angular -> Y+521
;	d_angular_circula -> Y+519
;	goal_x -> Y+515
;	goal_y -> Y+511
;	goal_angular -> Y+509
;	TIMER1_TIME -> Y+505
;	TIMER0_TIME -> Y+501
;	rootine_test -> Y+500
;	BUFF -> Y+0
;PCODE: $00000368 VOL: 0
<<<<<<< HEAD
; 0000 0160     TWI_Write(Adress,ConvMode,2);
=======
>>>>>>> merget
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
<<<<<<< HEAD
; 0000 0161 }
=======
>>>>>>> merget
;PCODE: $00000370 VOL: 0
; 0000 019E     usart0_init(bps_115200);
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
;
;void Change_SRF02_Adress(unsigned char nowAdress, unsigned char changeAdress)
; 0000 0164 {
;PCODE: $00000373 VOL: 0
<<<<<<< HEAD
;PCODE: $00000374 VOL: 0
; 0000 0165     unsigned char sequense1[2] = {0x00,0xA0};
; 0000 0166     unsigned char sequense2[2] = {0x00,0xAA};
; 0000 0167     unsigned char sequense3[2] = {0x00,0xA5};
; 0000 0168     unsigned char sequense4[2] = {0x00,};
; 0000 0169     sequense4[1] = changeAdress;
;PCODE: $00000375 VOL: 0
=======
; 0000 019F     timer2_init();
;PCODE: $00000374 VOL: 0
; 0000 01A0     timer0_init();
;PCODE: $00000375 VOL: 0
; 0000 01A1     timer1_init();
>>>>>>> merget
;PCODE: $00000376 VOL: 0
; 0000 01A2     SREG |= 0x80;
;PCODE: $00000377 VOL: 0
; 0000 01A3     DDRB.1 = 1;
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
; 0000 01A4     DDRB.2 = 1;
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
; 0000 01A5     DDRB.3 = 1;
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
<<<<<<< HEAD
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
;	nowAdress -> Y+9
;	changeAdress -> Y+8
;	sequense1 -> Y+6
;	sequense2 -> Y+4
;	sequense3 -> Y+2
;	sequense4 -> Y+0
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
; 0000 016A     TWI_Write(nowAdress,sequense1,2);
=======
; 0000 01A6     delay_ms(5000);
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
; 0000 01A7     PORTB.1 = 0;
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
; 0000 01A8     PORTB.2 = 1;
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
; 0000 01A9 
; 0000 01AA     TIMER0_OVERFLOW = 0;
;PCODE: $00000385 VOL: 0
; 0000 01AB     TCNT0 = 0;
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
; 0000 01AC 
; 0000 01AD     while(1)
>>>>>>> merget
;PCODE: $00000388 VOL: 0
; 0000 01AE     {
; 0000 01AF         // if(CHECK_GETS)
; 0000 01B0         // {
; 0000 01B1         //     PORTB.1 = 1;
; 0000 01B2 
; 0000 01B3         //     UCSR1B &= ~(1<<RXEN1);
; 0000 01B4         //     // sscanf(VELOCITY_BUFF,"<%d,%d,%d>", &velocity, &angularV, &del_ms);
; 0000 01B5         //     sscanf(VELOCITY_BUFF,"<%f,%f,%d>", &goal_x, &goal_y, &goal_angular);
; 0000 01B6 
; 0000 01B7         //     if(!del_ms){
; 0000 01B8         //         d_x = 0;
; 0000 01B9         //         d_y = 0;
; 0000 01BA         //         d_angular = 0;
; 0000 01BB         //     }
; 0000 01BC 
; 0000 01BD         //     v_buff = (float)velocity/1000;
; 0000 01BE         //     a_buff = (float)angularV/1000;
; 0000 01BF 
; 0000 01C0         //     // Make_MSPEED(&v_buff, &a_buff, &velocity_R, &velocity_L);
; 0000 01C1 
; 0000 01C2         //     // oper_Disapath(velocity_R, velocity_L);
; 0000 01C3 
; 0000 01C4         //     // TIMER1_TIME = 0;
; 0000 01C5         //     // TIMER1_OVERFLOW = 0;
; 0000 01C6         //     // TCNT1L = 0;
; 0000 01C7 
; 0000 01C8         //     rootine_test = 0;
; 0000 01C9         //     CHECK_GETS = 0;
; 0000 01CA         //     UCSR1B |=(1<<RXEN1);
; 0000 01CB         //     // PORTB.1 = 0;
; 0000 01CC         // }
; 0000 01CD 
; 0000 01CE         if(rootine_test == 0)
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
; 0000 01CF         {
; 0000 01D0             v_buff = 0.15;
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
; 0000 01D1             a_buff = 0;
;PCODE: $0000038E VOL: 0
; 0000 016B     delay_ms(1);
;PCODE: $0000038F VOL: 0
; 0000 01D2             if(d_x<1)
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
; 0000 016C     TWI_Write(nowAdress,sequense2,2);
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
; 0000 01D3             {
; 0000 01D4                 Make_MSPEED(&v_buff, &a_buff, &velocity_R, &velocity_L);
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
; 0000 016D     delay_ms(1);
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
; 0000 016E     TWI_Write(nowAdress,sequense3,2);
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
<<<<<<< HEAD
=======
; 0000 01D5                 oper_Disapath(velocity_R,velocity_L);
>>>>>>> merget
;PCODE: $000003A2 VOL: 0
; 0000 016F     delay_ms(1);
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
<<<<<<< HEAD
; 0000 0170     TWI_Write(nowAdress,sequense4,2);
=======
; 0000 01D6             }
; 0000 01D7             else{
>>>>>>> merget
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
; 0000 01D8                 rootine_test = 1;
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
; 0000 01D9                 oper_Disapath(0,0);
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
;PCODE: $000003AC VOL: 0
; 0000 0171     delay_ms(1);
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
; 0000 01DA             }
;PCODE: $000003AF VOL: 0
<<<<<<< HEAD
; 0000 0172 }
=======
; 0000 01DB         }
; 0000 01DC         else if(rootine_test == 1)
>>>>>>> merget
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
;
;unsigned int Get_SRF02_Range(unsigned char Adress)
; 0000 0175 {
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
<<<<<<< HEAD
; 0000 0176     unsigned int range;
; 0000 0177     unsigned char High = 0,Low = 0;
; 0000 0178 
; 0000 0179     High = TWI_Read(Adress, RangeHighByte);
=======
; 0000 01DD         {
; 0000 01DE             v_buff = 0;
>>>>>>> merget
;PCODE: $000003B5 VOL: 0
;	Adress -> Y+4
;	range -> R16,R17
;	High -> R19
;	Low -> R18
;PCODE: $000003B6 VOL: 0
; 0000 01DF             a_buff = -0.7;
;PCODE: $000003B7 VOL: 0
;PCODE: $000003B8 VOL: 0
; 0000 01E0             if(d_angular_circula<90)
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
; 0000 01E1             {
; 0000 01E2                 Make_MSPEED(&v_buff, &a_buff, &velocity_R, &velocity_L);
;PCODE: $000003BC VOL: 0
;PCODE: $000003BD VOL: 0
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
; 0000 017A     if(High == 0xFF){
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
; 0000 017B 
; 0000 017C         return 0;
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
; 0000 017D     }
; 0000 017E     Low = TWI_Read(Adress, RangeLowByte);
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
<<<<<<< HEAD
=======
; 0000 01E3                 oper_Disapath(velocity_R,velocity_L);
>>>>>>> merget
;PCODE: $000003CA VOL: 0
;PCODE: $000003CB VOL: 0
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
<<<<<<< HEAD
; 0000 017F     range = (High<<8)+Low;
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
=======
; 0000 01E4             }
; 0000 01E5             else{
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
; 0000 01E6                 rootine_test = 2;
>>>>>>> merget
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
; 0000 01E7                 oper_Disapath(0,0);
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
; 0000 0180 
; 0000 0181     return range;
;PCODE: $000003D6 VOL: 0
; 0000 01E8             }
;PCODE: $000003D7 VOL: 0
; 0000 01E9         }
; 0000 01EA         else if(rootine_test == 2)
;PCODE: $000003D8 VOL: 0
;PCODE: $000003D9 VOL: 0
; 0000 0182 }
;PCODE: $000003DA VOL: 0
;
;void Start_SRF02_Conv_arr(unsigned char ID)
; 0000 0185 {
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
<<<<<<< HEAD
; 0000 0186     if(SRF02_WAIT_FLAG == 0){
;	ID -> Y+0
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
; 0000 0187         Start_SRF02_Conv(ID,Centimeters);
=======
; 0000 01EB         {
; 0000 01EC             v_buff = 0.15;
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
; 0000 01ED             a_buff = 0;
>>>>>>> merget
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
; 0000 01EE             if(d_y<1)
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
<<<<<<< HEAD
; 0000 0188         TCNT1H = 0;
=======
>>>>>>> merget
;PCODE: $000003E4 VOL: 0
; 0000 01EF             {
; 0000 01F0                 Make_MSPEED(&v_buff, &a_buff, &velocity_R, &velocity_L);
;PCODE: $000003E5 VOL: 0
; 0000 0189         TCNT1L = 0;
;PCODE: $000003E6 VOL: 0
;PCODE: $000003E7 VOL: 0
; 0000 018A         SRF02_WAIT_FLAG = 1;
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
<<<<<<< HEAD
; 0000 018B     }
; 0000 018C }
=======
>>>>>>> merget
;PCODE: $000003EA VOL: 0
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
;PCODE: $000003ED VOL: 0
<<<<<<< HEAD
;
;void Get_SRF02_Range_filter(unsigned char ID, unsigned int* range, unsigned int* pre_range, unsigned int *no_filter)
; 0000 018F {
=======
>>>>>>> merget
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
; 0000 0190     if(SRF02_CONVERTING_FLAG == 1 && SRF02_WAIT_FLAG == 1){
;	ID -> Y+6
;	*range -> Y+4
;	*pre_range -> Y+2
;	*no_filter -> Y+0
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
; 0000 01F1                 oper_Disapath(velocity_R,velocity_L);
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
;PCODE: $000003F6 VOL: 0
; 0000 01F2             }
; 0000 01F3             else{
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
<<<<<<< HEAD
=======
; 0000 01F4                 rootine_test = 3;
>>>>>>> merget
;PCODE: $000003F9 VOL: 0
; 0000 0191         *no_filter = Get_SRF02_Range(ID);
;PCODE: $000003FA VOL: 0
; 0000 01F5                 oper_Disapath(0,0);
;PCODE: $000003FB VOL: 0
;PCODE: $000003FC VOL: 0
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
; 0000 0192 
; 0000 0193         *range = ( tau * (*pre_range) + ts * (*no_filter) ) / (tau + ts) ; // low pass -filter
;PCODE: $000003FF VOL: 0
<<<<<<< HEAD
<<<<<<< HEAD
=======
; 0000 01D7         // delay_ms(5);
; 0000 01D8         RTU_ReedOperate0(L, (unsigned int)2 ,(unsigned int)2);
>>>>>>> merget
=======
; 0000 01F6             }
>>>>>>> merget
;PCODE: $00000400 VOL: 0
; 0000 01F7         }
; 0000 01F8 
; 0000 01F9         // TIMER1_TIME = (float)(TIMER1_OVERFLOW*255 +(int)TCNT1L)*0.0694444;
; 0000 01FA 
; 0000 01FB         // if(del_ms<TIMER1_TIME)
; 0000 01FC         // {
; 0000 01FD         //     oper_Disapath(0,0);
; 0000 01FE         //     TIMER1_OVERFLOW = 0;
; 0000 01FF         //     v_buff = 0;
; 0000 0200         //     a_buff = 0;
; 0000 0201         // }
; 0000 0202 
; 0000 0203         delay_ms(5);
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
;PCODE: $00000404 VOL: 0
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
; 0000 0204         RTU_ReedOperate0(R, (unsigned int)2 ,(unsigned int)2);
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
;PCODE: $00000409 VOL: 0
<<<<<<< HEAD
<<<<<<< HEAD
=======
; 0000 01DA         currentRPM_L = -get_RPM(PACKET_BUFF, PACKET_BUFF_IDX, &goal_current_L);
>>>>>>> merget
=======
>>>>>>> merget
;PCODE: $0000040A VOL: 0
;PCODE: $0000040B VOL: 0
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
; 0000 0205         delay_ms(5);
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
; 0000 0206         currentRPM_R = get_RPM(PACKET_BUFF, PACKET_BUFF_IDX, &goal_current_R);
;PCODE: $00000411 VOL: 0
<<<<<<< HEAD
<<<<<<< HEAD
; 0000 0194 
; 0000 0195         // sprintf(char_buff, "%d,%d\n", *no_filter, *range);
; 0000 0196         // puts_USART1(char_buff);
; 0000 0197 
; 0000 0198         *pre_range = *range;
=======
; 0000 01DB         // delay_ms(5);
; 0000 01DC 
; 0000 01DD         currentV_R = (float)(currentRPM_R/(152.788*Gearratio));
>>>>>>> merget
=======
>>>>>>> merget
;PCODE: $00000412 VOL: 0
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 0
;PCODE: $00000415 VOL: 0
; 0000 0199         SRF02_CONVERTING_FLAG = 0;
;PCODE: $00000416 VOL: 0
; 0000 019A         SRF02_WAIT_FLAG = 0;
;PCODE: $00000417 VOL: 0
<<<<<<< HEAD
<<<<<<< HEAD
; 0000 019B 
; 0000 019C     }
; 0000 019D }
=======
; 0000 01DE         currentV_L = (float)(currentRPM_L/(152.788*Gearratio));
>>>>>>> merget
=======
; 0000 0207         RTU_ReedOperate0(L, (unsigned int)2 ,(unsigned int)2);
>>>>>>> merget
;PCODE: $00000418 VOL: 0
;PCODE: $00000419 VOL: 0
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
;
;/////////////////////ISR//////////////////////////////////
;
;interrupt [USART0_RXC] void usart0_rxc(void)
; 0000 01A2 {
;PCODE: $0000041C VOL: 0
;PCODE: $0000041D VOL: 0
<<<<<<< HEAD
<<<<<<< HEAD
; 0000 01A3     // if(((TCNT2 < CHARACTER3_5) && (TIMER2_OVERFLOW == 0)) || PACKET_BUFF_IDX == 0)
; 0000 01A4     // {
; 0000 01A5         PACKET_BUFF[PACKET_BUFF_IDX] = UDR0;
=======
; 0000 01DF 
; 0000 01E0         d_velocity = (currentV_R + currentV_L)/2;
>>>>>>> merget
=======
>>>>>>> merget
;PCODE: $0000041E VOL: 0
; 0000 0208         delay_ms(5);
;PCODE: $0000041F VOL: 0
;PCODE: $00000420 VOL: 0
;PCODE: $00000421 VOL: 0
; 0000 0209         currentRPM_L = -get_RPM(PACKET_BUFF, PACKET_BUFF_IDX, &goal_current_L);
;PCODE: $00000422 VOL: 0
; 0000 01A6         PACKET_BUFF_IDX++;
;PCODE: $00000423 VOL: 0
<<<<<<< HEAD
; 0000 01A7         // TCNT2 = 0;
; 0000 01A8     // }
; 0000 01A9     // else {
; 0000 01AA     //     PACKET_BUFF_IDX = 0;
; 0000 01AB     //     PACKET_BUFF[PACKET_BUFF_IDX] = UDR0;
; 0000 01AC     //     PACKET_BUFF_IDX++;
; 0000 01AD     //     TCNT2 = 0;
; 0000 01AE     //     TIMER2_OVERFLOW = 0;
; 0000 01AF     // }
; 0000 01B0 }
=======
>>>>>>> merget
;PCODE: $00000424 VOL: 0
;PCODE: $00000425 VOL: 0
;PCODE: $00000426 VOL: 0
;
;interrupt [USART1_RXC] void usart1_rxc(void)
; 0000 01B3 {
;PCODE: $00000427 VOL: 0
;PCODE: $00000428 VOL: 0
; 0000 01B4     unsigned char i = 0;
; 0000 01B5     i = UDR1;
;PCODE: $00000429 VOL: 0
<<<<<<< HEAD
;	i -> R17
=======
; 0000 020A 
; 0000 020B         currentV_R = (float)(currentRPM_R/(152.788*Gearratio));
>>>>>>> merget
;PCODE: $0000042A VOL: 0
;PCODE: $0000042B VOL: 0
;PCODE: $0000042C VOL: 0
;PCODE: $0000042D VOL: 0
<<<<<<< HEAD
<<<<<<< HEAD
; 0000 01B6     if((i == '<') && (CHECK_GETS == 0)){
=======
; 0000 01E2 
; 0000 01E3         control_time = ((TIMER0_OVERFLOW)*255 + TCNT0)*0.0000694444;
>>>>>>> merget
=======
>>>>>>> merget
;PCODE: $0000042E VOL: 0
;PCODE: $0000042F VOL: 0
; 0000 020C         currentV_L = (float)(currentRPM_L/(152.788*Gearratio));
;PCODE: $00000430 VOL: 0
;PCODE: $00000431 VOL: 0
;PCODE: $00000432 VOL: 0
;PCODE: $00000433 VOL: 0
;PCODE: $00000434 VOL: 0
;PCODE: $00000435 VOL: 0
; 0000 020D 
; 0000 020E         d_velocity = (currentV_R + currentV_L)/2;
;PCODE: $00000436 VOL: 0
;PCODE: $00000437 VOL: 0
; 0000 01B7         PORTB.3 = ~PORTB.3;
;PCODE: $00000438 VOL: 0
;PCODE: $00000439 VOL: 0
;PCODE: $0000043A VOL: 0
;PCODE: $0000043B VOL: 0
;PCODE: $0000043C VOL: 0
; 0000 020F         d_angularV = (currentV_R-currentV_L)/Length;
;PCODE: $0000043D VOL: 0
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
;PCODE: $00000440 VOL: 0
;PCODE: $00000441 VOL: 0
<<<<<<< HEAD
; 0000 01B8         VELOCITY_BUFF_IDX = 0;
=======
>>>>>>> merget
;PCODE: $00000442 VOL: 0
; 0000 01B9         VELOCITY_BUFF[VELOCITY_BUFF_IDX] = i;
;PCODE: $00000443 VOL: 0
; 0000 0210 
; 0000 0211         control_time = ((TIMER0_OVERFLOW)*255 + TCNT0)*0.0000694444;
;PCODE: $00000444 VOL: 0
;PCODE: $00000445 VOL: 0
;PCODE: $00000446 VOL: 0
; 0000 01BA         VELOCITY_BUFF_IDX++;
;PCODE: $00000447 VOL: 0
; 0000 01BB     }
; 0000 01BC     else if(i == '>' && (CHECK_GETS == 0)){
;PCODE: $00000448 VOL: 0
;PCODE: $00000449 VOL: 0
;PCODE: $0000044A VOL: 0
;PCODE: $0000044B VOL: 0
;PCODE: $0000044C VOL: 0
;PCODE: $0000044D VOL: 0
;PCODE: $0000044E VOL: 0
; 0000 0212         TIMER0_OVERFLOW = 0;
;PCODE: $0000044F VOL: 0
; 0000 0213         TCNT0 = 0;
;PCODE: $00000450 VOL: 0
;PCODE: $00000451 VOL: 0
; 0000 0214 
; 0000 0215         d_angular += control_time*d_angularV;
;PCODE: $00000452 VOL: 0
;PCODE: $00000453 VOL: 0
; 0000 01BD         VELOCITY_BUFF[VELOCITY_BUFF_IDX] = i;
;PCODE: $00000454 VOL: 0
;PCODE: $00000455 VOL: 0
;PCODE: $00000456 VOL: 0
;PCODE: $00000457 VOL: 0
<<<<<<< HEAD
<<<<<<< HEAD
; 0000 01BE         VELOCITY_BUFF_IDX++;
=======
>>>>>>> merget
=======
; 0000 0216         d_x += d_velocity*control_time*cos(d_angular);
>>>>>>> merget
;PCODE: $00000458 VOL: 0
; 0000 01BF         CHECK_GETS = 1;
;PCODE: $00000459 VOL: 0
;PCODE: $0000045A VOL: 0
; 0000 01C0     }
; 0000 01C1     else if(CHECK_GETS == 0){
;PCODE: $0000045B VOL: 0
;PCODE: $0000045C VOL: 0
;PCODE: $0000045D VOL: 0
;PCODE: $0000045E VOL: 0
; 0000 01C2         VELOCITY_BUFF[VELOCITY_BUFF_IDX] = i;
;PCODE: $0000045F VOL: 0
;PCODE: $00000460 VOL: 0
;PCODE: $00000461 VOL: 0
;PCODE: $00000462 VOL: 0
; 0000 01C3         VELOCITY_BUFF_IDX++;
;PCODE: $00000463 VOL: 0
<<<<<<< HEAD
; 0000 01C4     }
; 0000 01C5 }
;PCODE: $00000464 VOL: 0
;PCODE: $00000465 VOL: 0
<<<<<<< HEAD
=======
; 0000 01EB             d_angular_circula = (int)(d_angular*Circular);
>>>>>>> merget
=======
; 0000 0217         d_y += d_velocity*control_time*sin(d_angular);
;PCODE: $00000464 VOL: 0
;PCODE: $00000465 VOL: 0
>>>>>>> merget
;PCODE: $00000466 VOL: 0
;PCODE: $00000467 VOL: 0
;PCODE: $00000468 VOL: 0
;PCODE: $00000469 VOL: 0
;PCODE: $0000046A VOL: 0
<<<<<<< HEAD
<<<<<<< HEAD
;
;interrupt [TIM2_COMP] void timer2_comp(void)
; 0000 01C8 {
=======
; 0000 01EC         }
; 0000 01ED 
; 0000 01EE         TIMER0_TIME += control_time;
>>>>>>> merget
=======
>>>>>>> merget
;PCODE: $0000046B VOL: 0
;PCODE: $0000046C VOL: 0
; 0000 01C9     TIMER2_OVERFLOW++;
;PCODE: $0000046D VOL: 0
; 0000 01CA }
;PCODE: $0000046E VOL: 0
;PCODE: $0000046F VOL: 0
; 0000 0218         d_angular_circula = (int)(d_angular*Circular);
;PCODE: $00000470 VOL: 0
<<<<<<< HEAD
;
;interrupt [TIM0_OVF] void timer0_ovf(void)
; 0000 01CD {
=======
>>>>>>> merget
;PCODE: $00000471 VOL: 0
;PCODE: $00000472 VOL: 0
; 0000 01CE     TIMER0_OVERFLOW++;
;PCODE: $00000473 VOL: 0
;PCODE: $00000474 VOL: 0
; 0000 0219 
; 0000 021A 
; 0000 021B         TIMER0_TIME += control_time;
;PCODE: $00000475 VOL: 0
<<<<<<< HEAD
; 0000 01CF }
=======
>>>>>>> merget
;PCODE: $00000476 VOL: 0
;PCODE: $00000477 VOL: 0
;PCODE: $00000478 VOL: 0
<<<<<<< HEAD
;
;interrupt [TIM1_COMPB] void timer0_comp(void)
; 0000 01D2 {
=======
; 0000 021C         if(TIMER0_TIME>0.1){
>>>>>>> merget
;PCODE: $00000479 VOL: 0
;PCODE: $0000047A VOL: 0
; 0000 01D3     TIMER1_OVERFLOW++;
;PCODE: $0000047B VOL: 0
;PCODE: $0000047C VOL: 0
; 0000 021D             // sprintf(BUFF, "%f, %f, %f, %f\n", d_velocity, v_buff, d_angularV, a_buff);
; 0000 021E             // sprintf(BUFF, "%f, %f\n", d_x, d_y,currentRPM_R, current);
; 0000 021F             // sprintf(BUFF, "%d, %d, %d\n", velocity, current_R, current_L);
; 0000 0220             sprintf(BUFF, "%.3f, %.3f, %4d\n", d_x, d_y, d_angular_circula);
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0
; 0000 01D4     TCNT1H = 0x00;
;PCODE: $0000047F VOL: 0
;PCODE: $00000480 VOL: 0
; 0000 01D5     TCNT1L = 0x00;
;PCODE: $00000481 VOL: 0
;PCODE: $00000482 VOL: 0
; 0000 01D6 }
;PCODE: $00000483 VOL: 0
;PCODE: $00000484 VOL: 0
;PCODE: $00000485 VOL: 0
;
;void main(void)
; 0000 01D9 {
;PCODE: $00000486 VOL: 0
; 0000 01DA     float a_buff;
; 0000 01DB     float v_buff;
; 0000 01DC 
; 0000 01DD     int velocity = 0;
; 0000 01DE     int angularV = 0;
; 0000 01DF     int velocity_R = 0;
; 0000 01E0     int velocity_L = 0;
; 0000 01E1     int past_velocity_R = 0;
; 0000 01E2     int past_velocity_L = 0;
; 0000 01E3     int del_ms = 0;
; 0000 01E4     char del_ms_flags = 0;
; 0000 01E5 
; 0000 01E6     int currentRPM_R = 0;
; 0000 01E7     int currentRPM_L = 0;
; 0000 01E8     float currentV_R = 0;
; 0000 01E9     float currentV_L = 0;
; 0000 01EA     int goal_current_R = 0;
; 0000 01EB     int goal_current_L = 0;
; 0000 01EC 
; 0000 01ED     float d_velocity = 0;
; 0000 01EE     float d_angularV = 0;
; 0000 01EF     float control_time = 0;
; 0000 01F0 
; 0000 01F1     float d_x = 0;
; 0000 01F2     float d_y = 0;
; 0000 01F3     float d_angular = 0;
; 0000 01F4     int d_angular_circula = 0;
; 0000 01F5 
; 0000 01F6     float goal_x = 0;
; 0000 01F7     float goal_y = 0;
; 0000 01F8     float goal_angular = 0;
; 0000 01F9 
; 0000 01FA     float TIMER1_TIME = 0;
; 0000 01FB     float TIMER0_TIME = 0;
; 0000 01FC 
; 0000 01FD     unsigned char BUFF[500] = {0,};
; 0000 01FE 
; 0000 01FF 
; 0000 0200     usart1_init(bps_115200);
;PCODE: $00000487 VOL: 0
;PCODE: $00000488 VOL: 0
<<<<<<< HEAD
<<<<<<< HEAD
;PCODE: $00000489 VOL: 0
;PCODE: $0000048A VOL: 0
;PCODE: $0000048B VOL: 0
;	a_buff -> Y+575
;	v_buff -> Y+571
;	velocity -> R16,R17
;	angularV -> R18,R19
;	velocity_R -> R20,R21
;	velocity_L -> Y+569
;	past_velocity_R -> Y+567
;	past_velocity_L -> Y+565
;	del_ms -> Y+563
;	del_ms_flags -> Y+562
;	currentRPM_R -> Y+560
;	currentRPM_L -> Y+558
;	currentV_R -> Y+554
;	currentV_L -> Y+550
;	goal_current_R -> Y+548
;	goal_current_L -> Y+546
;	d_velocity -> Y+542
;	d_angularV -> Y+538
;	control_time -> Y+534
;	d_x -> Y+530
;	d_y -> Y+526
;	d_angular -> Y+522
;	d_angular_circula -> Y+520
;	goal_x -> Y+516
;	goal_y -> Y+512
;	goal_angular -> Y+508
;	TIMER1_TIME -> Y+504
;	TIMER0_TIME -> Y+500
;	BUFF -> Y+0
;PCODE: $0000048C VOL: 0
;PCODE: $0000048D VOL: 0
=======
; 0000 01F5             // sprintf(BUFF, "%.3f, %.3f, %.3f, %.3f\n", currentV_R, -currentV_L, v_buff, -v_buff);
; 0000 01F6             puts_USART1(BUFF);
=======
>>>>>>> merget
;PCODE: $00000489 VOL: 0
;PCODE: $0000048A VOL: 0
;PCODE: $0000048B VOL: 0
;PCODE: $0000048C VOL: 0
; 0000 0221             // sprintf(BUFF, "%d, %d, %d, %d\n", currentRPM_R, currentRPM_L, goal_current_R, goal_current_L);
; 0000 0222             // sprintf(BUFF, "%.3f, %.3f, %.3f, %.3f\n", currentV_R, -currentV_L, v_buff, -v_buff);
; 0000 0223             puts_USART1(BUFF);
;PCODE: $0000048D VOL: 0
<<<<<<< HEAD
; 0000 01F8         }
; 0000 01F9 
; 0000 01FA     }
>>>>>>> merget
=======
>>>>>>> merget
;PCODE: $0000048E VOL: 0
;PCODE: $0000048F VOL: 0
; 0000 0224              TIMER0_TIME = 0;
;PCODE: $00000490 VOL: 0
;PCODE: $00000491 VOL: 0
; 0000 0225         }
; 0000 0226 
; 0000 0227     }
;PCODE: $00000492 VOL: 0
;PCODE: $00000493 VOL: 0
;PCODE: $00000494 VOL: 0
<<<<<<< HEAD
<<<<<<< HEAD
; 0000 0201     usart0_init(bps_115200);
;PCODE: $00000495 VOL: 0
;PCODE: $00000496 VOL: 0
;PCODE: $00000497 VOL: 0
; 0000 0202     timer2_init();
;PCODE: $00000498 VOL: 0
; 0000 0203     timer0_init();
;PCODE: $00000499 VOL: 0
; 0000 0204     timer1_init();
;PCODE: $0000049A VOL: 0
; 0000 0205     SREG |= 0x80;
;PCODE: $0000049B VOL: 0
; 0000 0206     DDRB.1 = 1;
;PCODE: $0000049C VOL: 0
;PCODE: $0000049D VOL: 0
; 0000 0207     DDRB.2 = 1;
;PCODE: $0000049E VOL: 0
;PCODE: $0000049F VOL: 0
; 0000 0208     DDRB.3 = 1;
;PCODE: $000004A0 VOL: 0
;PCODE: $000004A1 VOL: 0
; 0000 0209     delay_ms(5000);
;PCODE: $000004A2 VOL: 0
;PCODE: $000004A3 VOL: 0
;PCODE: $000004A4 VOL: 0
; 0000 020A     PORTB.1 = 0;
;PCODE: $000004A5 VOL: 0
;PCODE: $000004A6 VOL: 0
; 0000 020B     PORTB.2 = 1;
;PCODE: $000004A7 VOL: 0
;PCODE: $000004A8 VOL: 0
; 0000 020C 
; 0000 020D     TIMER0_OVERFLOW = 0;
;PCODE: $000004A9 VOL: 0
; 0000 020E     TCNT0 = 0;
;PCODE: $000004AA VOL: 0
;PCODE: $000004AB VOL: 0
; 0000 020F 
; 0000 0210     while(1)
;PCODE: $000004AC VOL: 0
; 0000 0211     {
; 0000 0212         if(CHECK_GETS)
;PCODE: $000004AD VOL: 0
;PCODE: $000004AE VOL: 0
; 0000 0213         {
; 0000 0214             PORTB.1 = 1;
;PCODE: $000004AF VOL: 0
;PCODE: $000004B0 VOL: 0
; 0000 0215 
; 0000 0216             UCSR1B &= ~(1<<RXEN1);
;PCODE: $000004B1 VOL: 0
;PCODE: $000004B2 VOL: 0
;PCODE: $000004B3 VOL: 0
; 0000 0217             sscanf(VELOCITY_BUFF,"<%d,%d,%d>", &velocity, &angularV, &del_ms);
;PCODE: $000004B4 VOL: 0
;PCODE: $000004B5 VOL: 0
;PCODE: $000004B6 VOL: 0
;PCODE: $000004B7 VOL: 0
;PCODE: $000004B8 VOL: 0
;PCODE: $000004B9 VOL: 0
;PCODE: $000004BA VOL: 0
;PCODE: $000004BB VOL: 0
;PCODE: $000004BC VOL: 0
;PCODE: $000004BD VOL: 0
;PCODE: $000004BE VOL: 0
;PCODE: $000004BF VOL: 0
;PCODE: $000004C0 VOL: 0
;PCODE: $000004C1 VOL: 0
;PCODE: $000004C2 VOL: 0
;PCODE: $000004C3 VOL: 0
;PCODE: $000004C4 VOL: 0
;PCODE: $000004C5 VOL: 0
;PCODE: $000004C6 VOL: 0
;PCODE: $000004C7 VOL: 0
;PCODE: $000004C8 VOL: 0
;PCODE: $000004C9 VOL: 0
;PCODE: $000004CA VOL: 0
;PCODE: $000004CB VOL: 0
;PCODE: $000004CC VOL: 0
;PCODE: $000004CD VOL: 0
; 0000 0218             // sscanf(VELOCITY_BUFF,"<%d,%d,%f,%f,%f>", &velocity, &angularV, &goal_x, &goal_y, goal_angular);
; 0000 0219 
; 0000 021A             if(!del_ms){
;PCODE: $000004CE VOL: 0
;PCODE: $000004CF VOL: 0
;PCODE: $000004D0 VOL: 0
; 0000 021B                 d_x = 0;
;PCODE: $000004D1 VOL: 0
;PCODE: $000004D2 VOL: 0
; 0000 021C                 d_y = 0;
;PCODE: $000004D3 VOL: 0
;PCODE: $000004D4 VOL: 0
; 0000 021D                 d_angular = 0;
;PCODE: $000004D5 VOL: 0
;PCODE: $000004D6 VOL: 0
; 0000 021E             }
; 0000 021F 
; 0000 0220             v_buff = (float)velocity/1000;
;PCODE: $000004D7 VOL: 0
;PCODE: $000004D8 VOL: 0
;PCODE: $000004D9 VOL: 0
;PCODE: $000004DA VOL: 0
;PCODE: $000004DB VOL: 0
;PCODE: $000004DC VOL: 0
;PCODE: $000004DD VOL: 0
; 0000 0221             a_buff = (float)angularV/1000;
;PCODE: $000004DE VOL: 0
;PCODE: $000004DF VOL: 0
;PCODE: $000004E0 VOL: 0
;PCODE: $000004E1 VOL: 0
;PCODE: $000004E2 VOL: 0
;PCODE: $000004E3 VOL: 0
; 0000 0222 
; 0000 0223             Make_MSPEED(&v_buff, &a_buff, &velocity_R, &velocity_L);
;PCODE: $000004E4 VOL: 0
;PCODE: $000004E5 VOL: 0
;PCODE: $000004E6 VOL: 0
;PCODE: $000004E7 VOL: 0
;PCODE: $000004E8 VOL: 0
;PCODE: $000004E9 VOL: 0
;PCODE: $000004EA VOL: 0
;PCODE: $000004EB VOL: 0
;PCODE: $000004EC VOL: 0
;PCODE: $000004ED VOL: 0
;PCODE: $000004EE VOL: 0
;PCODE: $000004EF VOL: 0
;PCODE: $000004F0 VOL: 0
;PCODE: $000004F1 VOL: 0
; 0000 0224 
; 0000 0225             oper_Disapath(velocity_R, velocity_L);
;PCODE: $000004F2 VOL: 0
;PCODE: $000004F3 VOL: 0
;PCODE: $000004F4 VOL: 0
;PCODE: $000004F5 VOL: 0
; 0000 0226 
; 0000 0227             TIMER1_TIME = 0;
;PCODE: $000004F6 VOL: 0
;PCODE: $000004F7 VOL: 0
; 0000 0228             TIMER1_OVERFLOW = 0;
;PCODE: $000004F8 VOL: 0
;PCODE: $000004F9 VOL: 0
; 0000 0229             TCNT1L = 0;
;PCODE: $000004FA VOL: 0
;PCODE: $000004FB VOL: 0
; 0000 022A 
; 0000 022B             del_ms_flags = 0;
;PCODE: $000004FC VOL: 0
;PCODE: $000004FD VOL: 0
; 0000 022C             CHECK_GETS = 0;
;PCODE: $000004FE VOL: 0
; 0000 022D             UCSR1B |=(1<<RXEN1);
;PCODE: $000004FF VOL: 0
;PCODE: $00000500 VOL: 0
;PCODE: $00000501 VOL: 0
; 0000 022E             // PORTB.1 = 0;
; 0000 022F         }
; 0000 0230 
; 0000 0231         TIMER1_TIME = (float)(TIMER1_OVERFLOW*255 +(int)TCNT1L)*0.0694444;
;PCODE: $00000502 VOL: 0
;PCODE: $00000503 VOL: 0
;PCODE: $00000504 VOL: 0
;PCODE: $00000505 VOL: 0
;PCODE: $00000506 VOL: 0
;PCODE: $00000507 VOL: 0
;PCODE: $00000508 VOL: 0
;PCODE: $00000509 VOL: 0
;PCODE: $0000050A VOL: 0
;PCODE: $0000050B VOL: 0
;PCODE: $0000050C VOL: 0
;PCODE: $0000050D VOL: 0
; 0000 0232 
; 0000 0233         if(del_ms<TIMER1_TIME && del_ms_flags == 0)
;PCODE: $0000050E VOL: 0
;PCODE: $0000050F VOL: 0
;PCODE: $00000510 VOL: 0
;PCODE: $00000511 VOL: 0
;PCODE: $00000512 VOL: 0
;PCODE: $00000513 VOL: 0
;PCODE: $00000514 VOL: 0
;PCODE: $00000515 VOL: 0
;PCODE: $00000516 VOL: 0
;PCODE: $00000517 VOL: 0
;PCODE: $00000518 VOL: 0
;PCODE: $00000519 VOL: 0
; 0000 0234         {
; 0000 0235             oper_Disapath(0,0);
;PCODE: $0000051A VOL: 0
;PCODE: $0000051B VOL: 0
;PCODE: $0000051C VOL: 0
;PCODE: $0000051D VOL: 0
;PCODE: $0000051E VOL: 0
; 0000 0236             TIMER1_OVERFLOW = 0;
;PCODE: $0000051F VOL: 0
;PCODE: $00000520 VOL: 0
; 0000 0237             v_buff = 0;
;PCODE: $00000521 VOL: 0
;PCODE: $00000522 VOL: 0
; 0000 0238             a_buff = 0;
;PCODE: $00000523 VOL: 0
;PCODE: $00000524 VOL: 0
; 0000 0239             del_ms_flags = 1;
;PCODE: $00000525 VOL: 0
;PCODE: $00000526 VOL: 0
; 0000 023A         }
; 0000 023B 
; 0000 023C         RTU_ReedOperate0(R, (unsigned int)2 ,(unsigned int)2);
;PCODE: $00000527 VOL: 0
;PCODE: $00000528 VOL: 0
;PCODE: $00000529 VOL: 0
;PCODE: $0000052A VOL: 0
;PCODE: $0000052B VOL: 0
;PCODE: $0000052C VOL: 0
;PCODE: $0000052D VOL: 0
;PCODE: $0000052E VOL: 0
; 0000 023D         delay_ms(5);
;PCODE: $0000052F VOL: 0
;PCODE: $00000530 VOL: 0
;PCODE: $00000531 VOL: 0
; 0000 023E         // puts_Modbus1(PACKET_BUFF,PACKET_BUFF_IDX);
; 0000 023F         currentRPM_R = get_RPM(PACKET_BUFF, PACKET_BUFF_IDX, &goal_current_R);
;PCODE: $00000532 VOL: 0
;PCODE: $00000533 VOL: 0
;PCODE: $00000534 VOL: 0
;PCODE: $00000535 VOL: 0
;PCODE: $00000536 VOL: 0
;PCODE: $00000537 VOL: 0
;PCODE: $00000538 VOL: 0
; 0000 0240         RTU_ReedOperate0(L, (unsigned int)2 ,(unsigned int)2);
;PCODE: $00000539 VOL: 0
;PCODE: $0000053A VOL: 0
;PCODE: $0000053B VOL: 0
;PCODE: $0000053C VOL: 0
;PCODE: $0000053D VOL: 0
;PCODE: $0000053E VOL: 0
;PCODE: $0000053F VOL: 0
; 0000 0241         delay_ms(5);
;PCODE: $00000540 VOL: 0
;PCODE: $00000541 VOL: 0
;PCODE: $00000542 VOL: 0
; 0000 0242         // puts_Modbus1(PACKET_BUFF,PACKET_BUFF_IDX);
; 0000 0243         currentRPM_L = -get_RPM(PACKET_BUFF, PACKET_BUFF_IDX, &goal_current_L);
;PCODE: $00000543 VOL: 0
;PCODE: $00000544 VOL: 0
;PCODE: $00000545 VOL: 0
;PCODE: $00000546 VOL: 0
;PCODE: $00000547 VOL: 0
;PCODE: $00000548 VOL: 0
;PCODE: $00000549 VOL: 0
;PCODE: $0000054A VOL: 0
; 0000 0244 
; 0000 0245         currentV_R = (float)(currentRPM_R/(152.788*Gearratio));
;PCODE: $0000054B VOL: 0
;PCODE: $0000054C VOL: 0
;PCODE: $0000054D VOL: 0
;PCODE: $0000054E VOL: 0
;PCODE: $0000054F VOL: 0
;PCODE: $00000550 VOL: 0
; 0000 0246         currentV_L = (float)(currentRPM_L/(152.788*Gearratio));
;PCODE: $00000551 VOL: 0
;PCODE: $00000552 VOL: 0
;PCODE: $00000553 VOL: 0
;PCODE: $00000554 VOL: 0
;PCODE: $00000555 VOL: 0
;PCODE: $00000556 VOL: 0
; 0000 0247 
; 0000 0248         d_velocity = (currentV_R + currentV_L)/2;
;PCODE: $00000557 VOL: 0
;PCODE: $00000558 VOL: 0
;PCODE: $00000559 VOL: 0
;PCODE: $0000055A VOL: 0
;PCODE: $0000055B VOL: 0
;PCODE: $0000055C VOL: 0
;PCODE: $0000055D VOL: 0
; 0000 0249         d_angularV = (currentV_R-currentV_L)/Length;
;PCODE: $0000055E VOL: 0
;PCODE: $0000055F VOL: 0
;PCODE: $00000560 VOL: 0
;PCODE: $00000561 VOL: 0
;PCODE: $00000562 VOL: 0
;PCODE: $00000563 VOL: 0
;PCODE: $00000564 VOL: 0
; 0000 024A 
; 0000 024B         control_time = ((TIMER0_OVERFLOW)*255 + TCNT0)*0.0000694444;
;PCODE: $00000565 VOL: 0
;PCODE: $00000566 VOL: 0
;PCODE: $00000567 VOL: 0
;PCODE: $00000568 VOL: 0
;PCODE: $00000569 VOL: 0
;PCODE: $0000056A VOL: 0
;PCODE: $0000056B VOL: 0
;PCODE: $0000056C VOL: 0
;PCODE: $0000056D VOL: 0
;PCODE: $0000056E VOL: 0
;PCODE: $0000056F VOL: 0
; 0000 024C         TIMER0_OVERFLOW = 0;
;PCODE: $00000570 VOL: 0
; 0000 024D         TCNT0 = 0;
;PCODE: $00000571 VOL: 0
;PCODE: $00000572 VOL: 0
; 0000 024E 
; 0000 024F         if((d_velocity!=0) ||(d_angularV!=0)){
;PCODE: $00000573 VOL: 0
;PCODE: $00000574 VOL: 0
;PCODE: $00000575 VOL: 0
;PCODE: $00000576 VOL: 0
;PCODE: $00000577 VOL: 0
;PCODE: $00000578 VOL: 0
;PCODE: $00000579 VOL: 0
;PCODE: $0000057A VOL: 0
; 0000 0250             d_x += d_velocity*control_time*cos(control_time*d_angularV);
;PCODE: $0000057B VOL: 0
;PCODE: $0000057C VOL: 0
;PCODE: $0000057D VOL: 0
;PCODE: $0000057E VOL: 0
;PCODE: $0000057F VOL: 0
;PCODE: $00000580 VOL: 0
;PCODE: $00000581 VOL: 0
;PCODE: $00000582 VOL: 0
;PCODE: $00000583 VOL: 0
;PCODE: $00000584 VOL: 0
;PCODE: $00000585 VOL: 0
;PCODE: $00000586 VOL: 0
;PCODE: $00000587 VOL: 0
;PCODE: $00000588 VOL: 0
; 0000 0251             d_y += d_velocity*control_time*sin(control_time*d_angularV);
;PCODE: $00000589 VOL: 0
;PCODE: $0000058A VOL: 0
;PCODE: $0000058B VOL: 0
;PCODE: $0000058C VOL: 0
;PCODE: $0000058D VOL: 0
;PCODE: $0000058E VOL: 0
;PCODE: $0000058F VOL: 0
;PCODE: $00000590 VOL: 0
;PCODE: $00000591 VOL: 0
;PCODE: $00000592 VOL: 0
;PCODE: $00000593 VOL: 0
;PCODE: $00000594 VOL: 0
;PCODE: $00000595 VOL: 0
;PCODE: $00000596 VOL: 0
; 0000 0252             d_angular += control_time*d_angularV;
;PCODE: $00000597 VOL: 0
;PCODE: $00000598 VOL: 0
;PCODE: $00000599 VOL: 0
;PCODE: $0000059A VOL: 0
;PCODE: $0000059B VOL: 0
;PCODE: $0000059C VOL: 0
; 0000 0253             d_angular_circula = (int)(d_angular*Circular);
;PCODE: $0000059D VOL: 0
;PCODE: $0000059E VOL: 0
;PCODE: $0000059F VOL: 0
;PCODE: $000005A0 VOL: 0
;PCODE: $000005A1 VOL: 0
; 0000 0254         }
; 0000 0255 
; 0000 0256         TIMER0_TIME += control_time;
;PCODE: $000005A2 VOL: 0
;PCODE: $000005A3 VOL: 0
;PCODE: $000005A4 VOL: 0
;PCODE: $000005A5 VOL: 0
;PCODE: $000005A6 VOL: 0
; 0000 0257         if(TIMER0_TIME>0.1){
;PCODE: $000005A7 VOL: 0
;PCODE: $000005A8 VOL: 0
;PCODE: $000005A9 VOL: 0
;PCODE: $000005AA VOL: 0
; 0000 0258             // sprintf(BUFF, "%f, %f, %f, %f\n", d_velocity, v_buff, d_angularV, a_buff);
; 0000 0259             // sprintf(BUFF, "%f, %f\n", d_x, d_y,currentRPM_R, current);
; 0000 025A             // sprintf(BUFF, "%d, %d, %d\n", velocity, current_R, current_L);
; 0000 025B             // sprintf(BUFF, "%.3f, %.3f, %4d\n", d_x, d_y, d_angular_circula);
; 0000 025C             sprintf(BUFF, "%d, %d, %d, %d\n", currentRPM_R, currentRPM_L, goal_current_R, -goal_current_L);
;PCODE: $000005AB VOL: 0
;PCODE: $000005AC VOL: 0
;PCODE: $000005AD VOL: 0
;PCODE: $000005AE VOL: 0
;PCODE: $000005AF VOL: 0
;PCODE: $000005B0 VOL: 0
;PCODE: $000005B1 VOL: 0
;PCODE: $000005B2 VOL: 0
;PCODE: $000005B3 VOL: 0
;PCODE: $000005B4 VOL: 0
;PCODE: $000005B5 VOL: 0
;PCODE: $000005B6 VOL: 0
;PCODE: $000005B7 VOL: 0
;PCODE: $000005B8 VOL: 0
;PCODE: $000005B9 VOL: 0
;PCODE: $000005BA VOL: 0
;PCODE: $000005BB VOL: 0
;PCODE: $000005BC VOL: 0
;PCODE: $000005BD VOL: 0
;PCODE: $000005BE VOL: 0
;PCODE: $000005BF VOL: 0
;PCODE: $000005C0 VOL: 0
; 0000 025D             // sprintf(BUFF, "%.3f, %.3f, %.3f, %.3f\n", currentV_R, -currentV_L, v_buff, -v_buff);
; 0000 025E             puts_USART1(BUFF);
;PCODE: $000005C1 VOL: 0
;PCODE: $000005C2 VOL: 0
;PCODE: $000005C3 VOL: 0
; 0000 025F             TIMER0_TIME = 0;
;PCODE: $000005C4 VOL: 0
;PCODE: $000005C5 VOL: 0
; 0000 0260         }
; 0000 0261 
; 0000 0262     }
;PCODE: $000005C6 VOL: 0
;PCODE: $000005C7 VOL: 0
;PCODE: $000005C8 VOL: 0
; 0000 0263 }
;PCODE: $000005C9 VOL: 0
;PCODE: $000005CA VOL: 0
;PCODE: $000005CB VOL: 0
;PCODE: $000005CC VOL: 0
=======
>>>>>>> merget
=======
; 0000 0228 }
;PCODE: $00000495 VOL: 0
;PCODE: $00000496 VOL: 0
;PCODE: $00000497 VOL: 0
;PCODE: $00000498 VOL: 0
>>>>>>> merget
