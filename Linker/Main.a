;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;#define bps_115200 0x0007
;
;#define POLYNORMIAL 0xA001
;
;unsigned char PACKET_BUFF[100] = {0,};
;unsigned char PACKET_BUFF_IDX = 0;
;
;void usart_init(int bps)
; 0000 000C {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 000D     UCSR1A = 0x00;
;	bps -> Y+0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 000E     UCSR1B = (1<<RXEN1)|(1<<TXEN1)|(1<<RXCIE1); // RXCIE1 bit is recevie interrupt allow
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 000F     UCSR1C = (1<<UCSZ11)|(1<<UCSZ10);
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0010     UCSR1C &= ~(1<<UMSEL1);
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0011 
; 0000 0012     UBRR1H = (unsigned char)((bps>>8)  & 0x00ff);
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0013     UBRR1L = (unsigned char)(bps & 0x00ff);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0014 
; 0000 0015     UCSR0A = 0x00;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0016     UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0); // RXCIE1 bit is recevie interrupt allow
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0017     UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0018     UCSR0C &= ~(1<<UMSEL0);
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0019 
; 0000 001A     UBRR0H = (unsigned char)((bps>>8)  & 0x00ff);
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 001B     UBRR0L = (unsigned char)(bps & 0x00ff);
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 001C }
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;
;void putch_USART1(char data)
; 0000 001F {
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0020     while(!(UCSR1A & (1<<UDRE1))); // UDRE flag is USART Data Register Empty
;	data -> Y+0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0021     UDR1 = data;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0022 }
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;
;void puts_USART1(char *str)
; 0000 0025 {
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0026     PACKET_BUFF_IDX = 0;
;	*str -> Y+0
;PCODE: $00000041 VOL: 0
; 0000 0027 
; 0000 0028     while(*str !=0)
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0029     {
; 0000 002A         putch_USART1(*str);
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 002B         str++;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 002C     }
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 002D }
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;
;void putch_USART0(char data)
; 0000 0030 {
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0031     while(!(UCSR0A & (1<<UDRE0))); // UDRE flag is USART Data Register Empty
;	data -> Y+0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0032     UDR0 = data;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0033 }
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;
;void puts_USART0(char *str)
; 0000 0036 {
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0037     PACKET_BUFF_IDX = 0;
;	*str -> Y+0
;PCODE: $00000062 VOL: 0
; 0000 0038 
; 0000 0039     while(*str !=0)
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 003A     {
; 0000 003B         putch_USART0(*str);
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 003C         str++;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 003D     }
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 003E }
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;
;unsigned short CRC16(unsigned char *puchMsg, int usDataLen)
; 0000 0041 {
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0042     int i;
; 0000 0043     unsigned short crc, flag;
; 0000 0044     crc = 0xffff;
;PCODE: $00000076 VOL: 0
;	*puchMsg -> Y+8
;	usDataLen -> Y+6
;	i -> R16,R17
;	crc -> R18,R19
;	flag -> R20,R21
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0045 
; 0000 0046     while(usDataLen--){
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0047         crc ^= *puchMsg++;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0048 
; 0000 0049         for (i=0; i<8; i++){
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 004A             flag = crc & 0x0001;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 004B             crc >>= 1;
;PCODE: $00000091 VOL: 0
; 0000 004C             if(flag) crc ^= POLYNORMIAL;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 004D         }
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 004E     }
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 004F     return crc;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0050 
; 0000 0051 }
;PCODE: $000000A3 VOL: 0
;
;int RTU_WriteOperate(char device_address,int starting_address,int data)
; 0000 0054 {
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 0055     char protocol[8];
; 0000 0056     unsigned short crc16;
; 0000 0057     int i=0;
; 0000 0058     PACKET_BUFF_IDX = 0;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;	device_address -> Y+16
;	starting_address -> Y+14
;	data -> Y+12
;	protocol -> Y+4
;	crc16 -> R16,R17
;	i -> R18,R19
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 0059 
; 0000 005A     protocol[0]=device_address;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 005B     protocol[1]=0x06;
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 005C     protocol[2]=((starting_address>>8)  & 0x00ff);
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 005D     protocol[3]=((starting_address)     & 0x00ff);
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 005E     protocol[4]=((data>>8)              & 0x00ff);
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 005F     protocol[5]=((data)                 & 0x00ff);
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 0060     protocol[6]=0;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 0061     protocol[7]=0;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 0062 
; 0000 0063     crc16 = CRC16(protocol, 6);
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 0064 
; 0000 0065     protocol[6] = (unsigned char)((crc16>>0) & 0x00ff);
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 0066     protocol[7] = (unsigned char)((crc16>>8) & 0x00ff);
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 0067 
; 0000 0068 
; 0000 0069     for(i=0;i<8;i++)
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 006A     {
; 0000 006B         putch_USART0(*(protocol+i));
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 006C     }
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 006D }
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;
;interrupt [USART0_RXC] void usart0_rxc(void)
; 0000 0070 {
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 0071     PACKET_BUFF[PACKET_BUFF_IDX] = UDR0;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 0072     PACKET_BUFF_IDX++;
;PCODE: $000000EA VOL: 0
; 0000 0073 }
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;
;void main(void)
; 0000 0076 {
;PCODE: $000000EE VOL: 0
; 0000 0077     unsigned char check_cnt = 0;
; 0000 0078     usart_init(bps_115200);
;	check_cnt -> R17
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 0079     SREG |= 0x80;
;PCODE: $000000F4 VOL: 0
; 0000 007A 
; 0000 007B     while(1)
;PCODE: $000000F5 VOL: 0
; 0000 007C     {
; 0000 007D         RTU_WriteOperate(0x01,0x0079,(int)(1000));
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 007E         delay_ms(100);
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 007F         puts_USART1(PACKET_BUFF);
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 0080         //RTU_WriteOperate(0x01,0x0078,(int)(1));
; 0000 0081         //delay_ms(300);
; 0000 0082     }
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 0083 }
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
