;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;#define bps_115200 0x0007
;
;#define POLYNORMIAL 0xA001
;
;unsigned char PACKET_BUFF[100] = {0,};
;unsigned char PACKET_BUFF_IDX = 0;
;// Byte cnt;
;// Byte key;
;// Byte *ptr = str_buf;
;
;void usart_init(int bps)
; 0000 000F {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0010     UCSR1A = 0x00;
;	bps -> Y+0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0011     UCSR1B = (1<<RXEN1)|(1<<TXEN1)|(1<<RXCIE1); // RXCIE1 bit is recevie interrupt allow
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0012     UCSR1C = (1<<UCSZ11)|(1<<UCSZ10);
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0013     UCSR1C &= ~(1<<UMSEL1);
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0014 
; 0000 0015     UBRR1H = (unsigned char)((bps>>8)  & 0x00ff);
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0016     UBRR1L = (unsigned char)(bps & 0x00ff);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0017 }
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;
;void putch_USART1(char data)
; 0000 001A {
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 001B     while(!(UCSR1A & (1<<UDRE1))); // UDRE flag is USART Data Register Empty
;	data -> Y+0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 001C     UDR1 = data;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 001D }
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;
;void puts_USART1(char *str)
; 0000 0020 {
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0021     PACKET_BUFF_IDX = 0;
;	*str -> Y+0
;PCODE: $00000031 VOL: 0
; 0000 0022 
; 0000 0023     while(*str !=0)
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0024     {
; 0000 0025         putch_USART1(*str);
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0026         str++;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0027     }
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0028 }
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;
;unsigned short CRC16(unsigned char *puchMsg, int usDataLen)
; 0000 002B {
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 002C     int i;
; 0000 002D     unsigned short crc, flag;
; 0000 002E     crc = 0xffff;
;PCODE: $00000045 VOL: 0
;	*puchMsg -> Y+8
;	usDataLen -> Y+6
;	i -> R16,R17
;	crc -> R18,R19
;	flag -> R20,R21
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 002F 
; 0000 0030     while(usDataLen--){
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0031         crc ^= *puchMsg++;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0032 
; 0000 0033         for (i=0; i<8; i++){
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0034             flag = crc & 0x0001;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0035             crc >>= 1;
;PCODE: $00000060 VOL: 0
; 0000 0036             if(flag) crc ^= POLYNORMIAL;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0037         }
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0038     }
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0039     return crc;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 003A 
; 0000 003B }
;PCODE: $00000072 VOL: 0
;
;int RTU_WriteOperate(char device_address,int starting_address,int data)
; 0000 003E {
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 003F     char protocol[8];
; 0000 0040     unsigned short crc16;
; 0000 0041     int i=0;
; 0000 0042     PACKET_BUFF_IDX = 0;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;	device_address -> Y+16
;	starting_address -> Y+14
;	data -> Y+12
;	protocol -> Y+4
;	crc16 -> R16,R17
;	i -> R18,R19
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0043 
; 0000 0044     protocol[0]=device_address;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0045     protocol[1]=0x06;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0046     protocol[2]=((starting_address>>8)  & 0x00ff);
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0047     protocol[3]=((starting_address)     & 0x00ff);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0048     protocol[4]=((data>>8)              & 0x00ff);
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 0049     protocol[5]=((data)                 & 0x00ff);
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 004A     protocol[6]=0;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 004B     protocol[7]=0;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 004C 
; 0000 004D     crc16 = CRC16(protocol, 6);
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 004E 
; 0000 004F     protocol[6] = (unsigned char)((crc16>>0) & 0x00ff);
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0050     protocol[7] = (unsigned char)((crc16>>8) & 0x00ff);
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 0051 
; 0000 0052 
; 0000 0053     for(i=0;i<8;i++)
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 0054     {
; 0000 0055         putch_USART1(*(protocol+i));
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 0056     }
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 0057 }
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;
;interrupt [USART1_RXC] void usart1_rxc(void)
; 0000 005A {
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 005B     PACKET_BUFF[PACKET_BUFF_IDX] = UDR1;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 005C     PACKET_BUFF_IDX++;
;PCODE: $000000B9 VOL: 0
; 0000 005D }
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;
;void main(void)
; 0000 0060 {
;PCODE: $000000BD VOL: 0
; 0000 0061     usart_init(bps_115200);
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 0062     SREG |= 0x80;
;PCODE: $000000C1 VOL: 0
; 0000 0063 
; 0000 0064     while(1)
;PCODE: $000000C2 VOL: 0
; 0000 0065     {
; 0000 0066         //delay_ms(500);
; 0000 0067         if(PACKET_BUFF_IDX != 0)
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 0068             puts_USART1(PACKET_BUFF);
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 0069         //RTU_WriteOperate(0x01,0x0079,(int)(0));
; 0000 006A     }
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 006B }
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
