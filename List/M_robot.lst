
AVRASM ver. 2.1.30  C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm Wed Jan 29 19:27:08 2020

C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1061): warning: Register r5 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1062): warning: Register r4 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1063): warning: Register r7 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1064): warning: Register r6 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1065): warning: Register r9 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1066): warning: Register r8 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1067): warning: Register r11 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega128
                 ;Program type             : Application
                 ;Clock frequency          : 14.745600 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : float, width, precision
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 1024 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : No
                 ;global 'const' stored in FLASH: Yes
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4351
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _TIMER2_OVERFLOW=R5
                 	.DEF _PACKET_BUFF_IDX=R4
                 	.DEF _TIMER0_OVERFLOW=R7
                 	.DEF _VELOCITY_BUFF_IDX=R6
                 	.DEF _SRF02_CONVERTING_FLAG=R9
                 	.DEF _SRF02_WAIT_FLAG=R8
                 	.DEF _CHECK_GETS=R11
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 00a6 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0237 	JMP  _timer2_comp
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0241 	JMP  _timer1_compb
00001c 940c 0000 	JMP  0x00
00001e 940c 023b 	JMP  _timer0_comp
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 01fe 	JMP  _usart0_rxc
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0219 	JMP  _usart1_rxc
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _0x7D:
000046 0000
000047 0000
000048 0000
000049 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00004a 0000
00004b 0000
00004c 0000
00004d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00004e 0000
00004f 0000
000050 e2e0
000051 e6e4      	.DB  0x0,0x0,0x0,0x0,0xE0,0xE2,0xE4,0xE6
000052 eae8
000053 eeec
000054 0000
000055 0000      	.DB  0xE8,0xEA,0xEC,0xEE,0x0,0x0,0x0,0x0
000056 0000
000057 0000
000058 0000
000059 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00005a 0000
00005b 0000
00005c 0000
00005d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00005e 0000
00005f 0000
000060 0000
000061 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000062 0000
000063 0000
000064 0000
000065 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000066 0000
000067 0000
000068 0000
000069 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00006a 0000
00006b 0000
00006c 0000
00006d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00006e 0000
00006f 0000
000070 0000
000071 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000072 0000
000073 0000
000074 0000
000075 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000076 0000
000077 0000
000078 0000
000079 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00007a 0000
00007b 0000
00007c 0000
00007d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00007e 0000
00007f 0000
000080 0000
000081 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000082 0000
000083 0000
000084 0000
000085 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000086 0000
000087 0000
000088 0000
000089 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00008a 0000
00008b 0000
00008c 0000
00008d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _0x8C:
00008e 0000
00008f 0000
000090 0000
000091 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _0x0:
000092 253c
000093 2c64
000094 6425
000095 003e      	.DB  0x3C,0x25,0x64,0x2C,0x25,0x64,0x3E,0x0
                 _0x2000000:
000096 4e2d
000097 4e41
C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1136): warning: .cseg .db misalignment - padding zero byte
000098 0000      	.DB  0x2D,0x4E,0x41,0x4E,0x0
                 _0x2080060:
C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1138): warning: .cseg .db misalignment - padding zero byte
000099 0001      	.DB  0x1
                 _0x2080000:
00009a 4e2d
00009b 4e41
00009c 4900
00009d 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1141): warning: .cseg .db misalignment - padding zero byte
00009e 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00009f 0008      	.DW  0x08
0000a0 0004      	.DW  0x04
0000a1 011c      	.DW  _0x8C*2
                 
0000a2 0001      	.DW  0x01
0000a3 0578      	.DW  __seed_G104
0000a4 0132      	.DW  _0x2080060*2
                 
                 _0xFFFFFFFF:
0000a5 0000      	.DW  0
                 
                 __RESET:
0000a6 94f8      	CLI
0000a7 27ee      	CLR  R30
0000a8 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0000a9 e0f1      	LDI  R31,1
0000aa bff5      	OUT  MCUCR,R31
0000ab bfe5      	OUT  MCUCR,R30
0000ac 93e0 006c 	STS  XMCRB,R30
                 
                 ;DISABLE WATCHDOG
0000ae e1f8      	LDI  R31,0x18
0000af bdf1      	OUT  WDTCR,R31
0000b0 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
0000b1 e08d      	LDI  R24,(14-2)+1
0000b2 e0a2      	LDI  R26,2
0000b3 27bb      	CLR  R27
                 __CLEAR_REG:
0000b4 93ed      	ST   X+,R30
0000b5 958a      	DEC  R24
0000b6 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000b7 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000b8 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000b9 e0a0      	LDI  R26,LOW(__SRAM_START)
0000ba e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
0000bb 93ed      	ST   X+,R30
0000bc 9701      	SBIW R24,1
0000bd f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000be e3ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000bf e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000c0 9185      	LPM  R24,Z+
0000c1 9195      	LPM  R25,Z+
0000c2 9700      	SBIW R24,0
0000c3 f061      	BREQ __GLOBAL_INI_END
0000c4 91a5      	LPM  R26,Z+
0000c5 91b5      	LPM  R27,Z+
0000c6 9005      	LPM  R0,Z+
0000c7 9015      	LPM  R1,Z+
0000c8 01bf      	MOVW R22,R30
0000c9 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000ca 9005      	LPM  R0,Z+
0000cb 920d      	ST   X+,R0
0000cc 9701      	SBIW R24,1
0000cd f7e1      	BRNE __GLOBAL_INI_LOOP
0000ce 01fb      	MOVW R30,R22
0000cf cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
0000d0 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000d1 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000d2 bfed      	OUT  SPL,R30
0000d3 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000d4 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000d5 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000d6 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000d7 940c 0246 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdio.h>
                 ;#include <delay.h>
                 ;
                 ;#define bps_115200 0x0007
                 ;
                 ;#define POLYNORMIAL 0xA001
                 ;
                 ;#define CHARACTER3_5 60 // 0.03msec
                 ;#define TRUE 0
                 ;#define FALSE 1
                 ;
                 ;#define R 0x01
                 ;#define L 0x02
                 ;#define START 1
                 ;#define STOP 2
                 ;
                 ;#define Length 0.29
                 ;#define Gearratio 25
                 ;
                 ;//////////US/////////////////
                 ;#define Inches 0x50
                 ;#define Centimeters 0x51
                 ;#define microSec 0x52
                 ;
                 ;#define tau 0.1 //LOWPASS_FILTER
                 ;#define ts 0.7//SAMPLING CYCLE
                 ;
                 ;#define CommandReg 0
                 ;#define Unused 1
                 ;#define RangeHighByte 2
                 ;#define RangeLowByte 3
                 ;
                 ;#define TWI_START 0x08
                 ;#define MT_REPEATED_START 0x10
                 ;#define MT_SLAW_ACK 0x18
                 ;#define MT_DATA_ACK 0x28
                 ;#define MT_SLAR_ACK 0x40
                 ;#define MT_DATA_NACK 0x58
                 ;
                 ;//////////////////////integer////////////////
                 ;unsigned char TIMER2_OVERFLOW = 0;
                 ;unsigned char PACKET_BUFF[100] = {0,};
                 ;unsigned char PACKET_BUFF_IDX = 0;
                 ;
                 ;unsigned char TIMER0_OVERFLOW = 0;
                 ;unsigned char VELOCITY_BUFF[20] = {0,};
                 ;unsigned char VELOCITY_BUFF_IDX = 0;
                 ;
                 ;///////////////FLAG//////////////////////
                 ;unsigned char SRF02_CONVERTING_FLAG = 0;
                 ;unsigned char SRF02_WAIT_FLAG = 0;
                 ;unsigned char CHECK_GETS = 0;
                 ;
                 ;////////////////init function/////////////
                 ;void usart1_init(int bps)
                 ; 0000 0039 {
                 
                 	.CSEG
                 _usart1_init:
                 ; 0000 003A     UCSR1A = 0x00;
                 ;	bps -> Y+0
0000d9 e0e0      	LDI  R30,LOW(0)
0000da 93e0 009b 	STS  155,R30
                 ; 0000 003B     UCSR1B = (1<<RXEN1)|(1<<TXEN1)|(1<<RXCIE1); // RXCIE1 bit is recevie interrupt allow
0000dc e9e8      	LDI  R30,LOW(152)
0000dd 93e0 009a 	STS  154,R30
                 ; 0000 003C     UCSR1C = (1<<UCSZ11)|(1<<UCSZ10);
0000df e0e6      	LDI  R30,LOW(6)
0000e0 93e0 009d 	STS  157,R30
                 ; 0000 003D     UCSR1C &= ~(1<<UMSEL1);
0000e2 91e0 009d 	LDS  R30,157
0000e4 7bef      	ANDI R30,0xBF
0000e5 93e0 009d 	STS  157,R30
                 ; 0000 003E 
                 ; 0000 003F     UBRR1H = (unsigned char)((bps>>8)  & 0x00ff);
0000e7 81e8      	LD   R30,Y
0000e8 81f9      	LDD  R31,Y+1
0000e9 940e 06bb 	CALL __ASRW8
0000eb 93e0 0098 	STS  152,R30
                 ; 0000 0040     UBRR1L = (unsigned char)(bps & 0x00ff);
0000ed 81e8      	LD   R30,Y
0000ee 93e0 0099 	STS  153,R30
                 ; 0000 0041 }
0000f0 c014      	RJMP _0x20A0004
                 ;
                 ;void usart0_init(int bps)
                 ; 0000 0044 {
                 _usart0_init:
                 ; 0000 0045     UCSR0A = 0x00;
                 ;	bps -> Y+0
0000f1 e0e0      	LDI  R30,LOW(0)
0000f2 b9eb      	OUT  0xB,R30
                 ; 0000 0046     UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0); // RXCIE1 bit is recevie interrupt allow
0000f3 e9e8      	LDI  R30,LOW(152)
0000f4 b9ea      	OUT  0xA,R30
                 ; 0000 0047     UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
0000f5 e0e6      	LDI  R30,LOW(6)
0000f6 93e0 0095 	STS  149,R30
                 ; 0000 0048     UCSR0C &= ~(1<<UMSEL0);
0000f8 91e0 0095 	LDS  R30,149
0000fa 7bef      	ANDI R30,0xBF
0000fb 93e0 0095 	STS  149,R30
                 ; 0000 0049 
                 ; 0000 004A     UBRR0H = (unsigned char)((bps>>8)  & 0x00ff);
0000fd 81e8      	LD   R30,Y
0000fe 81f9      	LDD  R31,Y+1
0000ff 940e 06bb 	CALL __ASRW8
000101 93e0 0090 	STS  144,R30
                 ; 0000 004B     UBRR0L = (unsigned char)(bps & 0x00ff);
000103 81e8      	LD   R30,Y
000104 b9e9      	OUT  0x9,R30
                 ; 0000 004C }
                 _0x20A0004:
000105 9622      	ADIW R28,2
000106 9508      	RET
                 ;
                 ;void timer0_init(void)
                 ; 0000 004F {
                 ; 0000 0050     TCCR0 = (1<<WGM01)|(1<<CS02)|(1<<CS01)|(1<<CS00); // CTC모드, 1024분주
                 ; 0000 0051     OCR0 = 40;
                 ; 0000 0052     TIMSK = (1<<OCIE2)|(1<<OCIE0);
                 ; 0000 0053 }
                 ;
                 ;void timer1_init(void)
                 ; 0000 0056 {
                 ; 0000 0057     // TCCR1A = (1<<COM1B0);
                 ; 0000 0058     TCCR1B = (1<<WGM13)|(1<<WGM12)|(1<<CS12)|(1<<CS10);; // WGM bit setting
                 ; 0000 0059 
                 ; 0000 005A     OCR1B = 1008;
                 ; 0000 005B     ICR1 = 1200;//1200; //664
                 ; 0000 005C     TIMSK |= (1<<OCIE1B);
                 ; 0000 005D }
                 ;
                 ;void timer2_init(void)
                 ; 0000 0060 {
                 _timer2_init:
                 ; 0000 0061     //TIMER2
                 ; 0000 0062     TCCR2 = (1<<WGM21)|(1<<CS21)|(1<<CS20);// CTC모드, 1분주
000107 e0eb      	LDI  R30,LOW(11)
000108 bde5      	OUT  0x25,R30
                 ; 0000 0063 
                 ; 0000 0064     OCR2 = 100;
000109 e6e4      	LDI  R30,LOW(100)
00010a bde3      	OUT  0x23,R30
                 ; 0000 0065     TIMSK = (1<<OCIE2)|(1<<OCIE0);
00010b e8e2      	LDI  R30,LOW(130)
00010c bfe7      	OUT  0x37,R30
                 ; 0000 0066     //TIMSK = (1<<OCIE2);
                 ; 0000 0067 }
00010d 9508      	RET
                 ;
                 ;void TWI_Init(){
                 ; 0000 0069 void TWI_Init(){
                 ; 0000 006A     TWBR = 10;
                 ; 0000 006B     TWSR = 0;
                 ; 0000 006C     TWCR = 0;
                 ; 0000 006D }
                 ;
                 ;
                 ;////////////////////USART RTX/////////////////////////////////
                 ;void putch_USART1(char data)
                 ; 0000 0072 {
                 ; 0000 0073     while(!(UCSR1A & (1<<UDRE1))); // UDRE flag is USART Data Register Empty
                 ;	data -> Y+0
                 ; 0000 0074     UDR1 = data;
                 ; 0000 0075 }
                 ;
                 ;//USART 문자열 송신
                 ;void puts_USART1(char *str,char IDX)
                 ; 0000 0079 {
                 ; 0000 007A     unsigned char i = 0;
                 ; 0000 007B 
                 ; 0000 007C     for(i = 0;i<IDX;i++)
                 ;	*str -> Y+2
                 ;	IDX -> Y+1
                 ;	i -> R17
                 ; 0000 007D     {
                 ; 0000 007E         putch_USART1(*(str+i));
                 ; 0000 007F     }
                 ; 0000 0080 
                 ; 0000 0081     for(i = 0; i<IDX; i++)
                 ; 0000 0082     {
                 ; 0000 0083         *(str+i) = 0;
                 ; 0000 0084     }
                 ; 0000 0085 }
                 ;
                 ;// void puts_USART1(char *str,char IDX)
                 ;// {
                 ;//     unsigned char i = 0;
                 ;
                 ;//     while(*str != 0)
                 ;//     {
                 ;//         putch_USART1(*(str+i));
                 ;//         i++;
                 ;//     }
                 ;
                 ;//     for(i = 0; i<IDX; i++)
                 ;//     {
                 ;//         *(str+i) = 0;
                 ;//     }
                 ;// }
                 ;
                 ;/////////////////////////////////////MOTOR///////////////////////////////////////
                 ;void puts_Modbus1(char *str,char IDX)
                 ; 0000 0099 {
                 ; 0000 009A     unsigned char i = 0;
                 ; 0000 009B     UCSR0B &= ~(1<<RXEN0);
                 ;	*str -> Y+2
                 ;	IDX -> Y+1
                 ;	i -> R17
                 ; 0000 009C     if(TIMER2_OVERFLOW>0)
                 ; 0000 009D     {
                 ; 0000 009E         for(i = 0;i<IDX-1;i++) putch_USART1(*(str+i));
                 ; 0000 00A0 for(i = 0; i<IDX; i++) *(str+i) = 0;
                 ; 0000 00A1 }
                 ; 0000 00A2     UCSR0B |= (1<<RXEN0);
                 ; 0000 00A3 }
                 ;
                 ;void putch_USART0(char data)
                 ; 0000 00A6 {
                 _putch_USART0:
                 ; 0000 00A7     while(!(UCSR0A & (1<<UDRE0))); // UDRE flag is USART Data Register Empty
                 ;	data -> Y+0
                 _0x13:
00010e 9b5d      	SBIS 0xB,5
00010f cffe      	RJMP _0x13
                 ; 0000 00A8     UDR0 = data;
000110 81e8      	LD   R30,Y
000111 b9ec      	OUT  0xC,R30
                 ; 0000 00A9 }
000112 9621      	ADIW R28,1
000113 9508      	RET
                 ;
                 ;void puts_USART0(char *str,char IDX)
                 ; 0000 00AC {
                 ; 0000 00AD     //PACKET_BUFF[PACKET_BUFF_IDX] = 0;
                 ; 0000 00AE     unsigned char i = 0;
                 ; 0000 00AF     for(i = 0;i<IDX-1;i++)
                 ;	*str -> Y+2
                 ;	IDX -> Y+1
                 ;	i -> R17
                 ; 0000 00B0     {
                 ; 0000 00B1         putch_USART1(*(str+i));
                 ; 0000 00B2     }
                 ; 0000 00B3 
                 ; 0000 00B4     for(i = 0; i<IDX; i++)
                 ; 0000 00B5     {
                 ; 0000 00B6         *(str+i) = 0;
                 ; 0000 00B7     }
                 ; 0000 00B8 }
                 ;
                 ;///////////////////////Modbus///////////////////////////////////////
                 ;unsigned short CRC16(unsigned char *puchMsg, int usDataLen)
                 ; 0000 00BC {
                 _CRC16:
                 ; 0000 00BD     int i;
                 ; 0000 00BE     unsigned short crc, flag;
                 ; 0000 00BF     crc = 0xffff;
000114 940e 06fa 	CALL __SAVELOCR6
                 ;	*puchMsg -> Y+8
                 ;	usDataLen -> Y+6
                 ;	i -> R16,R17
                 ;	crc -> R18,R19
                 ;	flag -> R20,R21
                +
000116 ef2f     +LDI R18 , LOW ( - 1 )
000117 ef3f     +LDI R19 , HIGH ( - 1 )
                 	__GETWRN 18,19,-1
                 ; 0000 00C0 
                 ; 0000 00C1     while(usDataLen--){
                 _0x1C:
000118 81ee      	LDD  R30,Y+6
000119 81ff      	LDD  R31,Y+6+1
00011a 9731      	SBIW R30,1
00011b 83ee      	STD  Y+6,R30
00011c 83ff      	STD  Y+6+1,R31
00011d 9631      	ADIW R30,1
00011e f0f9      	BREQ _0x1E
                 ; 0000 00C2         crc ^= *puchMsg++;
00011f 85a8      	LDD  R26,Y+8
000120 85b9      	LDD  R27,Y+8+1
000121 91ed      	LD   R30,X+
000122 87a8      	STD  Y+8,R26
000123 87b9      	STD  Y+8+1,R27
000124 e0f0      	LDI  R31,0
                +
000125 272e     +EOR R18 , R30
000126 273f     +EOR R19 , R31
                 	__EORWRR 18,19,30,31
                 ; 0000 00C3 
                 ; 0000 00C4         for (i=0; i<8; i++){
                +
000127 e000     +LDI R16 , LOW ( 0 )
000128 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x20:
                +
000129 3008     +CPI R16 , LOW ( 8 )
00012a e0e0     +LDI R30 , HIGH ( 8 )
00012b 071e     +CPC R17 , R30
                 	__CPWRN 16,17,8
00012c f484      	BRGE _0x21
                 ; 0000 00C5             flag = crc & 0x0001;
00012d 01f9      	MOVW R30,R18
00012e 70e1      	ANDI R30,LOW(0x1)
00012f 70f0      	ANDI R31,HIGH(0x1)
000130 01af      	MOVW R20,R30
                 ; 0000 00C6             crc >>= 1;
000131 9536      	LSR  R19
000132 9527      	ROR  R18
                 ; 0000 00C7             if(flag) crc ^= POLYNORMIAL;
000133 2e04      	MOV  R0,R20
000134 2a05      	OR   R0,R21
000135 f021      	BREQ _0x22
000136 e0e1      	LDI  R30,LOW(40961)
000137 eaf0      	LDI  R31,HIGH(40961)
                +
000138 272e     +EOR R18 , R30
000139 273f     +EOR R19 , R31
                 	__EORWRR 18,19,30,31
                 ; 0000 00C8         }
                 _0x22:
                +
00013a 5f0f     +SUBI R16 , LOW ( - 1 )
00013b 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00013c cfec      	RJMP _0x20
                 _0x21:
                 ; 0000 00C9     }
00013d cfda      	RJMP _0x1C
                 _0x1E:
                 ; 0000 00CA     return crc;
00013e 01f9      	MOVW R30,R18
00013f 940e 0701 	CALL __LOADLOCR6
000141 962a      	ADIW R28,10
000142 9508      	RET
                 ; 0000 00CB }
                 ;
                 ;int RTU_WriteOperate0(char device_address,int starting_address,int data)
                 ; 0000 00CE {
                 _RTU_WriteOperate0:
                 ; 0000 00CF     char protocol[8];
                 ; 0000 00D0     unsigned short crc16;
                 ; 0000 00D1     int i=0;
                 ; 0000 00D2     //PACKET_BUFF_IDX = 0;
                 ; 0000 00D3 
                 ; 0000 00D4     protocol[0]=device_address;
000143 9728      	SBIW R28,8
000144 940e 06fc 	CALL __SAVELOCR4
                 ;	device_address -> Y+16
                 ;	starting_address -> Y+14
                 ;	data -> Y+12
                 ;	protocol -> Y+4
                 ;	crc16 -> R16,R17
                 ;	i -> R18,R19
                +
000146 e020     +LDI R18 , LOW ( 0 )
000147 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
000148 89e8      	LDD  R30,Y+16
000149 83ec      	STD  Y+4,R30
                 ; 0000 00D5     protocol[1]=0x06;
00014a e0e6      	LDI  R30,LOW(6)
00014b 83ed      	STD  Y+5,R30
                 ; 0000 00D6     protocol[2]=((starting_address>>8)  & 0x00ff);
00014c 85ee      	LDD  R30,Y+14
00014d 85ff      	LDD  R31,Y+14+1
00014e 940e 06bb 	CALL __ASRW8
000150 83ee      	STD  Y+6,R30
                 ; 0000 00D7     protocol[3]=((starting_address)     & 0x00ff);
000151 85ee      	LDD  R30,Y+14
000152 83ef      	STD  Y+7,R30
                 ; 0000 00D8     protocol[4]=((data>>8)              & 0x00ff);
000153 85ec      	LDD  R30,Y+12
000154 85fd      	LDD  R31,Y+12+1
000155 940e 06bb 	CALL __ASRW8
000157 87e8      	STD  Y+8,R30
                 ; 0000 00D9     protocol[5]=((data)                 & 0x00ff);
000158 85ec      	LDD  R30,Y+12
000159 87e9      	STD  Y+9,R30
                 ; 0000 00DA     protocol[6]=0;
00015a e0e0      	LDI  R30,LOW(0)
00015b 87ea      	STD  Y+10,R30
                 ; 0000 00DB     protocol[7]=0;
00015c 87eb      	STD  Y+11,R30
                 ; 0000 00DC 
                 ; 0000 00DD     crc16 = CRC16(protocol, 6);
00015d 01fe      	MOVW R30,R28
00015e 9634      	ADIW R30,4
00015f 93fa      	ST   -Y,R31
000160 93ea      	ST   -Y,R30
000161 e0e6      	LDI  R30,LOW(6)
000162 e0f0      	LDI  R31,HIGH(6)
000163 93fa      	ST   -Y,R31
000164 93ea      	ST   -Y,R30
000165 dfae      	RCALL _CRC16
000166 018f      	MOVW R16,R30
                 ; 0000 00DE 
                 ; 0000 00DF     protocol[6] = (unsigned char)((crc16>>0) & 0x00ff);
000167 01f8      	MOVW R30,R16
000168 87ea      	STD  Y+10,R30
                 ; 0000 00E0     protocol[7] = (unsigned char)((crc16>>8) & 0x00ff);
                +
000169 871b     +STD Y + 11 , R17
                 	__PUTBSR 17,11
                 ; 0000 00E1 
                 ; 0000 00E2 
                 ; 0000 00E3     for(i=0;i<8;i++)
                +
00016a e020     +LDI R18 , LOW ( 0 )
00016b e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x24:
                +
00016c 3028     +CPI R18 , LOW ( 8 )
00016d e0e0     +LDI R30 , HIGH ( 8 )
00016e 073e     +CPC R19 , R30
                 	__CPWRN 18,19,8
00016f f454      	BRGE _0x25
                 ; 0000 00E4     {
                 ; 0000 00E5         putch_USART0(*(protocol+i));
000170 01de      	MOVW R26,R28
000171 9614      	ADIW R26,4
000172 0fa2      	ADD  R26,R18
000173 1fb3      	ADC  R27,R19
000174 91ec      	LD   R30,X
000175 93ea      	ST   -Y,R30
000176 df97      	RCALL _putch_USART0
                 ; 0000 00E6     }
                +
000177 5f2f     +SUBI R18 , LOW ( - 1 )
000178 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000179 cff2      	RJMP _0x24
                 _0x25:
                 ; 0000 00E7 }
00017a 940e 0703 	CALL __LOADLOCR4
00017c 9661      	ADIW R28,17
00017d 9508      	RET
                 ;
                 ;int RTU_WriteOperate1(char device_address,int starting_address,int data)
                 ; 0000 00EA {
                 ; 0000 00EB     char protocol[8];
                 ; 0000 00EC     unsigned short crc16;
                 ; 0000 00ED     int i=0;
                 ; 0000 00EE    // PACKET_BUFF_IDX = 0;
                 ; 0000 00EF 
                 ; 0000 00F0     protocol[0]=device_address;
                 ;	device_address -> Y+16
                 ;	starting_address -> Y+14
                 ;	data -> Y+12
                 ;	protocol -> Y+4
                 ;	crc16 -> R16,R17
                 ;	i -> R18,R19
                 ; 0000 00F1     protocol[1]=0x06;
                 ; 0000 00F2     protocol[2]=((starting_address>>8)  & 0x00ff);
                 ; 0000 00F3     protocol[3]=((starting_address)     & 0x00ff);
                 ; 0000 00F4     protocol[4]=((data>>8)              & 0x00ff);
                 ; 0000 00F5     protocol[5]=((data)                 & 0x00ff);
                 ; 0000 00F6     protocol[6]=0;
                 ; 0000 00F7     protocol[7]=0;
                 ; 0000 00F8 
                 ; 0000 00F9     crc16 = CRC16(protocol, 6);
                 ; 0000 00FA 
                 ; 0000 00FB     protocol[6] = (unsigned char)((crc16>>0) & 0x00ff);
                 ; 0000 00FC     protocol[7] = (unsigned char)((crc16>>8) & 0x00ff);
                 ; 0000 00FD 
                 ; 0000 00FE 
                 ; 0000 00FF     for(i=0;i<8;i++)
                 ; 0000 0100     {
                 ; 0000 0101         putch_USART1(*(protocol+i));
                 ; 0000 0102     }
                 ; 0000 0103 }
                 ;
                 ;int RTU_ReedOperate0(char device_address,int starting_address,int data)
                 ; 0000 0106 {
                 ; 0000 0107     char protocol[8];
                 ; 0000 0108     unsigned short crc16;
                 ; 0000 0109     int i=0;
                 ; 0000 010A     //PACKET_BUFF_IDX = 0;
                 ; 0000 010B 
                 ; 0000 010C     protocol[0]=device_address;
                 ;	device_address -> Y+16
                 ;	starting_address -> Y+14
                 ;	data -> Y+12
                 ;	protocol -> Y+4
                 ;	crc16 -> R16,R17
                 ;	i -> R18,R19
                 ; 0000 010D     protocol[1]=0x03;
                 ; 0000 010E     protocol[2]=((starting_address>>8)  & 0x00ff);
                 ; 0000 010F     protocol[3]=((starting_address)     & 0x00ff);
                 ; 0000 0110     protocol[4]=((data>>8)              & 0x00ff);
                 ; 0000 0111     protocol[5]=((data)                 & 0x00ff);
                 ; 0000 0112     protocol[6]=0;
                 ; 0000 0113     protocol[7]=0;
                 ; 0000 0114 
                 ; 0000 0115     crc16 = CRC16(protocol, 6);
                 ; 0000 0116 
                 ; 0000 0117     protocol[6] = (unsigned char)((crc16>>0) & 0x00ff);
                 ; 0000 0118     protocol[7] = (unsigned char)((crc16>>8) & 0x00ff);
                 ; 0000 0119 
                 ; 0000 011A 
                 ; 0000 011B     for(i=0;i<8;i++)
                 ; 0000 011C     {
                 ; 0000 011D         putch_USART0(*(protocol+i));
                 ; 0000 011E     }
                 ; 0000 011F }
                 ;
                 ;void Make_MSPEED(float* _velocity, float* _angularV, int* R_RPM, int* L_RPM)
                 ; 0000 0122 {
                 _Make_MSPEED:
                 ; 0000 0123     float VelocityR = 0;
                 ; 0000 0124     float VelocityL = 0;
                 ; 0000 0125 
                 ; 0000 0126     if(*_velocity>=0){
00017e 9728      	SBIW R28,8
00017f e0e0      	LDI  R30,LOW(0)
000180 83e8      	ST   Y,R30
000181 83e9      	STD  Y+1,R30
000182 83ea      	STD  Y+2,R30
000183 83eb      	STD  Y+3,R30
000184 83ec      	STD  Y+4,R30
000185 83ed      	STD  Y+5,R30
000186 83ee      	STD  Y+6,R30
000187 83ef      	STD  Y+7,R30
                 ;	*_velocity -> Y+14
                 ;	*_angularV -> Y+12
                 ;	*R_RPM -> Y+10
                 ;	*L_RPM -> Y+8
                 ;	VelocityR -> Y+4
                 ;	VelocityL -> Y+0
000188 940e 0498 	CALL SUBOPT_0x0
00018a 2377      	TST  R23
00018b f042      	BRMI _0x2C
                 ; 0000 0127         *_angularV = -(*_angularV);
00018c 940e 049d 	CALL SUBOPT_0x1
00018e 940e 0522 	CALL __ANEGF1
000190 85ac      	LDD  R26,Y+12
000191 85bd      	LDD  R27,Y+12+1
000192 940e 06d7 	CALL __PUTDP1
                 ; 0000 0128     }
                 ; 0000 0129 
                 ; 0000 012A     VelocityR = *_velocity+(*_angularV*Length)/4;
                 _0x2C:
000194 940e 0498 	CALL SUBOPT_0x0
000196 937f      	PUSH R23
000197 936f      	PUSH R22
000198 93ff      	PUSH R31
000199 93ef      	PUSH R30
00019a 940e 049d 	CALL SUBOPT_0x1
00019c 940e 04a2 	CALL SUBOPT_0x2
00019e 91af      	POP  R26
00019f 91bf      	POP  R27
0001a0 918f      	POP  R24
0001a1 919f      	POP  R25
0001a2 940e 05c8 	CALL __ADDF12
                +
0001a4 83ec     +STD Y + 4 , R30
0001a5 83fd     +STD Y + 4 + 1 , R31
0001a6 836e     +STD Y + 4 + 2 , R22
0001a7 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
                 ; 0000 012B     VelocityL = *_velocity-(*_angularV*Length)/4;
0001a8 940e 0498 	CALL SUBOPT_0x0
0001aa 937f      	PUSH R23
0001ab 936f      	PUSH R22
0001ac 93ff      	PUSH R31
0001ad 93ef      	PUSH R30
0001ae 940e 049d 	CALL SUBOPT_0x1
0001b0 940e 04a2 	CALL SUBOPT_0x2
0001b2 91af      	POP  R26
0001b3 91bf      	POP  R27
0001b4 918f      	POP  R24
0001b5 919f      	POP  R25
0001b6 940e 06ed 	CALL __SWAPD12
0001b8 940e 05c1 	CALL __SUBF12
0001ba 940e 06e1 	CALL __PUTD1S0
                 ; 0000 012C 
                 ; 0000 012D     *R_RPM = (int)(152.788*VelocityR*Gearratio);
                +
0001bc 81ec     +LDD R30 , Y + 4
0001bd 81fd     +LDD R31 , Y + 4 + 1
0001be 816e     +LDD R22 , Y + 4 + 2
0001bf 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
0001c0 940e 04b1 	CALL SUBOPT_0x3
0001c2 85aa      	LDD  R26,Y+10
0001c3 85bb      	LDD  R27,Y+10+1
0001c4 93ed      	ST   X+,R30
0001c5 93fc      	ST   X,R31
                 ; 0000 012E     *L_RPM = (int)(152.788*VelocityL*Gearratio);
0001c6 940e 06dc 	CALL __GETD1S0
0001c8 940e 04b1 	CALL SUBOPT_0x3
0001ca 85a8      	LDD  R26,Y+8
0001cb 85b9      	LDD  R27,Y+8+1
0001cc 93ed      	ST   X+,R30
0001cd 93fc      	ST   X,R31
                 ; 0000 012F 
                 ; 0000 0130     if( ((*R_RPM<300)&&(*R_RPM>-300))&&((*L_RPM<300)&&(*L_RPM>-300))){
0001ce 85aa      	LDD  R26,Y+10
0001cf 85bb      	LDD  R27,Y+10+1
0001d0 940e 06cd 	CALL __GETW1P
0001d2 32ec      	CPI  R30,LOW(0x12C)
0001d3 e0a1      	LDI  R26,HIGH(0x12C)
0001d4 07fa      	CPC  R31,R26
0001d5 f434      	BRGE _0x2E
0001d6 01df      	MOVW R26,R30
0001d7 ede4      	LDI  R30,LOW(65236)
0001d8 effe      	LDI  R31,HIGH(65236)
0001d9 17ea      	CP   R30,R26
0001da 07fb      	CPC  R31,R27
0001db f00c      	BRLT _0x2F
                 _0x2E:
0001dc c014      	RJMP _0x30
                 _0x2F:
0001dd 85a8      	LDD  R26,Y+8
0001de 85b9      	LDD  R27,Y+8+1
0001df 940e 06cd 	CALL __GETW1P
0001e1 32ec      	CPI  R30,LOW(0x12C)
0001e2 e0a1      	LDI  R26,HIGH(0x12C)
0001e3 07fa      	CPC  R31,R26
0001e4 f454      	BRGE _0x31
0001e5 85a8      	LDD  R26,Y+8
0001e6 85b9      	LDD  R27,Y+8+1
0001e7 940e 06cd 	CALL __GETW1P
0001e9 01df      	MOVW R26,R30
0001ea ede4      	LDI  R30,LOW(65236)
0001eb effe      	LDI  R31,HIGH(65236)
0001ec 17ea      	CP   R30,R26
0001ed 07fb      	CPC  R31,R27
0001ee f00c      	BRLT _0x32
                 _0x31:
0001ef c001      	RJMP _0x30
                 _0x32:
0001f0 c001      	RJMP _0x33
                 _0x30:
0001f1 c00a      	RJMP _0x2D
                 _0x33:
                 ; 0000 0131         *R_RPM = 0;
0001f2 85aa      	LDD  R26,Y+10
0001f3 85bb      	LDD  R27,Y+10+1
0001f4 e0e0      	LDI  R30,LOW(0)
0001f5 e0f0      	LDI  R31,HIGH(0)
0001f6 93ed      	ST   X+,R30
0001f7 93fc      	ST   X,R31
                 ; 0000 0132         *L_RPM = 0;
0001f8 85a8      	LDD  R26,Y+8
0001f9 85b9      	LDD  R27,Y+8+1
0001fa 93ed      	ST   X+,R30
0001fb 93fc      	ST   X,R31
                 ; 0000 0133     }
                 ; 0000 0134 }
                 _0x2D:
0001fc 9660      	ADIW R28,16
0001fd 9508      	RET
                 ;void oper_Disapath(int velocityR, int velocityL, int p_velocity_R, int p_velocity_L)
                 ; 0000 0136 {
                 ; 0000 0137     if((p_velocity_R==0) && (velocityR != 0))
                 ;	velocityR -> Y+6
                 ;	velocityL -> Y+4
                 ;	p_velocity_R -> Y+2
                 ;	p_velocity_L -> Y+0
                 ; 0000 0138     {
                 ; 0000 0139         RTU_WriteOperate0(R,(unsigned int)120,START);
                 ; 0000 013A         delay_ms(5);
                 ; 0000 013B     }
                 ; 0000 013C     else if((p_velocity_R!=0) && (velocityR == 0))
                 ; 0000 013D     {
                 ; 0000 013E         RTU_WriteOperate0(R,(unsigned int)120,STOP);
                 ; 0000 013F         delay_ms(5);
                 ; 0000 0140     }
                 ; 0000 0141     if((p_velocity_L==0) && (velocityL != 0))
                 ; 0000 0142     {
                 ; 0000 0143         RTU_WriteOperate0(L,(unsigned int)120,START);
                 ; 0000 0144         delay_ms(5);
                 ; 0000 0145     }
                 ; 0000 0146     else if((p_velocity_L!=0) && (velocityL == 0))
                 ; 0000 0147     {
                 ; 0000 0148         RTU_WriteOperate0(L,(unsigned int)120,STOP);
                 ; 0000 0149         delay_ms(5);
                 ; 0000 014A     }
                 ; 0000 014B }
                 ;
                 ;////////////////////////////////////TWI_Ultra_Sonic//////////////////////////////////////////////////
                 ;
                 ;unsigned char TWI_Read(unsigned char addr, unsigned char regAddr)
                 ; 0000 0150 {
                 ; 0000 0151     unsigned char Data;
                 ; 0000 0152     TWCR = ((1<<TWINT)|(1<<TWEN)|(1<<TWSTA));//Start조건 전송
                 ;	addr -> Y+2
                 ;	regAddr -> Y+1
                 ;	Data -> R17
                 ; 0000 0153     while(((TWCR & (1 << TWINT)) == 0x00) || ((TWSR & 0xf8)!=TWI_START));
                 ; 0000 0154 
                 ; 0000 0155     TWDR = addr&(~0x01);                //쓰기 위한 주소 전송
                 ; 0000 0156     TWCR = ((1<<TWINT)|(1<<TWEN));
                 ; 0000 0157     while(((TWCR & (1 << TWINT)) == 0x00) || ((TWSR & 0xf8)!=MT_SLAW_ACK));
                 ; 0000 0158 
                 ; 0000 0159     TWDR = regAddr;                     //Reg주소 전송
                 ; 0000 015A     TWCR = ((1<<TWINT)|(1<<TWEN));
                 ; 0000 015B     while(((TWCR & (1 << TWINT)) == 0x00) || ((TWSR & 0xf8)!=MT_DATA_ACK));
                 ; 0000 015C 
                 ; 0000 015D     TWCR = ((1<<TWINT)|(1<<TWEN)|(1<<TWSTA)); //Repeated start 전송
                 ; 0000 015E     while(((TWCR & (1 << TWINT)) == 0x00) || ((TWSR & 0xf8)!=MT_REPEATED_START));
                 ; 0000 015F 
                 ; 0000 0160     TWDR = addr|0x01;                       //읽기 위한 주소 전송
                 ; 0000 0161     TWCR = ((1<<TWINT)|(1<<TWEN));
                 ; 0000 0162     while(((TWCR & (1 << TWINT)) == 0x00) || ((TWSR & 0xf8)!=MT_SLAR_ACK));
                 ; 0000 0163 
                 ; 0000 0164 
                 ; 0000 0165     TWCR = ((1<<TWINT)|(1<<TWEN));
                 ; 0000 0166     while(((TWCR & (1 << TWINT)) == 0x00) || ((TWSR & 0xf8)!=MT_DATA_NACK));
                 ; 0000 0167     Data = TWDR;                        //Data읽기
                 ; 0000 0168 
                 ; 0000 0169     TWCR = ((1<<TWINT)|(1<<TWEN)|(1<<TWSTO));
                 ; 0000 016A 
                 ; 0000 016B     return Data;
                 ; 0000 016C }
                 ;
                 ;void TWI_Write(unsigned char addr, unsigned char Data[],int NumberOfData)
                 ; 0000 016F {
                 ; 0000 0170     int i=0;
                 ; 0000 0171 
                 ; 0000 0172     TWCR = ((1<<TWINT)|(1<<TWEN)|(1<<TWSTA));
                 ;	addr -> Y+6
                 ;	Data -> Y+4
                 ;	NumberOfData -> Y+2
                 ;	i -> R16,R17
                 ; 0000 0173     while(((TWCR & (1 << TWINT)) == 0x00) || ((TWSR & 0xf8)!=TWI_START));
                 ; 0000 0174 
                 ; 0000 0175     TWDR = addr&(~0x01);
                 ; 0000 0176     TWCR = ((1<<TWINT)|(1<<TWEN));
                 ; 0000 0177     while(((TWCR & (1 << TWINT)) == 0x00) || ((TWSR & 0xf8)!=MT_SLAW_ACK));
                 ; 0000 0178 
                 ; 0000 0179     for(i=0;i<NumberOfData;i++){
                 ; 0000 017A         TWDR = Data[i];
                 ; 0000 017B         TWCR = ((1<<TWINT)|(1<<TWEN));
                 ; 0000 017C         while(((TWCR & (1 << TWINT)) == 0x00) || ((TWSR & 0xf8)!=MT_DATA_ACK));
                 ; 0000 017D     }
                 ; 0000 017E 
                 ; 0000 017F     TWCR = ((1<<TWINT)|(1<<TWEN)|(1<<TWSTO));
                 ; 0000 0180 }
                 ;
                 ;void Start_SRF02_Conv(unsigned char Adress, unsigned char mode){
                 ; 0000 0182 void Start_SRF02_Conv(unsigned char Adress, unsigned char mode){
                 ; 0000 0183     unsigned char ConvMode[2] = {0x00,};
                 ; 0000 0184     ConvMode[1] = mode;
                 ;	Adress -> Y+3
                 ;	mode -> Y+2
                 ;	ConvMode -> Y+0
                 ; 0000 0185     TWI_Write(Adress,ConvMode,2);
                 ; 0000 0186 }
                 ;
                 ;unsigned int Get_SRF02_Range(unsigned char Adress)
                 ; 0000 0189 {
                 ; 0000 018A     unsigned int range;
                 ; 0000 018B     unsigned char High = 0,Low = 0;
                 ; 0000 018C 
                 ; 0000 018D     High = TWI_Read(Adress, RangeHighByte);
                 ;	Adress -> Y+4
                 ;	range -> R16,R17
                 ;	High -> R19
                 ;	Low -> R18
                 ; 0000 018E     if(High == 0xFF){
                 ; 0000 018F         return 0;
                 ; 0000 0190     }
                 ; 0000 0191     Low = TWI_Read(Adress, RangeLowByte);
                 ; 0000 0192     range = (High<<8)+Low;
                 ; 0000 0193 
                 ; 0000 0194     return range;
                 ; 0000 0195 }
                 ;
                 ;/////////////////////ISR//////////////////////////////////
                 ;
                 ;interrupt [USART0_RXC] void usart0_rxc(void)
                 ; 0000 019A {
                 _usart0_rxc:
0001fe 93aa      	ST   -Y,R26
0001ff 93ba      	ST   -Y,R27
000200 93ea      	ST   -Y,R30
000201 b7ef      	IN   R30,SREG
000202 93ea      	ST   -Y,R30
                 ; 0000 019B     if(((TCNT2 < CHARACTER3_5) && (TIMER2_OVERFLOW == 0)) || PACKET_BUFF_IDX == 0)
000203 b5e4      	IN   R30,0x24
000204 33ec      	CPI  R30,LOW(0x3C)
000205 f418      	BRSH _0x74
000206 e0e0      	LDI  R30,LOW(0)
000207 15e5      	CP   R30,R5
000208 f019      	BREQ _0x76
                 _0x74:
000209 e0e0      	LDI  R30,LOW(0)
00020a 15e4      	CP   R30,R4
00020b f419      	BRNE _0x73
                 _0x76:
                 ; 0000 019C     {
                 ; 0000 019D         PACKET_BUFF[PACKET_BUFF_IDX] = UDR0;
00020c 940e 04c0 	CALL SUBOPT_0x4
                 ; 0000 019E         PACKET_BUFF_IDX++;
                 ; 0000 019F         TCNT2 = 0;
                 ; 0000 01A0     }
                 ; 0000 01A1     else {
00020e c004      	RJMP _0x78
                 _0x73:
                 ; 0000 01A2         PACKET_BUFF_IDX = 0;
00020f 2444      	CLR  R4
                 ; 0000 01A3         PACKET_BUFF[PACKET_BUFF_IDX] = UDR0;
000210 940e 04c0 	CALL SUBOPT_0x4
                 ; 0000 01A4         PACKET_BUFF_IDX++;
                 ; 0000 01A5         TCNT2 = 0;
                 ; 0000 01A6         TIMER2_OVERFLOW = 0;
000212 2455      	CLR  R5
                 ; 0000 01A7     }
                 _0x78:
                 ; 0000 01A8 }
000213 91e9      	LD   R30,Y+
000214 bfef      	OUT  SREG,R30
000215 91e9      	LD   R30,Y+
000216 91b9      	LD   R27,Y+
000217 91a9      	LD   R26,Y+
000218 9518      	RETI
                 ;
                 ;interrupt [USART1_RXC] void usart1_rxc(void)
                 ; 0000 01AB {
                 _usart1_rxc:
000219 93ea      	ST   -Y,R30
00021a 93fa      	ST   -Y,R31
00021b b7ef      	IN   R30,SREG
00021c 93ea      	ST   -Y,R30
                 ; 0000 01AC     unsigned char i = 0;
                 ; 0000 01AD     i = UDR1;
00021d 931a      	ST   -Y,R17
                 ;	i -> R17
00021e e010      	LDI  R17,0
00021f 9110 009c 	LDS  R17,156
                 ; 0000 01AE     if(i == '<'){
000221 331c      	CPI  R17,60
000222 f431      	BRNE _0x79
                 ; 0000 01AF         VELOCITY_BUFF_IDX = 0;
000223 2466      	CLR  R6
                 ; 0000 01B0         VELOCITY_BUFF[VELOCITY_BUFF_IDX] = i;
000224 940e 04ca 	CALL SUBOPT_0x5
                 ; 0000 01B1         VELOCITY_BUFF_IDX++;
                 ; 0000 01B2         CHECK_GETS = 1;
000226 e0e1      	LDI  R30,LOW(1)
000227 2ebe      	MOV  R11,R30
                 ; 0000 01B3     }
                 ; 0000 01B4     else if(i == '>'){
000228 c008      	RJMP _0x7A
                 _0x79:
000229 331e      	CPI  R17,62
00022a f421      	BRNE _0x7B
                 ; 0000 01B5         VELOCITY_BUFF[VELOCITY_BUFF_IDX] = i;
00022b 940e 04ca 	CALL SUBOPT_0x5
                 ; 0000 01B6         VELOCITY_BUFF_IDX++;
                 ; 0000 01B7         CHECK_GETS = 0;
00022d 24bb      	CLR  R11
                 ; 0000 01B8     }
                 ; 0000 01B9     else{
00022e c002      	RJMP _0x7C
                 _0x7B:
                 ; 0000 01BA         VELOCITY_BUFF[VELOCITY_BUFF_IDX] = i;
00022f 940e 04ca 	CALL SUBOPT_0x5
                 ; 0000 01BB         VELOCITY_BUFF_IDX++;
                 ; 0000 01BC     }
                 _0x7C:
                 _0x7A:
                 ; 0000 01BD }
000231 9119      	LD   R17,Y+
000232 91e9      	LD   R30,Y+
000233 bfef      	OUT  SREG,R30
000234 91f9      	LD   R31,Y+
000235 91e9      	LD   R30,Y+
000236 9518      	RETI
                 ;
                 ;interrupt [TIM2_COMP] void timer2_comp(void)
                 ; 0000 01C0 {
                 _timer2_comp:
000237 93ea      	ST   -Y,R30
000238 b7ef      	IN   R30,SREG
                 ; 0000 01C1     TIMER2_OVERFLOW++;
000239 9453      	INC  R5
                 ; 0000 01C2 }
00023a c003      	RJMP _0x8B
                 ;
                 ;interrupt [TIM0_COMP] void timer0_comp(void)
                 ; 0000 01C5 {
                 _timer0_comp:
00023b 93ea      	ST   -Y,R30
00023c b7ef      	IN   R30,SREG
                 ; 0000 01C6     TIMER0_OVERFLOW++;
00023d 9473      	INC  R7
                 ; 0000 01C7 }
                 _0x8B:
00023e bfef      	OUT  SREG,R30
00023f 91e9      	LD   R30,Y+
000240 9518      	RETI
                 ;
                 ;interrupt [TIM1_COMPB] void timer1_compb(void)
                 ; 0000 01CA {
                 _timer1_compb:
000241 93ea      	ST   -Y,R30
                 ; 0000 01CB     SRF02_CONVERTING_FLAG = 1;
000242 e0e1      	LDI  R30,LOW(1)
000243 2e9e      	MOV  R9,R30
                 ; 0000 01CC }
000244 91e9      	LD   R30,Y+
000245 9518      	RETI
                 ;
                 ;void main(void)
                 ; 0000 01CF {
                 _main:
                 ; 0000 01D0     float a_buff;
                 ; 0000 01D1     float v_buff;
                 ; 0000 01D2 
                 ; 0000 01D3     int velocity = 0;
                 ; 0000 01D4     int angularV = 0;
                 ; 0000 01D5     int velocity_R = 0;
                 ; 0000 01D6     int velocity_L = 0;
                 ; 0000 01D7     int past_velocity_R = 0;
                 ; 0000 01D8     int past_velocity_L = 0;
                 ; 0000 01D9 
                 ; 0000 01DA     float robot_position_x = 0;
                 ; 0000 01DB     float robot_position_y = 0;
                 ; 0000 01DC     unsigned char BUFF[100] = {0,};
                 ; 0000 01DD 
                 ; 0000 01DE     /////////////////Ultra sonic/////////////////////////
                 ; 0000 01DF     unsigned char USID[10] = {0xE0, 0xE2, 0xE4, 0xE6, 0xE8, 0xEA, 0xEC, 0xEE};
                 ; 0000 01E0     unsigned char us_range[10] = {0,};
                 ; 0000 01E1     unsigned char pre_us_range[10] = {0,};
                 ; 0000 01E2 
                 ; 0000 01E3     usart1_init(bps_115200);
000246 97ef      	SBIW R28,63
000247 97ef      	SBIW R28,63
000248 976a      	SBIW R28,26
000249 e980      	LDI  R24,144
00024a e0a0      	LDI  R26,LOW(0)
00024b e0b0      	LDI  R27,HIGH(0)
00024c e8ec      	LDI  R30,LOW(_0x7D*2)
00024d e0f0      	LDI  R31,HIGH(_0x7D*2)
00024e 940e 0708 	CALL __INITLOCB
                 ;	a_buff -> Y+148
                 ;	v_buff -> Y+144
                 ;	velocity -> R16,R17
                 ;	angularV -> R18,R19
                 ;	velocity_R -> R20,R21
                 ;	velocity_L -> Y+142
                 ;	past_velocity_R -> Y+140
                 ;	past_velocity_L -> Y+138
                 ;	robot_position_x -> Y+134
                 ;	robot_position_y -> Y+130
                 ;	BUFF -> Y+30
                 ;	USID -> Y+20
                 ;	us_range -> Y+10
                 ;	pre_us_range -> Y+0
                +
000250 e000     +LDI R16 , LOW ( 0 )
000251 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
000252 e020     +LDI R18 , LOW ( 0 )
000253 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
000254 e040     +LDI R20 , LOW ( 0 )
000255 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
000256 e0e7      	LDI  R30,LOW(7)
000257 e0f0      	LDI  R31,HIGH(7)
000258 93fa      	ST   -Y,R31
000259 93ea      	ST   -Y,R30
00025a de7e      	RCALL _usart1_init
                 ; 0000 01E4     usart0_init(bps_115200);
00025b e0e7      	LDI  R30,LOW(7)
00025c e0f0      	LDI  R31,HIGH(7)
00025d 93fa      	ST   -Y,R31
00025e 93ea      	ST   -Y,R30
00025f de91      	RCALL _usart0_init
                 ; 0000 01E5     timer2_init();
000260 dea6      	RCALL _timer2_init
                 ; 0000 01E6     SREG |= 0x80;
000261 9478      	BSET 7
                 ; 0000 01E7 
                 ; 0000 01E8     DDRB.1 = 1;
000262 9ab9      	SBI  0x17,1
                 ; 0000 01E9     DDRB.2 = 1;
000263 9aba      	SBI  0x17,2
                 ; 0000 01EA     delay_ms(2500);
000264 ece4      	LDI  R30,LOW(2500)
000265 e0f9      	LDI  R31,HIGH(2500)
000266 940e 04d1 	CALL SUBOPT_0x6
                 ; 0000 01EB 
                 ; 0000 01EC     SRF02_CONVERTING_FLAG = 0;
000268 2499      	CLR  R9
                 ; 0000 01ED     while(1)
                 _0x82:
                 ; 0000 01EE     {
                 ; 0000 01EF         // if(SRF02_WAIT_FLAG == 0){
                 ; 0000 01F0         //     Start_SRF02_Conv(USID[0],Centimeters);
                 ; 0000 01F1         //     TCNT1H = 0;
                 ; 0000 01F2         //     TCNT1L = 0;
                 ; 0000 01F3         //     SRF02_WAIT_FLAG = 1;
                 ; 0000 01F4         // }
                 ; 0000 01F5 
                 ; 0000 01F6         if(CHECK_GETS == 0)
000269 20bb      	TST  R11
00026a f011      	BREQ PC+3
00026b 940c 02e7 	JMP _0x85
                 ; 0000 01F7         {
                 ; 0000 01F8             PORTB.2 = ~PORTB.2;
00026d 9bc2      	SBIS 0x18,2
00026e c002      	RJMP _0x86
00026f 98c2      	CBI  0x18,2
000270 c001      	RJMP _0x87
                 _0x86:
000271 9ac2      	SBI  0x18,2
                 _0x87:
                 ; 0000 01F9 
                 ; 0000 01FA             UCSR1B &= ~(1<<RXEN1);
000272 91e0 009a 	LDS  R30,154
000274 7eef      	ANDI R30,0xEF
000275 93e0 009a 	STS  154,R30
                 ; 0000 01FB             sscanf(VELOCITY_BUFF,"<%d,%d>", &velocity, &angularV);
000277 e6e4      	LDI  R30,LOW(_VELOCITY_BUFF)
000278 e0f5      	LDI  R31,HIGH(_VELOCITY_BUFF)
000279 93fa      	ST   -Y,R31
00027a 93ea      	ST   -Y,R30
                +
00027b e2e4     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
00027c e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
00027d 93fa      	ST   -Y,R31
00027e 93ea      	ST   -Y,R30
00027f b7ed      	IN   R30,SPL
000280 b7fe      	IN   R31,SPH
000281 9731      	SBIW R30,1
000282 940e 06e6 	CALL __PUTPARD1L
000284 931f      	PUSH R17
000285 930f      	PUSH R16
000286 b7ed      	IN   R30,SPL
000287 b7fe      	IN   R31,SPH
000288 9731      	SBIW R30,1
000289 940e 06e6 	CALL __PUTPARD1L
00028b 933f      	PUSH R19
00028c 932f      	PUSH R18
00028d e088      	LDI  R24,8
00028e 940e 044b 	CALL _sscanf
000290 962c      	ADIW R28,12
000291 912f      	POP  R18
000292 913f      	POP  R19
000293 910f      	POP  R16
000294 911f      	POP  R17
                 ; 0000 01FC             UCSR1B |=(1<<RXEN1);
000295 91e0 009a 	LDS  R30,154
000297 61e0      	ORI  R30,0x10
000298 93e0 009a 	STS  154,R30
                 ; 0000 01FD 
                 ; 0000 01FE             v_buff = (float)velocity/1000;
00029a 01f8      	MOVW R30,R16
00029b 940e 04d5 	CALL SUBOPT_0x7
                +
00029d 01de     +MOVW R26 , R28
00029e 57a0     +SUBI R26 , LOW ( - 144 )
00029f 4fbf     +SBCI R27 , HIGH ( - 144 )
0002a0 93ed     +ST X + , R30
0002a1 93fd     +ST X + , R31
0002a2 936d     +ST X + , R22
0002a3 937c     +ST X , R23
                 	__PUTD1SX 144
                 ; 0000 01FF             a_buff = (float)angularV/1000;
0002a4 01f9      	MOVW R30,R18
0002a5 940e 04d5 	CALL SUBOPT_0x7
                +
0002a7 01de     +MOVW R26 , R28
0002a8 56ac     +SUBI R26 , LOW ( - 148 )
0002a9 4fbf     +SBCI R27 , HIGH ( - 148 )
0002aa 93ed     +ST X + , R30
0002ab 93fd     +ST X + , R31
0002ac 936d     +ST X + , R22
0002ad 937c     +ST X , R23
                 	__PUTD1SX 148
                 ; 0000 0200 
                 ; 0000 0201             Make_MSPEED(&v_buff, &a_buff, &velocity_R, &velocity_L);
0002ae 01fe      	MOVW R30,R28
0002af 57e0      	SUBI R30,LOW(-(144))
0002b0 4fff      	SBCI R31,HIGH(-(144))
0002b1 93fa      	ST   -Y,R31
0002b2 93ea      	ST   -Y,R30
0002b3 01fe      	MOVW R30,R28
0002b4 56ea      	SUBI R30,LOW(-(150))
0002b5 4fff      	SBCI R31,HIGH(-(150))
0002b6 93fa      	ST   -Y,R31
0002b7 93ea      	ST   -Y,R30
0002b8 b7ed      	IN   R30,SPL
0002b9 b7fe      	IN   R31,SPH
0002ba 9731      	SBIW R30,1
0002bb 93fa      	ST   -Y,R31
0002bc 93ea      	ST   -Y,R30
0002bd 935f      	PUSH R21
0002be 934f      	PUSH R20
0002bf 01fe      	MOVW R30,R28
0002c0 56ec      	SUBI R30,LOW(-(148))
0002c1 4fff      	SBCI R31,HIGH(-(148))
0002c2 93fa      	ST   -Y,R31
0002c3 93ea      	ST   -Y,R30
0002c4 deb9      	RCALL _Make_MSPEED
0002c5 914f      	POP  R20
0002c6 915f      	POP  R21
                 ; 0000 0202 
                 ; 0000 0203             // if(SRF02_CONVERTING_FLAG == 1 && SRF02_WAIT_FLAG == 1){
                 ; 0000 0204             //     us_range[0] = Get_SRF02_Range(0xE0);
                 ; 0000 0205 
                 ; 0000 0206             //     us_range[0] = ( tau * pre_us_range[0] + ts * us_range[0] ) / (tau + ts) ;
                 ; 0000 0207 
                 ; 0000 0208             //     SRF02_CONVERTING_FLAG = 0;
                 ; 0000 0209             //     SRF02_WAIT_FLAG = 0;
                 ; 0000 020A             // }
                 ; 0000 020B 
                 ; 0000 020C             //sprintf(BUFF,"<%.2f,%.f2>", v_buff, a_buff);
                 ; 0000 020D             // sprintf(BUFF,"<%d,%d,%d>", velocity_R, velocity_L, us_range[0]);
                 ; 0000 020E             // puts_USART1(BUFF,VELOCITY_BUFF_IDX);
                 ; 0000 020F 
                 ; 0000 0210             RTU_WriteOperate0(R,(unsigned int)121,(int)(velocity_R));
0002c7 e0e1      	LDI  R30,LOW(1)
0002c8 93ea      	ST   -Y,R30
0002c9 e7e9      	LDI  R30,LOW(121)
0002ca e0f0      	LDI  R31,HIGH(121)
0002cb 93fa      	ST   -Y,R31
0002cc 93ea      	ST   -Y,R30
0002cd 935a      	ST   -Y,R21
0002ce 934a      	ST   -Y,R20
0002cf 940e 04e2 	CALL SUBOPT_0x8
                 ; 0000 0211             delay_ms(5);
                 ; 0000 0212 
                 ; 0000 0213             RTU_WriteOperate0(L,(unsigned int)121,(int)-(velocity_L));
0002d1 e0e2      	LDI  R30,LOW(2)
0002d2 93ea      	ST   -Y,R30
0002d3 e7e9      	LDI  R30,LOW(121)
0002d4 e0f0      	LDI  R31,HIGH(121)
0002d5 93fa      	ST   -Y,R31
0002d6 93ea      	ST   -Y,R30
                +
0002d7 01fe     +MOVW R30 , R28
0002d8 56ef     +SUBI R30 , LOW ( - 145 )
0002d9 4fff     +SBCI R31 , HIGH ( - 145 )
0002da 9001     +LD R0 , Z +
0002db 81f0     +LD R31 , Z
0002dc 2de0     +MOV R30 , R0
                 	__GETW1SX 145
0002dd 940e 06af 	CALL __ANEGW1
0002df 940e 04e7 	CALL SUBOPT_0x9
                 ; 0000 0214             delay_ms(5);
                 ; 0000 0215 
                 ; 0000 0216             RTU_WriteOperate0(R,(unsigned int)120,(int)(START));
0002e1 e0e1      	LDI  R30,LOW(1)
0002e2 940e 04ea 	CALL SUBOPT_0xA
                 ; 0000 0217             delay_ms(5);
                 ; 0000 0218 
                 ; 0000 0219             RTU_WriteOperate0(L,(unsigned int)120,(int)(START));
0002e4 e0e2      	LDI  R30,LOW(2)
0002e5 940e 04ea 	CALL SUBOPT_0xA
                 ; 0000 021A             delay_ms(5);
                 ; 0000 021B         }
                 ; 0000 021C     }
                 _0x85:
0002e7 cf81      	RJMP _0x82
                 ; 0000 021D }
                 _0x88:
0002e8 cfff      	RJMP _0x88
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _get_buff_G100:
0002e9 931a      	ST   -Y,R17
0002ea 81a9      	LDD  R26,Y+1
0002eb 81ba      	LDD  R27,Y+1+1
0002ec e0e0      	LDI  R30,LOW(0)
0002ed 93ec      	ST   X,R30
0002ee 81ab      	LDD  R26,Y+3
0002ef 81bc      	LDD  R27,Y+3+1
0002f0 91ec      	LD   R30,X
0002f1 2f1e      	MOV  R17,R30
0002f2 30e0      	CPI  R30,0
0002f3 f019      	BREQ _0x20000BF
0002f4 e0e0      	LDI  R30,LOW(0)
0002f5 93ec      	ST   X,R30
0002f6 c019      	RJMP _0x20000C0
                 _0x20000BF:
0002f7 81a9      	LDD  R26,Y+1
0002f8 81ba      	LDD  R27,Y+1+1
0002f9 9611      	ADIW R26,1
0002fa 940e 06cd 	CALL __GETW1P
0002fc 9730      	SBIW R30,0
0002fd f089      	BREQ _0x20000C1
0002fe 81e9      	LDD  R30,Y+1
0002ff 81fa      	LDD  R31,Y+1+1
000300 81a1      	LDD  R26,Z+1
000301 81b2      	LDD  R27,Z+2
000302 91ec      	LD   R30,X
000303 2f1e      	MOV  R17,R30
000304 30e0      	CPI  R30,0
000305 f041      	BREQ _0x20000C2
000306 81a9      	LDD  R26,Y+1
000307 81ba      	LDD  R27,Y+1+1
000308 9611      	ADIW R26,1
000309 91ed      	LD   R30,X+
00030a 91fd      	LD   R31,X+
00030b 9631      	ADIW R30,1
00030c 93fe      	ST   -X,R31
00030d 93ee      	ST   -X,R30
                 _0x20000C2:
00030e c001      	RJMP _0x20000C3
                 _0x20000C1:
00030f e010      	LDI  R17,LOW(0)
                 _0x20000C3:
                 _0x20000C0:
000310 2fe1      	MOV  R30,R17
000311 8118      	LDD  R17,Y+0
000312 9625      	ADIW R28,5
000313 9508      	RET
                 __scanf_G100:
000314 9725      	SBIW R28,5
000315 940e 06fa 	CALL __SAVELOCR6
000317 e0e0      	LDI  R30,LOW(0)
000318 e0f0      	LDI  R31,HIGH(0)
000319 87e8      	STD  Y+8,R30
00031a 87f9      	STD  Y+8+1,R31
00031b 2f4e      	MOV  R20,R30
                 _0x20000C4:
00031c 89e9      	LDD  R30,Y+17
00031d 89fa      	LDD  R31,Y+17+1
00031e 9631      	ADIW R30,1
00031f 8be9      	STD  Y+17,R30
000320 8bfa      	STD  Y+17+1,R31
000321 9731      	SBIW R30,1
000322 91e4      	LPM  R30,Z
000323 2f3e      	MOV  R19,R30
000324 30e0      	CPI  R30,0
000325 f411      	BRNE PC+3
000326 940c 0445 	JMP _0x20000C6
000328 940e 04f2 	CALL SUBOPT_0xB
00032a f0c1      	BREQ _0x20000C7
                 _0x20000C8:
00032b b7ed      	IN   R30,SPL
00032c b7fe      	IN   R31,SPH
00032d 93fa      	ST   -Y,R31
00032e 93ea      	ST   -Y,R30
00032f 934f      	PUSH R20
000330 940e 04f7 	CALL SUBOPT_0xC
000332 914f      	POP  R20
000333 2f3e      	MOV  R19,R30
000334 30e0      	CPI  R30,0
000335 f019      	BREQ _0x20000CB
000336 940e 04f2 	CALL SUBOPT_0xB
000338 f409      	BRNE _0x20000CC
                 _0x20000CB:
000339 c007      	RJMP _0x20000CA
                 _0x20000CC:
00033a 940e 04ff 	CALL SUBOPT_0xD
00033c f41c      	BRGE _0x20000CD
00033d efef      	LDI  R30,LOW(65535)
00033e efff      	LDI  R31,HIGH(65535)
00033f c107      	RJMP _0x20A0002
                 _0x20000CD:
000340 cfea      	RJMP _0x20000C8
                 _0x20000CA:
000341 2f43      	MOV  R20,R19
000342 c101      	RJMP _0x20000CE
                 _0x20000C7:
000343 3235      	CPI  R19,37
000344 f011      	BREQ PC+3
000345 940c 042c 	JMP _0x20000CF
000347 e050      	LDI  R21,LOW(0)
                 _0x20000D0:
000348 89e9      	LDD  R30,Y+17
000349 89fa      	LDD  R31,Y+17+1
00034a 9135      	LPM  R19,Z+
00034b 8be9      	STD  Y+17,R30
00034c 8bfa      	STD  Y+17+1,R31
00034d 3330      	CPI  R19,48
00034e f010      	BRLO _0x20000D4
00034f 333a      	CPI  R19,58
000350 f008      	BRLO _0x20000D3
                 _0x20000D4:
000351 c007      	RJMP _0x20000D2
                 _0x20000D3:
000352 e0aa      	LDI  R26,LOW(10)
000353 9f5a      	MUL  R21,R26
000354 2d50      	MOV  R21,R0
000355 2fe3      	MOV  R30,R19
000356 53e0      	SUBI R30,LOW(48)
000357 0f5e      	ADD  R21,R30
000358 cfef      	RJMP _0x20000D0
                 _0x20000D2:
000359 3030      	CPI  R19,0
00035a f409      	BRNE _0x20000D6
00035b c0e9      	RJMP _0x20000C6
                 _0x20000D6:
                 _0x20000D7:
00035c b7ed      	IN   R30,SPL
00035d b7fe      	IN   R31,SPH
00035e 93fa      	ST   -Y,R31
00035f 93ea      	ST   -Y,R30
000360 934f      	PUSH R20
000361 940e 04f7 	CALL SUBOPT_0xC
000363 914f      	POP  R20
000364 2f2e      	MOV  R18,R30
000365 93ea      	ST   -Y,R30
000366 940e 0480 	CALL _isspace
000368 30e0      	CPI  R30,0
000369 f039      	BREQ _0x20000D9
00036a 940e 04ff 	CALL SUBOPT_0xD
00036c f41c      	BRGE _0x20000DA
00036d efef      	LDI  R30,LOW(65535)
00036e efff      	LDI  R31,HIGH(65535)
00036f c0d7      	RJMP _0x20A0002
                 _0x20000DA:
000370 cfeb      	RJMP _0x20000D7
                 _0x20000D9:
000371 3020      	CPI  R18,0
000372 f409      	BRNE _0x20000DB
000373 c0c8      	RJMP _0x20000DC
                 _0x20000DB:
000374 2f42      	MOV  R20,R18
000375 3050      	CPI  R21,0
000376 f409      	BRNE _0x20000DD
000377 ef5f      	LDI  R21,LOW(255)
                 _0x20000DD:
000378 2fe3      	MOV  R30,R19
000379 36e3      	CPI  R30,LOW(0x63)
00037a f499      	BRNE _0x20000E1
00037b 940e 0504 	CALL SUBOPT_0xE
00037d b7ed      	IN   R30,SPL
00037e b7fe      	IN   R31,SPH
00037f 93fa      	ST   -Y,R31
000380 93ea      	ST   -Y,R30
000381 934f      	PUSH R20
000382 940e 04f7 	CALL SUBOPT_0xC
000384 914f      	POP  R20
000385 01d8      	MOVW R26,R16
000386 93ec      	ST   X,R30
000387 940e 04ff 	CALL SUBOPT_0xD
000389 f41c      	BRGE _0x20000E2
00038a efef      	LDI  R30,LOW(65535)
00038b efff      	LDI  R31,HIGH(65535)
00038c c0ba      	RJMP _0x20A0002
                 _0x20000E2:
00038d c098      	RJMP _0x20000E0
                 _0x20000E1:
00038e 37e3      	CPI  R30,LOW(0x73)
00038f f541      	BRNE _0x20000EB
000390 940e 0504 	CALL SUBOPT_0xE
                 _0x20000E4:
000392 2fe5      	MOV  R30,R21
000393 5051      	SUBI R21,1
000394 30e0      	CPI  R30,0
000395 f0f1      	BREQ _0x20000E6
000396 b7ed      	IN   R30,SPL
000397 b7fe      	IN   R31,SPH
000398 93fa      	ST   -Y,R31
000399 93ea      	ST   -Y,R30
00039a 934f      	PUSH R20
00039b 940e 04f7 	CALL SUBOPT_0xC
00039d 914f      	POP  R20
00039e 2f3e      	MOV  R19,R30
00039f 30e0      	CPI  R30,0
0003a0 f019      	BREQ _0x20000E8
0003a1 940e 04f2 	CALL SUBOPT_0xB
0003a3 f039      	BREQ _0x20000E7
                 _0x20000E8:
0003a4 940e 04ff 	CALL SUBOPT_0xD
0003a6 f41c      	BRGE _0x20000EA
0003a7 efef      	LDI  R30,LOW(65535)
0003a8 efff      	LDI  R31,HIGH(65535)
0003a9 c09d      	RJMP _0x20A0002
                 _0x20000EA:
0003aa c009      	RJMP _0x20000E6
                 _0x20000E7:
0003ab 931f      	PUSH R17
0003ac 930f      	PUSH R16
                +
0003ad 5f0f     +SUBI R16 , LOW ( - 1 )
0003ae 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0003af 2fe3      	MOV  R30,R19
0003b0 91af      	POP  R26
0003b1 91bf      	POP  R27
0003b2 93ec      	ST   X,R30
0003b3 cfde      	RJMP _0x20000E4
                 _0x20000E6:
0003b4 01d8      	MOVW R26,R16
0003b5 e0e0      	LDI  R30,LOW(0)
0003b6 93ec      	ST   X,R30
0003b7 c06e      	RJMP _0x20000E0
                 _0x20000EB:
0003b8 e0e1      	LDI  R30,LOW(1)
0003b9 87ea      	STD  Y+10,R30
0003ba 2fe3      	MOV  R30,R19
0003bb 36e4      	CPI  R30,LOW(0x64)
0003bc f011      	BREQ _0x20000F0
0003bd 36e9      	CPI  R30,LOW(0x69)
0003be f419      	BRNE _0x20000F1
                 _0x20000F0:
0003bf e0e0      	LDI  R30,LOW(0)
0003c0 87ea      	STD  Y+10,R30
0003c1 c002      	RJMP _0x20000F2
                 _0x20000F1:
0003c2 37e5      	CPI  R30,LOW(0x75)
0003c3 f411      	BRNE _0x20000F3
                 _0x20000F2:
0003c4 e02a      	LDI  R18,LOW(10)
0003c5 c008      	RJMP _0x20000EE
                 _0x20000F3:
0003c6 37e8      	CPI  R30,LOW(0x78)
0003c7 f411      	BRNE _0x20000F4
0003c8 e120      	LDI  R18,LOW(16)
0003c9 c004      	RJMP _0x20000EE
                 _0x20000F4:
0003ca 32e5      	CPI  R30,LOW(0x25)
0003cb f409      	BRNE _0x20000F7
0003cc c05f      	RJMP _0x20000F6
                 _0x20000F7:
0003cd c077      	RJMP _0x20A0003
                 _0x20000EE:
0003ce e0e0      	LDI  R30,LOW(0)
0003cf 83ee      	STD  Y+6,R30
0003d0 83ef      	STD  Y+6+1,R30
                 _0x20000F8:
0003d1 2fe5      	MOV  R30,R21
0003d2 5051      	SUBI R21,1
0003d3 30e0      	CPI  R30,0
0003d4 f411      	BRNE PC+3
0003d5 940c 0419 	JMP _0x20000FA
0003d7 b7ed      	IN   R30,SPL
0003d8 b7fe      	IN   R31,SPH
0003d9 93fa      	ST   -Y,R31
0003da 93ea      	ST   -Y,R30
0003db 934f      	PUSH R20
0003dc 940e 04f7 	CALL SUBOPT_0xC
0003de 914f      	POP  R20
0003df 2f3e      	MOV  R19,R30
0003e0 32e1      	CPI  R30,LOW(0x21)
0003e1 f438      	BRSH _0x20000FB
0003e2 940e 04ff 	CALL SUBOPT_0xD
0003e4 f41c      	BRGE _0x20000FC
0003e5 efef      	LDI  R30,LOW(65535)
0003e6 efff      	LDI  R31,HIGH(65535)
0003e7 c05f      	RJMP _0x20A0002
                 _0x20000FC:
0003e8 c017      	RJMP _0x20000FD
                 _0x20000FB:
0003e9 85ea      	LDD  R30,Y+10
0003ea 30e0      	CPI  R30,0
0003eb f439      	BRNE _0x20000FE
0003ec 323d      	CPI  R19,45
0003ed f419      	BRNE _0x20000FF
0003ee efef      	LDI  R30,LOW(255)
0003ef 87ea      	STD  Y+10,R30
0003f0 cfe0      	RJMP _0x20000F8
                 _0x20000FF:
0003f1 e0e1      	LDI  R30,LOW(1)
0003f2 87ea      	STD  Y+10,R30
                 _0x20000FE:
0003f3 3120      	CPI  R18,16
0003f4 f431      	BRNE _0x2000101
0003f5 933a      	ST   -Y,R19
0003f6 940e 048a 	CALL _isxdigit
0003f8 30e0      	CPI  R30,0
0003f9 f031      	BREQ _0x20000FD
0003fa c007      	RJMP _0x2000103
                 _0x2000101:
0003fb 933a      	ST   -Y,R19
0003fc 940e 0478 	CALL _isdigit
0003fe 30e0      	CPI  R30,0
0003ff f411      	BRNE _0x2000104
                 _0x20000FD:
000400 2f43      	MOV  R20,R19
000401 c017      	RJMP _0x20000FA
                 _0x2000104:
                 _0x2000103:
000402 3631      	CPI  R19,97
000403 f010      	BRLO _0x2000105
000404 5537      	SUBI R19,LOW(87)
000405 c005      	RJMP _0x2000106
                 _0x2000105:
000406 3431      	CPI  R19,65
000407 f010      	BRLO _0x2000107
000408 5337      	SUBI R19,LOW(55)
000409 c001      	RJMP _0x2000108
                 _0x2000107:
00040a 5330      	SUBI R19,LOW(48)
                 _0x2000108:
                 _0x2000106:
00040b 2fe2      	MOV  R30,R18
00040c 81ae      	LDD  R26,Y+6
00040d 81bf      	LDD  R27,Y+6+1
00040e e0f0      	LDI  R31,0
00040f 940e 06c5 	CALL __MULW12U
000411 01df      	MOVW R26,R30
000412 2fe3      	MOV  R30,R19
000413 e0f0      	LDI  R31,0
000414 0fea      	ADD  R30,R26
000415 1ffb      	ADC  R31,R27
000416 83ee      	STD  Y+6,R30
000417 83ff      	STD  Y+6+1,R31
000418 cfb8      	RJMP _0x20000F8
                 _0x20000FA:
000419 940e 0504 	CALL SUBOPT_0xE
00041b 85ea      	LDD  R30,Y+10
00041c 81ae      	LDD  R26,Y+6
00041d 81bf      	LDD  R27,Y+6+1
00041e e0f0      	LDI  R31,0
00041f fde7      	SBRC R30,7
000420 efff      	SER  R31
000421 940e 06c5 	CALL __MULW12U
000423 01d8      	MOVW R26,R16
000424 93ed      	ST   X+,R30
000425 93fc      	ST   X,R31
                 _0x20000E0:
000426 85e8      	LDD  R30,Y+8
000427 85f9      	LDD  R31,Y+8+1
000428 9631      	ADIW R30,1
000429 87e8      	STD  Y+8,R30
00042a 87f9      	STD  Y+8+1,R31
00042b c018      	RJMP _0x2000109
                 _0x20000CF:
                 _0x20000F6:
00042c b7ed      	IN   R30,SPL
00042d b7fe      	IN   R31,SPH
00042e 93fa      	ST   -Y,R31
00042f 93ea      	ST   -Y,R30
000430 934f      	PUSH R20
000431 940e 04f7 	CALL SUBOPT_0xC
000433 914f      	POP  R20
000434 17e3      	CP   R30,R19
000435 f071      	BREQ _0x200010A
000436 940e 04ff 	CALL SUBOPT_0xD
000438 f41c      	BRGE _0x200010B
000439 efef      	LDI  R30,LOW(65535)
00043a efff      	LDI  R31,HIGH(65535)
00043b c00b      	RJMP _0x20A0002
                 _0x200010B:
                 _0x20000DC:
00043c 85e8      	LDD  R30,Y+8
00043d 85f9      	LDD  R31,Y+8+1
00043e 9730      	SBIW R30,0
00043f f419      	BRNE _0x200010C
000440 efef      	LDI  R30,LOW(65535)
000441 efff      	LDI  R31,HIGH(65535)
000442 c004      	RJMP _0x20A0002
                 _0x200010C:
000443 c001      	RJMP _0x20000C6
                 _0x200010A:
                 _0x2000109:
                 _0x20000CE:
000444 ced7      	RJMP _0x20000C4
                 _0x20000C6:
                 _0x20A0003:
000445 85e8      	LDD  R30,Y+8
000446 85f9      	LDD  R31,Y+8+1
                 _0x20A0002:
000447 940e 0701 	CALL __LOADLOCR6
000449 9663      	ADIW R28,19
00044a 9508      	RET
                 _sscanf:
00044b 92ff      	PUSH R15
00044c 2ef8      	MOV  R15,R24
00044d 9723      	SBIW R28,3
00044e 931a      	ST   -Y,R17
00044f 930a      	ST   -Y,R16
000450 940e 050f 	CALL SUBOPT_0xF
000452 9730      	SBIW R30,0
000453 f419      	BRNE _0x200010D
000454 efef      	LDI  R30,LOW(65535)
000455 efff      	LDI  R31,HIGH(65535)
000456 c01c      	RJMP _0x20A0001
                 _0x200010D:
000457 01de      	MOVW R26,R28
000458 9611      	ADIW R26,1
000459 940e 06ab 	CALL __ADDW2R15
00045b 018d      	MOVW R16,R26
00045c 940e 050f 	CALL SUBOPT_0xF
00045e 83eb      	STD  Y+3,R30
00045f 83fc      	STD  Y+3+1,R31
000460 01de      	MOVW R26,R28
000461 9615      	ADIW R26,5
000462 940e 06ab 	CALL __ADDW2R15
000464 940e 06cd 	CALL __GETW1P
000466 93fa      	ST   -Y,R31
000467 93ea      	ST   -Y,R30
000468 931a      	ST   -Y,R17
000469 930a      	ST   -Y,R16
00046a eee9      	LDI  R30,LOW(_get_buff_G100)
00046b e0f2      	LDI  R31,HIGH(_get_buff_G100)
00046c 93fa      	ST   -Y,R31
00046d 93ea      	ST   -Y,R30
00046e 01fe      	MOVW R30,R28
00046f 9638      	ADIW R30,8
000470 93fa      	ST   -Y,R31
000471 93ea      	ST   -Y,R30
000472 dea1      	RCALL __scanf_G100
                 _0x20A0001:
000473 8119      	LDD  R17,Y+1
000474 8108      	LDD  R16,Y+0
000475 9625      	ADIW R28,5
000476 90ff      	POP  R15
000477 9508      	RET
                 
                 	.CSEG
                 _isdigit:
000478 e0e1          ldi  r30,1
000479 91f9          ld   r31,y+
00047a 33f0          cpi  r31,'0'
00047b f010          brlo isdigit0
00047c 33fa          cpi  r31,'9'+1
00047d f008          brlo isdigit1
                 isdigit0:
00047e 27ee          clr  r30
                 isdigit1:
00047f 9508          ret
                 _isspace:
000480 e0e1          ldi  r30,1
000481 91f9          ld   r31,y+
000482 32f0          cpi  r31,' '
000483 f029          breq isspace1
000484 30f9          cpi  r31,9
000485 f010          brlo isspace0
000486 30fe          cpi  r31,13+1
000487 f008          brlo isspace1
                 isspace0:
000488 27ee          clr  r30
                 isspace1:
000489 9508          ret
                 _isxdigit:
00048a e0e1          ldi  r30,1
00048b 91f9          ld   r31,y+
00048c 53f0          subi r31,0x30
00048d f040          brcs isxdigit0
00048e 30fa          cpi  r31,10
00048f f038          brcs isxdigit1
000490 75ff          andi r31,0x5f
000491 50f7          subi r31,7
000492 30fa          cpi  r31,10
000493 f010          brcs isxdigit0
000494 31f0          cpi  r31,16
000495 f008          brcs isxdigit1
                 isxdigit0:
000496 27ee          clr  r30
                 isxdigit1:
000497 9508          ret
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _PACKET_BUFF:
000500           	.BYTE 0x64
                 _VELOCITY_BUFF:
000564           	.BYTE 0x14
                 __seed_G104:
000578           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000498 85ae      	LDD  R26,Y+14
000499 85bf      	LDD  R27,Y+14+1
00049a 940e 06d1 	CALL __GETD1P
00049c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
00049d 85ac      	LDD  R26,Y+12
00049e 85bd      	LDD  R27,Y+12+1
00049f 940e 06d1 	CALL __GETD1P
0004a1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2:
                +
0004a2 eea1     +LDI R26 , LOW ( 0x3E947AE1 )
0004a3 e7ba     +LDI R27 , HIGH ( 0x3E947AE1 )
0004a4 e984     +LDI R24 , BYTE3 ( 0x3E947AE1 )
0004a5 e39e     +LDI R25 , BYTE4 ( 0x3E947AE1 )
                 	__GETD2N 0x3E947AE1
0004a6 940e 0618 	CALL __MULF12
0004a8 01df      	MOVW R26,R30
0004a9 01cb      	MOVW R24,R22
                +
0004aa e0e0     +LDI R30 , LOW ( 0x40800000 )
0004ab e0f0     +LDI R31 , HIGH ( 0x40800000 )
0004ac e860     +LDI R22 , BYTE3 ( 0x40800000 )
0004ad e470     +LDI R23 , BYTE4 ( 0x40800000 )
                 	__GETD1N 0x40800000
0004ae 940e 0666 	CALL __DIVF21
0004b0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3:
                +
0004b1 ebaa     +LDI R26 , LOW ( 0x4318C9BA )
0004b2 ecb9     +LDI R27 , HIGH ( 0x4318C9BA )
0004b3 e188     +LDI R24 , BYTE3 ( 0x4318C9BA )
0004b4 e493     +LDI R25 , BYTE4 ( 0x4318C9BA )
                 	__GETD2N 0x4318C9BA
0004b5 940e 0618 	CALL __MULF12
                +
0004b7 e0a0     +LDI R26 , LOW ( 0x41C80000 )
0004b8 e0b0     +LDI R27 , HIGH ( 0x41C80000 )
0004b9 ec88     +LDI R24 , BYTE3 ( 0x41C80000 )
0004ba e491     +LDI R25 , BYTE4 ( 0x41C80000 )
                 	__GETD2N 0x41C80000
0004bb 940e 0618 	CALL __MULF12
0004bd 940e 0557 	CALL __CFD1
0004bf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x4:
0004c0 2da4      	MOV  R26,R4
0004c1 e0b0      	LDI  R27,0
0004c2 50a0      	SUBI R26,LOW(-_PACKET_BUFF)
0004c3 4fbb      	SBCI R27,HIGH(-_PACKET_BUFF)
0004c4 b1ec      	IN   R30,0xC
0004c5 93ec      	ST   X,R30
0004c6 9443      	INC  R4
0004c7 e0e0      	LDI  R30,LOW(0)
0004c8 bde4      	OUT  0x24,R30
0004c9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x5:
0004ca 2de6      	MOV  R30,R6
0004cb e0f0      	LDI  R31,0
0004cc 59ec      	SUBI R30,LOW(-_VELOCITY_BUFF)
0004cd 4ffa      	SBCI R31,HIGH(-_VELOCITY_BUFF)
0004ce 8310      	ST   Z,R17
0004cf 9463      	INC  R6
0004d0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x6:
0004d1 93fa      	ST   -Y,R31
0004d2 93ea      	ST   -Y,R30
0004d3 940c 0516 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x7:
0004d5 940e 06c0 	CALL __CWD1
0004d7 940e 058e 	CALL __CDF1
0004d9 01df      	MOVW R26,R30
0004da 01cb      	MOVW R24,R22
                +
0004db e0e0     +LDI R30 , LOW ( 0x447A0000 )
0004dc e0f0     +LDI R31 , HIGH ( 0x447A0000 )
0004dd e76a     +LDI R22 , BYTE3 ( 0x447A0000 )
0004de e474     +LDI R23 , BYTE4 ( 0x447A0000 )
                 	__GETD1N 0x447A0000
0004df 940e 0666 	CALL __DIVF21
0004e1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x8:
0004e2 940e 0143 	CALL _RTU_WriteOperate0
0004e4 e0e5      	LDI  R30,LOW(5)
0004e5 e0f0      	LDI  R31,HIGH(5)
0004e6 cfea      	RJMP SUBOPT_0x6
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
0004e7 93fa      	ST   -Y,R31
0004e8 93ea      	ST   -Y,R30
0004e9 cff8      	RJMP SUBOPT_0x8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xA:
0004ea 93ea      	ST   -Y,R30
0004eb e7e8      	LDI  R30,LOW(120)
0004ec e0f0      	LDI  R31,HIGH(120)
0004ed 93fa      	ST   -Y,R31
0004ee 93ea      	ST   -Y,R30
0004ef e0e1      	LDI  R30,LOW(1)
0004f0 e0f0      	LDI  R31,HIGH(1)
0004f1 cff5      	RJMP SUBOPT_0x9
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
0004f2 933a      	ST   -Y,R19
0004f3 940e 0480 	CALL _isspace
0004f5 30e0      	CPI  R30,0
0004f6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0xC:
0004f7 85ed      	LDD  R30,Y+13
0004f8 85fe      	LDD  R31,Y+13+1
0004f9 93fa      	ST   -Y,R31
0004fa 93ea      	ST   -Y,R30
0004fb 89e9      	LDD  R30,Y+17
0004fc 89fa      	LDD  R31,Y+17+1
0004fd 9509      	ICALL
0004fe 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xD:
0004ff 85ab      	LDD  R26,Y+11
000500 85bc      	LDD  R27,Y+11+1
000501 91ac      	LD   R26,X
000502 30a0      	CPI  R26,0
000503 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xE:
000504 85ef      	LDD  R30,Y+15
000505 89f8      	LDD  R31,Y+15+1
000506 9734      	SBIW R30,4
000507 87ef      	STD  Y+15,R30
000508 8bf8      	STD  Y+15+1,R31
000509 85af      	LDD  R26,Y+15
00050a 89b8      	LDD  R27,Y+15+1
00050b 9614      	ADIW R26,4
00050c 910d      	LD   R16,X+
00050d 911c      	LD   R17,X
00050e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
00050f 01de      	MOVW R26,R28
000510 9617      	ADIW R26,7
000511 940e 06ab 	CALL __ADDW2R15
000513 940e 06cd 	CALL __GETW1P
000515 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000516 91e9      	ld   r30,y+
000517 91f9      	ld   r31,y+
000518 9630      	adiw r30,0
000519 f039      	breq __delay_ms1
                 __delay_ms0:
                +
00051a e686     +LDI R24 , LOW ( 0xE66 )
00051b e09e     +LDI R25 , HIGH ( 0xE66 )
                +__DELAY_USW_LOOP :
00051c 9701     +SBIW R24 , 1
00051d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xE66
00051e 95a8      	wdr
00051f 9731      	sbiw r30,1
000520 f7c9      	brne __delay_ms0
                 __delay_ms1:
000521 9508      	ret
                 
                 __ANEGF1:
000522 9730      	SBIW R30,0
000523 4060      	SBCI R22,0
000524 4070      	SBCI R23,0
000525 f009      	BREQ __ANEGF10
000526 5870      	SUBI R23,0x80
                 __ANEGF10:
000527 9508      	RET
                 
                 __ROUND_REPACK:
000528 2355      	TST  R21
000529 f442      	BRPL __REPACK
00052a 3850      	CPI  R21,0x80
00052b f411      	BRNE __ROUND_REPACK0
00052c ffe0      	SBRS R30,0
00052d c004      	RJMP __REPACK
                 __ROUND_REPACK0:
00052e 9631      	ADIW R30,1
00052f 1f69      	ADC  R22,R25
000530 1f79      	ADC  R23,R25
000531 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000532 e850      	LDI  R21,0x80
000533 2757      	EOR  R21,R23
000534 f411      	BRNE __REPACK0
000535 935f      	PUSH R21
000536 c0cf      	RJMP __ZERORES
                 __REPACK0:
000537 3f5f      	CPI  R21,0xFF
000538 f031      	BREQ __REPACK1
000539 0f66      	LSL  R22
00053a 0c00      	LSL  R0
00053b 9557      	ROR  R21
00053c 9567      	ROR  R22
00053d 2f75      	MOV  R23,R21
00053e 9508      	RET
                 __REPACK1:
00053f 935f      	PUSH R21
000540 2000      	TST  R0
000541 f00a      	BRMI __REPACK2
000542 c0cf      	RJMP __MAXRES
                 __REPACK2:
000543 c0c8      	RJMP __MINRES
                 
                 __UNPACK:
000544 e850      	LDI  R21,0x80
000545 2e19      	MOV  R1,R25
000546 2215      	AND  R1,R21
000547 0f88      	LSL  R24
000548 1f99      	ROL  R25
000549 2795      	EOR  R25,R21
00054a 0f55      	LSL  R21
00054b 9587      	ROR  R24
                 
                 __UNPACK1:
00054c e850      	LDI  R21,0x80
00054d 2e07      	MOV  R0,R23
00054e 2205      	AND  R0,R21
00054f 0f66      	LSL  R22
000550 1f77      	ROL  R23
000551 2775      	EOR  R23,R21
000552 0f55      	LSL  R21
000553 9567      	ROR  R22
000554 9508      	RET
                 
                 __CFD1U:
000555 9468      	SET
000556 c001      	RJMP __CFD1U0
                 __CFD1:
000557 94e8      	CLT
                 __CFD1U0:
000558 935f      	PUSH R21
000559 dff2      	RCALL __UNPACK1
00055a 3870      	CPI  R23,0x80
00055b f018      	BRLO __CFD10
00055c 3f7f      	CPI  R23,0xFF
00055d f408      	BRCC __CFD10
00055e c0a7      	RJMP __ZERORES
                 __CFD10:
00055f e156      	LDI  R21,22
000560 1b57      	SUB  R21,R23
000561 f4aa      	BRPL __CFD11
000562 9551      	NEG  R21
000563 3058      	CPI  R21,8
000564 f40e      	BRTC __CFD19
000565 3059      	CPI  R21,9
                 __CFD19:
000566 f030      	BRLO __CFD17
000567 efef      	SER  R30
000568 efff      	SER  R31
000569 ef6f      	SER  R22
00056a e77f      	LDI  R23,0x7F
00056b f977      	BLD  R23,7
00056c c01a      	RJMP __CFD15
                 __CFD17:
00056d 2777      	CLR  R23
00056e 2355      	TST  R21
00056f f0b9      	BREQ __CFD15
                 __CFD18:
000570 0fee      	LSL  R30
000571 1fff      	ROL  R31
000572 1f66      	ROL  R22
000573 1f77      	ROL  R23
000574 955a      	DEC  R21
000575 f7d1      	BRNE __CFD18
000576 c010      	RJMP __CFD15
                 __CFD11:
000577 2777      	CLR  R23
                 __CFD12:
000578 3058      	CPI  R21,8
000579 f028      	BRLO __CFD13
00057a 2fef      	MOV  R30,R31
00057b 2ff6      	MOV  R31,R22
00057c 2f67      	MOV  R22,R23
00057d 5058      	SUBI R21,8
00057e cff9      	RJMP __CFD12
                 __CFD13:
00057f 2355      	TST  R21
000580 f031      	BREQ __CFD15
                 __CFD14:
000581 9576      	LSR  R23
000582 9567      	ROR  R22
000583 95f7      	ROR  R31
000584 95e7      	ROR  R30
000585 955a      	DEC  R21
000586 f7d1      	BRNE __CFD14
                 __CFD15:
000587 2000      	TST  R0
000588 f40a      	BRPL __CFD16
000589 d129      	RCALL __ANEGD1
                 __CFD16:
00058a 915f      	POP  R21
00058b 9508      	RET
                 
                 __CDF1U:
00058c 9468      	SET
00058d c001      	RJMP __CDF1U0
                 __CDF1:
00058e 94e8      	CLT
                 __CDF1U0:
00058f 9730      	SBIW R30,0
000590 4060      	SBCI R22,0
000591 4070      	SBCI R23,0
000592 f0b1      	BREQ __CDF10
000593 2400      	CLR  R0
000594 f026      	BRTS __CDF11
000595 2377      	TST  R23
000596 f412      	BRPL __CDF11
000597 9400      	COM  R0
000598 d11a      	RCALL __ANEGD1
                 __CDF11:
000599 2e17      	MOV  R1,R23
00059a e17e      	LDI  R23,30
00059b 2011      	TST  R1
                 __CDF12:
00059c f032      	BRMI __CDF13
00059d 957a      	DEC  R23
00059e 0fee      	LSL  R30
00059f 1fff      	ROL  R31
0005a0 1f66      	ROL  R22
0005a1 1c11      	ROL  R1
0005a2 cff9      	RJMP __CDF12
                 __CDF13:
0005a3 2fef      	MOV  R30,R31
0005a4 2ff6      	MOV  R31,R22
0005a5 2d61      	MOV  R22,R1
0005a6 935f      	PUSH R21
0005a7 df8a      	RCALL __REPACK
0005a8 915f      	POP  R21
                 __CDF10:
0005a9 9508      	RET
                 
                 __SWAPACC:
0005aa 934f      	PUSH R20
0005ab 01af      	MOVW R20,R30
0005ac 01fd      	MOVW R30,R26
0005ad 01da      	MOVW R26,R20
0005ae 01ab      	MOVW R20,R22
0005af 01bc      	MOVW R22,R24
0005b0 01ca      	MOVW R24,R20
0005b1 2d40      	MOV  R20,R0
0005b2 2c01      	MOV  R0,R1
0005b3 2e14      	MOV  R1,R20
0005b4 914f      	POP  R20
0005b5 9508      	RET
                 
                 __UADD12:
0005b6 0fea      	ADD  R30,R26
0005b7 1ffb      	ADC  R31,R27
0005b8 1f68      	ADC  R22,R24
0005b9 9508      	RET
                 
                 __NEGMAN1:
0005ba 95e0      	COM  R30
0005bb 95f0      	COM  R31
0005bc 9560      	COM  R22
0005bd 5fef      	SUBI R30,-1
0005be 4fff      	SBCI R31,-1
0005bf 4f6f      	SBCI R22,-1
0005c0 9508      	RET
                 
                 __SUBF12:
0005c1 935f      	PUSH R21
0005c2 df81      	RCALL __UNPACK
0005c3 3890      	CPI  R25,0x80
0005c4 f171      	BREQ __ADDF129
0005c5 e850      	LDI  R21,0x80
0005c6 2615      	EOR  R1,R21
                 
0005c7 c004      	RJMP __ADDF120
                 
                 __ADDF12:
0005c8 935f      	PUSH R21
0005c9 df7a      	RCALL __UNPACK
0005ca 3890      	CPI  R25,0x80
0005cb f139      	BREQ __ADDF129
                 
                 __ADDF120:
0005cc 3870      	CPI  R23,0x80
0005cd f121      	BREQ __ADDF128
                 __ADDF121:
0005ce 2f57      	MOV  R21,R23
0005cf 1b59      	SUB  R21,R25
0005d0 f12b      	BRVS __ADDF1211
0005d1 f412      	BRPL __ADDF122
0005d2 dfd7      	RCALL __SWAPACC
0005d3 cffa      	RJMP __ADDF121
                 __ADDF122:
0005d4 3158      	CPI  R21,24
0005d5 f018      	BRLO __ADDF123
0005d6 27aa      	CLR  R26
0005d7 27bb      	CLR  R27
0005d8 2788      	CLR  R24
                 __ADDF123:
0005d9 3058      	CPI  R21,8
0005da f028      	BRLO __ADDF124
0005db 2fab      	MOV  R26,R27
0005dc 2fb8      	MOV  R27,R24
0005dd 2788      	CLR  R24
0005de 5058      	SUBI R21,8
0005df cff9      	RJMP __ADDF123
                 __ADDF124:
0005e0 2355      	TST  R21
0005e1 f029      	BREQ __ADDF126
                 __ADDF125:
0005e2 9586      	LSR  R24
0005e3 95b7      	ROR  R27
0005e4 95a7      	ROR  R26
0005e5 955a      	DEC  R21
0005e6 f7d9      	BRNE __ADDF125
                 __ADDF126:
0005e7 2d50      	MOV  R21,R0
0005e8 2551      	EOR  R21,R1
0005e9 f072      	BRMI __ADDF127
0005ea dfcb      	RCALL __UADD12
0005eb f438      	BRCC __ADDF129
0005ec 9567      	ROR  R22
0005ed 95f7      	ROR  R31
0005ee 95e7      	ROR  R30
0005ef 9573      	INC  R23
0005f0 f413      	BRVC __ADDF129
0005f1 c020      	RJMP __MAXRES
                 __ADDF128:
0005f2 dfb7      	RCALL __SWAPACC
                 __ADDF129:
0005f3 df3e      	RCALL __REPACK
0005f4 915f      	POP  R21
0005f5 9508      	RET
                 __ADDF1211:
0005f6 f7d8      	BRCC __ADDF128
0005f7 cffb      	RJMP __ADDF129
                 __ADDF127:
0005f8 1bea      	SUB  R30,R26
0005f9 0bfb      	SBC  R31,R27
0005fa 0b68      	SBC  R22,R24
0005fb f051      	BREQ __ZERORES
0005fc f410      	BRCC __ADDF1210
0005fd 9400      	COM  R0
0005fe dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
0005ff 2366      	TST  R22
000600 f392      	BRMI __ADDF129
000601 0fee      	LSL  R30
000602 1fff      	ROL  R31
000603 1f66      	ROL  R22
000604 957a      	DEC  R23
000605 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
000606 27ee      	CLR  R30
000607 27ff      	CLR  R31
000608 2766      	CLR  R22
000609 2777      	CLR  R23
00060a 915f      	POP  R21
00060b 9508      	RET
                 
                 __MINRES:
00060c efef      	SER  R30
00060d efff      	SER  R31
00060e e76f      	LDI  R22,0x7F
00060f ef7f      	SER  R23
000610 915f      	POP  R21
000611 9508      	RET
                 
                 __MAXRES:
000612 efef      	SER  R30
000613 efff      	SER  R31
000614 e76f      	LDI  R22,0x7F
000615 e77f      	LDI  R23,0x7F
000616 915f      	POP  R21
000617 9508      	RET
                 
                 __MULF12:
000618 935f      	PUSH R21
000619 df2a      	RCALL __UNPACK
00061a 3870      	CPI  R23,0x80
00061b f351      	BREQ __ZERORES
00061c 3890      	CPI  R25,0x80
00061d f341      	BREQ __ZERORES
00061e 2401      	EOR  R0,R1
00061f 9408      	SEC
000620 1f79      	ADC  R23,R25
000621 f423      	BRVC __MULF124
000622 f31c      	BRLT __ZERORES
                 __MULF125:
000623 2000      	TST  R0
000624 f33a      	BRMI __MINRES
000625 cfec      	RJMP __MAXRES
                 __MULF124:
000626 920f      	PUSH R0
000627 931f      	PUSH R17
000628 932f      	PUSH R18
000629 933f      	PUSH R19
00062a 934f      	PUSH R20
00062b 2711      	CLR  R17
00062c 2722      	CLR  R18
00062d 2799      	CLR  R25
00062e 9f68      	MUL  R22,R24
00062f 01a0      	MOVW R20,R0
000630 9f8f      	MUL  R24,R31
000631 2d30      	MOV  R19,R0
000632 0d41      	ADD  R20,R1
000633 1f59      	ADC  R21,R25
000634 9f6b      	MUL  R22,R27
000635 0d30      	ADD  R19,R0
000636 1d41      	ADC  R20,R1
000637 1f59      	ADC  R21,R25
000638 9f8e      	MUL  R24,R30
000639 d027      	RCALL __MULF126
00063a 9fbf      	MUL  R27,R31
00063b d025      	RCALL __MULF126
00063c 9f6a      	MUL  R22,R26
00063d d023      	RCALL __MULF126
00063e 9fbe      	MUL  R27,R30
00063f d01d      	RCALL __MULF127
000640 9faf      	MUL  R26,R31
000641 d01b      	RCALL __MULF127
000642 9fae      	MUL  R26,R30
000643 0d11      	ADD  R17,R1
000644 1f29      	ADC  R18,R25
000645 1f39      	ADC  R19,R25
000646 1f49      	ADC  R20,R25
000647 1f59      	ADC  R21,R25
000648 2fe3      	MOV  R30,R19
000649 2ff4      	MOV  R31,R20
00064a 2f65      	MOV  R22,R21
00064b 2f52      	MOV  R21,R18
00064c 914f      	POP  R20
00064d 913f      	POP  R19
00064e 912f      	POP  R18
00064f 911f      	POP  R17
000650 900f      	POP  R0
000651 2366      	TST  R22
000652 f02a      	BRMI __MULF122
000653 0f55      	LSL  R21
000654 1fee      	ROL  R30
000655 1fff      	ROL  R31
000656 1f66      	ROL  R22
000657 c002      	RJMP __MULF123
                 __MULF122:
000658 9573      	INC  R23
000659 f24b      	BRVS __MULF125
                 __MULF123:
00065a decd      	RCALL __ROUND_REPACK
00065b 915f      	POP  R21
00065c 9508      	RET
                 
                 __MULF127:
00065d 0d10      	ADD  R17,R0
00065e 1d21      	ADC  R18,R1
00065f 1f39      	ADC  R19,R25
000660 c002      	RJMP __MULF128
                 __MULF126:
000661 0d20      	ADD  R18,R0
000662 1d31      	ADC  R19,R1
                 __MULF128:
000663 1f49      	ADC  R20,R25
000664 1f59      	ADC  R21,R25
000665 9508      	RET
                 
                 __DIVF21:
000666 935f      	PUSH R21
000667 dedc      	RCALL __UNPACK
000668 3870      	CPI  R23,0x80
000669 f421      	BRNE __DIVF210
00066a 2011      	TST  R1
                 __DIVF211:
00066b f40a      	BRPL __DIVF219
00066c cf9f      	RJMP __MINRES
                 __DIVF219:
00066d cfa4      	RJMP __MAXRES
                 __DIVF210:
00066e 3890      	CPI  R25,0x80
00066f f409      	BRNE __DIVF218
                 __DIVF217:
000670 cf95      	RJMP __ZERORES
                 __DIVF218:
000671 2401      	EOR  R0,R1
000672 9408      	SEC
000673 0b97      	SBC  R25,R23
000674 f41b      	BRVC __DIVF216
000675 f3d4      	BRLT __DIVF217
000676 2000      	TST  R0
000677 cff3      	RJMP __DIVF211
                 __DIVF216:
000678 2f79      	MOV  R23,R25
000679 931f      	PUSH R17
00067a 932f      	PUSH R18
00067b 933f      	PUSH R19
00067c 934f      	PUSH R20
00067d 2411      	CLR  R1
00067e 2711      	CLR  R17
00067f 2722      	CLR  R18
000680 2733      	CLR  R19
000681 2744      	CLR  R20
000682 2755      	CLR  R21
000683 e290      	LDI  R25,32
                 __DIVF212:
000684 17ae      	CP   R26,R30
000685 07bf      	CPC  R27,R31
000686 0786      	CPC  R24,R22
000687 0741      	CPC  R20,R17
000688 f030      	BRLO __DIVF213
000689 1bae      	SUB  R26,R30
00068a 0bbf      	SBC  R27,R31
00068b 0b86      	SBC  R24,R22
00068c 0b41      	SBC  R20,R17
00068d 9408      	SEC
00068e c001      	RJMP __DIVF214
                 __DIVF213:
00068f 9488      	CLC
                 __DIVF214:
000690 1f55      	ROL  R21
000691 1f22      	ROL  R18
000692 1f33      	ROL  R19
000693 1c11      	ROL  R1
000694 1faa      	ROL  R26
000695 1fbb      	ROL  R27
000696 1f88      	ROL  R24
000697 1f44      	ROL  R20
000698 959a      	DEC  R25
000699 f751      	BRNE __DIVF212
00069a 01f9      	MOVW R30,R18
00069b 2d61      	MOV  R22,R1
00069c 914f      	POP  R20
00069d 913f      	POP  R19
00069e 912f      	POP  R18
00069f 911f      	POP  R17
0006a0 2366      	TST  R22
0006a1 f032      	BRMI __DIVF215
0006a2 0f55      	LSL  R21
0006a3 1fee      	ROL  R30
0006a4 1fff      	ROL  R31
0006a5 1f66      	ROL  R22
0006a6 957a      	DEC  R23
0006a7 f243      	BRVS __DIVF217
                 __DIVF215:
0006a8 de7f      	RCALL __ROUND_REPACK
0006a9 915f      	POP  R21
0006aa 9508      	RET
                 
                 __ADDW2R15:
0006ab 2400      	CLR  R0
0006ac 0daf      	ADD  R26,R15
0006ad 1db0      	ADC  R27,R0
0006ae 9508      	RET
                 
                 __ANEGW1:
0006af 95f1      	NEG  R31
0006b0 95e1      	NEG  R30
0006b1 40f0      	SBCI R31,0
0006b2 9508      	RET
                 
                 __ANEGD1:
0006b3 95f0      	COM  R31
0006b4 9560      	COM  R22
0006b5 9570      	COM  R23
0006b6 95e1      	NEG  R30
0006b7 4fff      	SBCI R31,-1
0006b8 4f6f      	SBCI R22,-1
0006b9 4f7f      	SBCI R23,-1
0006ba 9508      	RET
                 
                 __ASRW8:
0006bb 2fef      	MOV  R30,R31
0006bc 27ff      	CLR  R31
0006bd fde7      	SBRC R30,7
0006be efff      	SER  R31
0006bf 9508      	RET
                 
                 __CWD1:
0006c0 2f6f      	MOV  R22,R31
0006c1 0f66      	ADD  R22,R22
0006c2 0b66      	SBC  R22,R22
0006c3 2f76      	MOV  R23,R22
0006c4 9508      	RET
                 
                 __MULW12U:
0006c5 9ffa      	MUL  R31,R26
0006c6 2df0      	MOV  R31,R0
0006c7 9feb      	MUL  R30,R27
0006c8 0df0      	ADD  R31,R0
0006c9 9fea      	MUL  R30,R26
0006ca 2de0      	MOV  R30,R0
0006cb 0df1      	ADD  R31,R1
0006cc 9508      	RET
                 
                 __GETW1P:
0006cd 91ed      	LD   R30,X+
0006ce 91fc      	LD   R31,X
0006cf 9711      	SBIW R26,1
0006d0 9508      	RET
                 
                 __GETD1P:
0006d1 91ed      	LD   R30,X+
0006d2 91fd      	LD   R31,X+
0006d3 916d      	LD   R22,X+
0006d4 917c      	LD   R23,X
0006d5 9713      	SBIW R26,3
0006d6 9508      	RET
                 
                 __PUTDP1:
0006d7 93ed      	ST   X+,R30
0006d8 93fd      	ST   X+,R31
0006d9 936d      	ST   X+,R22
0006da 937c      	ST   X,R23
0006db 9508      	RET
                 
                 __GETD1S0:
0006dc 81e8      	LD   R30,Y
0006dd 81f9      	LDD  R31,Y+1
0006de 816a      	LDD  R22,Y+2
0006df 817b      	LDD  R23,Y+3
0006e0 9508      	RET
                 
                 __PUTD1S0:
0006e1 83e8      	ST   Y,R30
0006e2 83f9      	STD  Y+1,R31
0006e3 836a      	STD  Y+2,R22
0006e4 837b      	STD  Y+3,R23
0006e5 9508      	RET
                 
                 __PUTPARD1L:
0006e6 e060      	LDI  R22,0
0006e7 e070      	LDI  R23,0
                 __PUTPARD1:
0006e8 937a      	ST   -Y,R23
0006e9 936a      	ST   -Y,R22
0006ea 93fa      	ST   -Y,R31
0006eb 93ea      	ST   -Y,R30
0006ec 9508      	RET
                 
                 __SWAPD12:
0006ed 2e18      	MOV  R1,R24
0006ee 2f86      	MOV  R24,R22
0006ef 2d61      	MOV  R22,R1
0006f0 2e19      	MOV  R1,R25
0006f1 2f97      	MOV  R25,R23
0006f2 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
0006f3 2e1b      	MOV  R1,R27
0006f4 2fbf      	MOV  R27,R31
0006f5 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
0006f6 2e1a      	MOV  R1,R26
0006f7 2fae      	MOV  R26,R30
0006f8 2de1      	MOV  R30,R1
0006f9 9508      	RET
                 
                 __SAVELOCR6:
0006fa 935a      	ST   -Y,R21
                 __SAVELOCR5:
0006fb 934a      	ST   -Y,R20
                 __SAVELOCR4:
0006fc 933a      	ST   -Y,R19
                 __SAVELOCR3:
0006fd 932a      	ST   -Y,R18
                 __SAVELOCR2:
0006fe 931a      	ST   -Y,R17
0006ff 930a      	ST   -Y,R16
000700 9508      	RET
                 
                 __LOADLOCR6:
000701 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000702 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000703 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000704 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000705 8119      	LDD  R17,Y+1
000706 8108      	LD   R16,Y
000707 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
000708 0fac      	ADD  R26,R28
000709 1fbd      	ADC  R27,R29
                 __INITLOC0:
00070a 9005      	LPM  R0,Z+
00070b 920d      	ST   X+,R0
00070c 958a      	DEC  R24
00070d f7e1      	BRNE __INITLOC0
00070e 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :  38 r1 :  31 r2 :   0 r3 :   0 r4 :   4 r5 :   3 r6 :   3 r7 :   1 
r8 :   0 r9 :   2 r10:   0 r11:   3 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  21 r17:  38 r18:  36 r19:  52 r20:  46 r21:  80 r22:  66 r23:  57 
r24:  39 r25:  35 r26:  92 r27:  58 r28:  30 r29:   2 r30: 389 r31: 184 
x  :  49 y  : 242 z  :  15 
Registers used: 28 out of 35 (80.0%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  21 add   :  14 
adiw  :  24 and   :   2 andi  :   6 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   4 brcs  :   4 break :   0 breq  :  32 
brge  :  10 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  14 
brlt  :   4 brmi  :   8 brne  :  35 brpl  :   6 brsh  :   2 brtc  :   1 
brts  :   1 brvc  :   4 brvs  :   4 bset  :   1 bst   :   0 call  :  90 
cbi   :   1 cbr   :   0 clc   :   1 clh   :   0 cli   :   1 cln   :   0 
clr   :  32 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   8 
cp    :   6 cpc   :   9 cpi   :  62 cpse  :   0 dec   :   9 des   :   0 
elpm  :   0 eor   :  11 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   1 
ijmp  :   0 in    :  24 inc   :   6 jmp   :  41 ld    :  39 ldd   :  86 
ldi   : 168 lds   :   5 lpm   :  11 lsl   :  11 lsr   :   3 mov   :  69 
movw  :  41 mul   :  13 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 
or    :   1 ori   :   1 out   :  19 pop   :  41 push  :  41 rcall :  27 
ret   :  56 reti  :   4 rjmp  :  82 rol   :  24 ror   :  13 sbc   :   7 
sbci  :  21 sbi   :   3 sbic  :   0 sbis  :   2 sbiw  :  25 sbr   :   0 
sbrc  :   2 sbrs  :   1 sec   :   3 seh   :   0 sei   :   0 sen   :   0 
ser   :  10 ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    : 123 std   :  48 sts   :  12 sub   :   4 subi  :  23 
swap  :   0 tst   :  16 wdr   :   1 
Instructions used: 76 out of 117 (65.0%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000e1e   3422    192   3614  131072   2.8%
[.dseg] 0x000100 0x00057c      0    124    124    4351   2.8%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 10 warnings
