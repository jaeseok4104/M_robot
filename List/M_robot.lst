
AVRASM ver. 2.1.30  C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm Fri Jan 31 16:45:43 2020

C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1061): warning: Register r5 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1062): warning: Register r4 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1063): warning: Register r7 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1064): warning: Register r6 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1065): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega128
                 ;Program type             : Application
                 ;Clock frequency          : 14.745600 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : float, width, precision
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 1024 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : No
                 ;global 'const' stored in FLASH: Yes
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4351
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _TIMER2_OVERFLOW=R5
                 	.DEF _PACKET_BUFF_IDX=R4
                 	.DEF _TIMER0_OVERFLOW=R7
                 	.DEF _VELOCITY_BUFF_IDX=R6
                 	.DEF _CHECK_GETS=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0093 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0255 	JMP  _timer2_comp
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0259 	JMP  _timer0_comp
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 020e 	JMP  _usart0_rxc
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0229 	JMP  _usart1_rxc
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _0x45:
000046 0000
000047 0000
000048 0000
000049 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00004a 0000
00004b 0000
00004c 0000
00004d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00004e 0000
00004f 0000
000050 0000
000051 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000052 0000
000053 0000
000054 0000
000055 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000056 0000
000057 0000
000058 0000
000059 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00005a 0000
00005b 0000
00005c 0000
00005d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00005e 0000
00005f 0000
000060 0000
000061 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000062 0000
000063 0000
000064 0000
000065 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000066 0000
000067 0000
000068 0000
000069 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00006a 0000
00006b 0000
00006c 0000
00006d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00006e 0000
00006f 0000
000070 0000
000071 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000072 0000
000073 0000
000074 0000
000075 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000076 0000
000077 0000
000078 0000
000079 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00007a 0000
00007b 0000      	.DB  0x0,0x0,0x0,0x0
                 _0x5D:
00007c 0000
00007d 0000
00007e 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0
                 _0x0:
00007f 253c
000080 2c64
000081 6425
000082 003e      	.DB  0x3C,0x25,0x64,0x2C,0x25,0x64,0x3E,0x0
                 _0x2000000:
000083 4e2d
000084 4e41
C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1130): warning: .cseg .db misalignment - padding zero byte
000085 0000      	.DB  0x2D,0x4E,0x41,0x4E,0x0
                 _0x2080060:
C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1132): warning: .cseg .db misalignment - padding zero byte
000086 0001      	.DB  0x1
                 _0x2080000:
000087 4e2d
000088 4e41
000089 4900
00008a 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1135): warning: .cseg .db misalignment - padding zero byte
00008b 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00008c 0006      	.DW  0x06
00008d 0004      	.DW  0x04
00008e 00f8      	.DW  _0x5D*2
                 
00008f 0001      	.DW  0x01
000090 0578      	.DW  __seed_G104
000091 010c      	.DW  _0x2080060*2
                 
                 _0xFFFFFFFF:
000092 0000      	.DW  0
                 
                 __RESET:
000093 94f8      	CLI
000094 27ee      	CLR  R30
000095 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000096 e0f1      	LDI  R31,1
000097 bff5      	OUT  MCUCR,R31
000098 bfe5      	OUT  MCUCR,R30
000099 93e0 006c 	STS  XMCRB,R30
                 
                 ;DISABLE WATCHDOG
00009b e1f8      	LDI  R31,0x18
00009c bdf1      	OUT  WDTCR,R31
00009d bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
00009e e08d      	LDI  R24,(14-2)+1
00009f e0a2      	LDI  R26,2
0000a0 27bb      	CLR  R27
                 __CLEAR_REG:
0000a1 93ed      	ST   X+,R30
0000a2 958a      	DEC  R24
0000a3 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000a4 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000a5 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000a6 e0a0      	LDI  R26,LOW(__SRAM_START)
0000a7 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
0000a8 93ed      	ST   X+,R30
0000a9 9701      	SBIW R24,1
0000aa f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000ab e1e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000ac e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000ad 9185      	LPM  R24,Z+
0000ae 9195      	LPM  R25,Z+
0000af 9700      	SBIW R24,0
0000b0 f061      	BREQ __GLOBAL_INI_END
0000b1 91a5      	LPM  R26,Z+
0000b2 91b5      	LPM  R27,Z+
0000b3 9005      	LPM  R0,Z+
0000b4 9015      	LPM  R1,Z+
0000b5 01bf      	MOVW R22,R30
0000b6 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000b7 9005      	LPM  R0,Z+
0000b8 920d      	ST   X+,R0
0000b9 9701      	SBIW R24,1
0000ba f7e1      	BRNE __GLOBAL_INI_LOOP
0000bb 01fb      	MOVW R30,R22
0000bc cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
0000bd bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000be efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000bf bfed      	OUT  SPL,R30
0000c0 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000c1 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000c2 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000c3 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000c4 940c 025f 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdio.h>
                 ;#include <delay.h>
                 ;
                 ;#define bps_115200 0x0007
                 ;
                 ;#define POLYNORMIAL 0xA001
                 ;
                 ;#define CHARACTER3_5 25
                 ;#define TRUE 0
                 ;#define FALSE 1
                 ;
                 ;#define R 0x01
                 ;#define L 0x02
                 ;#define START 1
                 ;#define STOP 2
                 ;
                 ;#define Length 0.29
                 ;#define Gearratio 25
                 ;
                 ;unsigned char TIMER2_OVERFLOW = 0;
                 ;unsigned char PACKET_BUFF[100] = {0,};
                 ;unsigned char PACKET_BUFF_IDX = 0;
                 ;
                 ;unsigned char TIMER0_OVERFLOW = 0;
                 ;unsigned char VELOCITY_BUFF[20] = {0,};
                 ;unsigned char VELOCITY_BUFF_IDX = 0;
                 ;unsigned char CHECK_GETS = 0;
                 ;
                 ;void usart1_init(int bps)
                 ; 0000 001F {
                 
                 	.CSEG
                 _usart1_init:
                 ; 0000 0020     UCSR1A = 0x00;
                 ;	bps -> Y+0
0000c6 e0e0      	LDI  R30,LOW(0)
0000c7 93e0 009b 	STS  155,R30
                 ; 0000 0021     UCSR1B = (1<<RXEN1)|(1<<TXEN1)|(1<<RXCIE1); // RXCIE1 bit is recevie interrupt allow
0000c9 e9e8      	LDI  R30,LOW(152)
0000ca 93e0 009a 	STS  154,R30
                 ; 0000 0022     UCSR1C = (1<<UCSZ11)|(1<<UCSZ10);
0000cc e0e6      	LDI  R30,LOW(6)
0000cd 93e0 009d 	STS  157,R30
                 ; 0000 0023     UCSR1C &= ~(1<<UMSEL1);
0000cf 91e0 009d 	LDS  R30,157
0000d1 7bef      	ANDI R30,0xBF
0000d2 93e0 009d 	STS  157,R30
                 ; 0000 0024 
                 ; 0000 0025     UBRR1H = (unsigned char)((bps>>8)  & 0x00ff);
0000d4 81e8      	LD   R30,Y
0000d5 81f9      	LDD  R31,Y+1
0000d6 940e 06d6 	CALL __ASRW8
0000d8 93e0 0098 	STS  152,R30
                 ; 0000 0026     UBRR1L = (unsigned char)(bps & 0x00ff);
0000da 81e8      	LD   R30,Y
0000db 93e0 0099 	STS  153,R30
                 ; 0000 0027 }
0000dd c014      	RJMP _0x20A0005
                 ;
                 ;void usart0_init(int bps)
                 ; 0000 002A {
                 _usart0_init:
                 ; 0000 002B     UCSR0A = 0x00;
                 ;	bps -> Y+0
0000de e0e0      	LDI  R30,LOW(0)
0000df b9eb      	OUT  0xB,R30
                 ; 0000 002C     UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0); // RXCIE1 bit is recevie interrupt allow
0000e0 e9e8      	LDI  R30,LOW(152)
0000e1 b9ea      	OUT  0xA,R30
                 ; 0000 002D     UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
0000e2 e0e6      	LDI  R30,LOW(6)
0000e3 93e0 0095 	STS  149,R30
                 ; 0000 002E     UCSR0C &= ~(1<<UMSEL0);
0000e5 91e0 0095 	LDS  R30,149
0000e7 7bef      	ANDI R30,0xBF
0000e8 93e0 0095 	STS  149,R30
                 ; 0000 002F 
                 ; 0000 0030     UBRR0H = (unsigned char)((bps>>8)  & 0x00ff);
0000ea 81e8      	LD   R30,Y
0000eb 81f9      	LDD  R31,Y+1
0000ec 940e 06d6 	CALL __ASRW8
0000ee 93e0 0090 	STS  144,R30
                 ; 0000 0031     UBRR0L = (unsigned char)(bps & 0x00ff);
0000f0 81e8      	LD   R30,Y
0000f1 b9e9      	OUT  0x9,R30
                 ; 0000 0032 }
                 _0x20A0005:
0000f2 9622      	ADIW R28,2
0000f3 9508      	RET
                 ;
                 ;void timer2_init(void)
                 ; 0000 0035 {
                 _timer2_init:
                 ; 0000 0036     //TIMER2
                 ; 0000 0037     TCCR2 = (1<<WGM21)|(1<<CS22)|(1<<CS20);// CTC모드, 1024분주
0000f4 e0ed      	LDI  R30,LOW(13)
0000f5 bde5      	OUT  0x25,R30
                 ; 0000 0038 
                 ; 0000 0039     OCR2 = 40;
0000f6 e2e8      	LDI  R30,LOW(40)
0000f7 bde3      	OUT  0x23,R30
                 ; 0000 003A     TIMSK = (1<<OCIE2)|(1<<OCIE0);
0000f8 c004      	RJMP _0x20A0004
                 ; 0000 003B     //TIMSK = (1<<OCIE2);
                 ; 0000 003C }
                 ;void timer0_init(void)
                 ; 0000 003E {
                 _timer0_init:
                 ; 0000 003F     TCCR0 = (1<<WGM01)|(1<<CS02)|(1<<CS01)|(1<<CS00); // CTC모드, 1024분주
0000f9 e0ef      	LDI  R30,LOW(15)
0000fa bfe3      	OUT  0x33,R30
                 ; 0000 0040     OCR0 = 144;
0000fb e9e0      	LDI  R30,LOW(144)
0000fc bfe1      	OUT  0x31,R30
                 ; 0000 0041     TIMSK = (1<<OCIE2)|(1<<OCIE0);
                 _0x20A0004:
0000fd e8e2      	LDI  R30,LOW(130)
0000fe bfe7      	OUT  0x37,R30
                 ; 0000 0042 }
0000ff 9508      	RET
                 ;
                 ;void putch_USART1(char data)
                 ; 0000 0045 {
                 ; 0000 0046     while(!(UCSR1A & (1<<UDRE1))); // UDRE flag is USART Data Register Empty
                 ;	data -> Y+0
                 ; 0000 0047     UDR1 = data;
                 ; 0000 0048 }
                 ;
                 ;//USART 문자열 송신
                 ;void puts_USART1(char *str,char IDX)
                 ; 0000 004C {
                 ; 0000 004D     unsigned char i = 0;
                 ; 0000 004E 
                 ; 0000 004F     for(i = 0;i<IDX;i++)
                 ;	*str -> Y+2
                 ;	IDX -> Y+1
                 ;	i -> R17
                 ; 0000 0050     {
                 ; 0000 0051         putch_USART1(*(str+i));
                 ; 0000 0052     }
                 ; 0000 0053 
                 ; 0000 0054     for(i = 0; i<IDX; i++)
                 ; 0000 0055     {
                 ; 0000 0056         *(str+i) = 0;
                 ; 0000 0057     }
                 ; 0000 0058 }
                 ;
                 ;// void puts_USART1(char *str,char IDX)
                 ;// {
                 ;//     unsigned char i = 0;
                 ;
                 ;//     while(*str != 0)
                 ;//     {
                 ;//         putch_USART1(*(str+i));
                 ;//         i++;
                 ;//     }
                 ;
                 ;//     for(i = 0; i<IDX; i++)
                 ;//     {
                 ;//         *(str+i) = 0;
                 ;//     }
                 ;// }
                 ;
                 ;void puts_Modbus1(char *str,char IDX)
                 ; 0000 006B {
                 ; 0000 006C     unsigned char i = 0;
                 ; 0000 006D     UCSR0B &= ~(1<<RXEN0);
                 ;	*str -> Y+2
                 ;	IDX -> Y+1
                 ;	i -> R17
                 ; 0000 006E     if(TIMER2_OVERFLOW>0)
                 ; 0000 006F     {
                 ; 0000 0070         for(i = 0;i<IDX-1;i++) putch_USART1(*(str+i));
                 ; 0000 0072 for(i = 0; i<IDX; i++) *(str+i) = 0;
                 ; 0000 0073 }
                 ; 0000 0074     UCSR0B |= (1<<RXEN0);
                 ; 0000 0075 }
                 ;
                 ;void putch_USART0(char data)
                 ; 0000 0078 {
                 _putch_USART0:
                 ; 0000 0079     while(!(UCSR0A & (1<<UDRE0))); // UDRE flag is USART Data Register Empty
                 ;	data -> Y+0
                 _0x13:
000100 9b5d      	SBIS 0xB,5
000101 cffe      	RJMP _0x13
                 ; 0000 007A     UDR0 = data;
000102 81e8      	LD   R30,Y
000103 b9ec      	OUT  0xC,R30
                 ; 0000 007B }
000104 9621      	ADIW R28,1
000105 9508      	RET
                 ;
                 ;void puts_USART0(char *str,char IDX)
                 ; 0000 007E {
                 ; 0000 007F     //PACKET_BUFF[PACKET_BUFF_IDX] = 0;
                 ; 0000 0080     unsigned char i = 0;
                 ; 0000 0081     for(i = 0;i<IDX-1;i++)
                 ;	*str -> Y+2
                 ;	IDX -> Y+1
                 ;	i -> R17
                 ; 0000 0082     {
                 ; 0000 0083         putch_USART1(*(str+i));
                 ; 0000 0084     }
                 ; 0000 0085 
                 ; 0000 0086     for(i = 0; i<IDX; i++)
                 ; 0000 0087     {
                 ; 0000 0088         *(str+i) = 0;
                 ; 0000 0089     }
                 ; 0000 008A }
                 ;
                 ;unsigned short CRC16(unsigned char *puchMsg, int usDataLen)
                 ; 0000 008D {
                 _CRC16:
                 ; 0000 008E     int i;
                 ; 0000 008F     unsigned short crc, flag;
                 ; 0000 0090     crc = 0xffff;
000106 940e 0715 	CALL __SAVELOCR6
                 ;	*puchMsg -> Y+8
                 ;	usDataLen -> Y+6
                 ;	i -> R16,R17
                 ;	crc -> R18,R19
                 ;	flag -> R20,R21
                +
000108 ef2f     +LDI R18 , LOW ( - 1 )
000109 ef3f     +LDI R19 , HIGH ( - 1 )
                 	__GETWRN 18,19,-1
                 ; 0000 0091 
                 ; 0000 0092     while(usDataLen--){
                 _0x1C:
00010a 81ee      	LDD  R30,Y+6
00010b 81ff      	LDD  R31,Y+6+1
00010c 9731      	SBIW R30,1
00010d 83ee      	STD  Y+6,R30
00010e 83ff      	STD  Y+6+1,R31
00010f 9631      	ADIW R30,1
000110 f0f9      	BREQ _0x1E
                 ; 0000 0093         crc ^= *puchMsg++;
000111 85a8      	LDD  R26,Y+8
000112 85b9      	LDD  R27,Y+8+1
000113 91ed      	LD   R30,X+
000114 87a8      	STD  Y+8,R26
000115 87b9      	STD  Y+8+1,R27
000116 e0f0      	LDI  R31,0
                +
000117 272e     +EOR R18 , R30
000118 273f     +EOR R19 , R31
                 	__EORWRR 18,19,30,31
                 ; 0000 0094 
                 ; 0000 0095         for (i=0; i<8; i++){
                +
000119 e000     +LDI R16 , LOW ( 0 )
00011a e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x20:
                +
00011b 3008     +CPI R16 , LOW ( 8 )
00011c e0e0     +LDI R30 , HIGH ( 8 )
00011d 071e     +CPC R17 , R30
                 	__CPWRN 16,17,8
00011e f484      	BRGE _0x21
                 ; 0000 0096             flag = crc & 0x0001;
00011f 01f9      	MOVW R30,R18
000120 70e1      	ANDI R30,LOW(0x1)
000121 70f0      	ANDI R31,HIGH(0x1)
000122 01af      	MOVW R20,R30
                 ; 0000 0097             crc >>= 1;
000123 9536      	LSR  R19
000124 9527      	ROR  R18
                 ; 0000 0098             if(flag) crc ^= POLYNORMIAL;
000125 2e04      	MOV  R0,R20
000126 2a05      	OR   R0,R21
000127 f021      	BREQ _0x22
000128 e0e1      	LDI  R30,LOW(40961)
000129 eaf0      	LDI  R31,HIGH(40961)
                +
00012a 272e     +EOR R18 , R30
00012b 273f     +EOR R19 , R31
                 	__EORWRR 18,19,30,31
                 ; 0000 0099         }
                 _0x22:
                +
00012c 5f0f     +SUBI R16 , LOW ( - 1 )
00012d 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00012e cfec      	RJMP _0x20
                 _0x21:
                 ; 0000 009A     }
00012f cfda      	RJMP _0x1C
                 _0x1E:
                 ; 0000 009B     return crc;
000130 01f9      	MOVW R30,R18
000131 940e 071c 	CALL __LOADLOCR6
000133 962a      	ADIW R28,10
000134 9508      	RET
                 ; 0000 009C }
                 ;
                 ;int RTU_WriteOperate0(char device_address,int starting_address,int data)
                 ; 0000 009F {
                 _RTU_WriteOperate0:
                 ; 0000 00A0     char protocol[8];
                 ; 0000 00A1     unsigned short crc16;
                 ; 0000 00A2     int i=0;
                 ; 0000 00A3     //PACKET_BUFF_IDX = 0;
                 ; 0000 00A4 
                 ; 0000 00A5     protocol[0]=device_address;
000135 9728      	SBIW R28,8
000136 940e 0717 	CALL __SAVELOCR4
                 ;	device_address -> Y+16
                 ;	starting_address -> Y+14
                 ;	data -> Y+12
                 ;	protocol -> Y+4
                 ;	crc16 -> R16,R17
                 ;	i -> R18,R19
                +
000138 e020     +LDI R18 , LOW ( 0 )
000139 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
00013a 89e8      	LDD  R30,Y+16
00013b 83ec      	STD  Y+4,R30
                 ; 0000 00A6     protocol[1]=0x06;
00013c e0e6      	LDI  R30,LOW(6)
00013d 83ed      	STD  Y+5,R30
                 ; 0000 00A7     protocol[2]=((starting_address>>8)  & 0x00ff);
00013e 85ee      	LDD  R30,Y+14
00013f 85ff      	LDD  R31,Y+14+1
000140 940e 06d6 	CALL __ASRW8
000142 83ee      	STD  Y+6,R30
                 ; 0000 00A8     protocol[3]=((starting_address)     & 0x00ff);
000143 85ee      	LDD  R30,Y+14
000144 83ef      	STD  Y+7,R30
                 ; 0000 00A9     protocol[4]=((data>>8)              & 0x00ff);
000145 85ec      	LDD  R30,Y+12
000146 85fd      	LDD  R31,Y+12+1
000147 940e 06d6 	CALL __ASRW8
000149 87e8      	STD  Y+8,R30
                 ; 0000 00AA     protocol[5]=((data)                 & 0x00ff);
00014a 85ec      	LDD  R30,Y+12
00014b 87e9      	STD  Y+9,R30
                 ; 0000 00AB     protocol[6]=0;
00014c e0e0      	LDI  R30,LOW(0)
00014d 87ea      	STD  Y+10,R30
                 ; 0000 00AC     protocol[7]=0;
00014e 87eb      	STD  Y+11,R30
                 ; 0000 00AD 
                 ; 0000 00AE     crc16 = CRC16(protocol, 6);
00014f 01fe      	MOVW R30,R28
000150 9634      	ADIW R30,4
000151 93fa      	ST   -Y,R31
000152 93ea      	ST   -Y,R30
000153 e0e6      	LDI  R30,LOW(6)
000154 e0f0      	LDI  R31,HIGH(6)
000155 93fa      	ST   -Y,R31
000156 93ea      	ST   -Y,R30
000157 dfae      	RCALL _CRC16
000158 018f      	MOVW R16,R30
                 ; 0000 00AF 
                 ; 0000 00B0     protocol[6] = (unsigned char)((crc16>>0) & 0x00ff);
000159 01f8      	MOVW R30,R16
00015a 87ea      	STD  Y+10,R30
                 ; 0000 00B1     protocol[7] = (unsigned char)((crc16>>8) & 0x00ff);
                +
00015b 871b     +STD Y + 11 , R17
                 	__PUTBSR 17,11
                 ; 0000 00B2 
                 ; 0000 00B3 
                 ; 0000 00B4     for(i=0;i<8;i++)
                +
00015c e020     +LDI R18 , LOW ( 0 )
00015d e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x24:
                +
00015e 3028     +CPI R18 , LOW ( 8 )
00015f e0e0     +LDI R30 , HIGH ( 8 )
000160 073e     +CPC R19 , R30
                 	__CPWRN 18,19,8
000161 f454      	BRGE _0x25
                 ; 0000 00B5     {
                 ; 0000 00B6         putch_USART0(*(protocol+i));
000162 01de      	MOVW R26,R28
000163 9614      	ADIW R26,4
000164 0fa2      	ADD  R26,R18
000165 1fb3      	ADC  R27,R19
000166 91ec      	LD   R30,X
000167 93ea      	ST   -Y,R30
000168 df97      	RCALL _putch_USART0
                 ; 0000 00B7     }
                +
000169 5f2f     +SUBI R18 , LOW ( - 1 )
00016a 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00016b cff2      	RJMP _0x24
                 _0x25:
                 ; 0000 00B8 }
00016c 940e 071e 	CALL __LOADLOCR4
00016e 9661      	ADIW R28,17
00016f 9508      	RET
                 ;
                 ;int RTU_WriteOperate1(char device_address,int starting_address,int data)
                 ; 0000 00BB {
                 ; 0000 00BC     char protocol[8];
                 ; 0000 00BD     unsigned short crc16;
                 ; 0000 00BE     int i=0;
                 ; 0000 00BF    // PACKET_BUFF_IDX = 0;
                 ; 0000 00C0 
                 ; 0000 00C1     protocol[0]=device_address;
                 ;	device_address -> Y+16
                 ;	starting_address -> Y+14
                 ;	data -> Y+12
                 ;	protocol -> Y+4
                 ;	crc16 -> R16,R17
                 ;	i -> R18,R19
                 ; 0000 00C2     protocol[1]=0x06;
                 ; 0000 00C3     protocol[2]=((starting_address>>8)  & 0x00ff);
                 ; 0000 00C4     protocol[3]=((starting_address)     & 0x00ff);
                 ; 0000 00C5     protocol[4]=((data>>8)              & 0x00ff);
                 ; 0000 00C6     protocol[5]=((data)                 & 0x00ff);
                 ; 0000 00C7     protocol[6]=0;
                 ; 0000 00C8     protocol[7]=0;
                 ; 0000 00C9 
                 ; 0000 00CA     crc16 = CRC16(protocol, 6);
                 ; 0000 00CB 
                 ; 0000 00CC     protocol[6] = (unsigned char)((crc16>>0) & 0x00ff);
                 ; 0000 00CD     protocol[7] = (unsigned char)((crc16>>8) & 0x00ff);
                 ; 0000 00CE 
                 ; 0000 00CF 
                 ; 0000 00D0     for(i=0;i<8;i++)
                 ; 0000 00D1     {
                 ; 0000 00D2         putch_USART1(*(protocol+i));
                 ; 0000 00D3     }
                 ; 0000 00D4 }
                 ;
                 ;int RTU_ReedOperate0(char device_address,int starting_address,int data)
                 ; 0000 00D7 {
                 ; 0000 00D8     char protocol[8];
                 ; 0000 00D9     unsigned short crc16;
                 ; 0000 00DA     int i=0;
                 ; 0000 00DB     //PACKET_BUFF_IDX = 0;
                 ; 0000 00DC 
                 ; 0000 00DD     protocol[0]=device_address;
                 ;	device_address -> Y+16
                 ;	starting_address -> Y+14
                 ;	data -> Y+12
                 ;	protocol -> Y+4
                 ;	crc16 -> R16,R17
                 ;	i -> R18,R19
                 ; 0000 00DE     protocol[1]=0x03;
                 ; 0000 00DF     protocol[2]=((starting_address>>8)  & 0x00ff);
                 ; 0000 00E0     protocol[3]=((starting_address)     & 0x00ff);
                 ; 0000 00E1     protocol[4]=((data>>8)              & 0x00ff);
                 ; 0000 00E2     protocol[5]=((data)                 & 0x00ff);
                 ; 0000 00E3     protocol[6]=0;
                 ; 0000 00E4     protocol[7]=0;
                 ; 0000 00E5 
                 ; 0000 00E6     crc16 = CRC16(protocol, 6);
                 ; 0000 00E7 
                 ; 0000 00E8     protocol[6] = (unsigned char)((crc16>>0) & 0x00ff);
                 ; 0000 00E9     protocol[7] = (unsigned char)((crc16>>8) & 0x00ff);
                 ; 0000 00EA 
                 ; 0000 00EB 
                 ; 0000 00EC     for(i=0;i<8;i++)
                 ; 0000 00ED     {
                 ; 0000 00EE         putch_USART0(*(protocol+i));
                 ; 0000 00EF     }
                 ; 0000 00F0 }
                 ;
                 ;void Make_MSPEED(float* _velocity, float* _angularV, int* R_RPM, int* L_RPM)
                 ; 0000 00F3 {
                 _Make_MSPEED:
                 ; 0000 00F4     float VelocityR = 0;
                 ; 0000 00F5     float VelocityL = 0;
                 ; 0000 00F6 
                 ; 0000 00F7     if(*_velocity>=0){
000170 9728      	SBIW R28,8
000171 e0e0      	LDI  R30,LOW(0)
000172 83e8      	ST   Y,R30
000173 83e9      	STD  Y+1,R30
000174 83ea      	STD  Y+2,R30
000175 83eb      	STD  Y+3,R30
000176 83ec      	STD  Y+4,R30
000177 83ed      	STD  Y+5,R30
000178 83ee      	STD  Y+6,R30
000179 83ef      	STD  Y+7,R30
                 ;	*_velocity -> Y+14
                 ;	*_angularV -> Y+12
                 ;	*R_RPM -> Y+10
                 ;	*L_RPM -> Y+8
                 ;	VelocityR -> Y+4
                 ;	VelocityL -> Y+0
00017a 940e 04b6 	CALL SUBOPT_0x0
00017c 2377      	TST  R23
00017d f042      	BRMI _0x2C
                 ; 0000 00F8         *_angularV = -(*_angularV);
00017e 940e 04bb 	CALL SUBOPT_0x1
000180 940e 053d 	CALL __ANEGF1
000182 85ac      	LDD  R26,Y+12
000183 85bd      	LDD  R27,Y+12+1
000184 940e 06f2 	CALL __PUTDP1
                 ; 0000 00F9     }
                 ; 0000 00FA 
                 ; 0000 00FB     VelocityR = *_velocity+(*_angularV*Length)/4;
                 _0x2C:
000186 940e 04b6 	CALL SUBOPT_0x0
000188 937f      	PUSH R23
000189 936f      	PUSH R22
00018a 93ff      	PUSH R31
00018b 93ef      	PUSH R30
00018c 940e 04bb 	CALL SUBOPT_0x1
00018e 940e 04c0 	CALL SUBOPT_0x2
000190 91af      	POP  R26
000191 91bf      	POP  R27
000192 918f      	POP  R24
000193 919f      	POP  R25
000194 940e 05e3 	CALL __ADDF12
                +
000196 83ec     +STD Y + 4 , R30
000197 83fd     +STD Y + 4 + 1 , R31
000198 836e     +STD Y + 4 + 2 , R22
000199 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
                 ; 0000 00FC     VelocityL = *_velocity-(*_angularV*Length)/4;
00019a 940e 04b6 	CALL SUBOPT_0x0
00019c 937f      	PUSH R23
00019d 936f      	PUSH R22
00019e 93ff      	PUSH R31
00019f 93ef      	PUSH R30
0001a0 940e 04bb 	CALL SUBOPT_0x1
0001a2 940e 04c0 	CALL SUBOPT_0x2
0001a4 91af      	POP  R26
0001a5 91bf      	POP  R27
0001a6 918f      	POP  R24
0001a7 919f      	POP  R25
0001a8 940e 0708 	CALL __SWAPD12
0001aa 940e 05dc 	CALL __SUBF12
0001ac 940e 06fc 	CALL __PUTD1S0
                 ; 0000 00FD 
                 ; 0000 00FE     *R_RPM = (int)(152.788*VelocityR*Gearratio);
                +
0001ae 81ec     +LDD R30 , Y + 4
0001af 81fd     +LDD R31 , Y + 4 + 1
0001b0 816e     +LDD R22 , Y + 4 + 2
0001b1 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
0001b2 940e 04cf 	CALL SUBOPT_0x3
0001b4 85aa      	LDD  R26,Y+10
0001b5 85bb      	LDD  R27,Y+10+1
0001b6 93ed      	ST   X+,R30
0001b7 93fc      	ST   X,R31
                 ; 0000 00FF     *L_RPM = (int)(152.788*VelocityL*Gearratio);
0001b8 940e 06f7 	CALL __GETD1S0
0001ba 940e 04cf 	CALL SUBOPT_0x3
0001bc 85a8      	LDD  R26,Y+8
0001bd 85b9      	LDD  R27,Y+8+1
0001be 93ed      	ST   X+,R30
0001bf 93fc      	ST   X,R31
                 ; 0000 0100 
                 ; 0000 0101     if( ((*R_RPM<300)&&(*R_RPM>-300))&&((*L_RPM<300)&&(*L_RPM>-300))){
0001c0 85aa      	LDD  R26,Y+10
0001c1 85bb      	LDD  R27,Y+10+1
0001c2 940e 06e8 	CALL __GETW1P
0001c4 32ec      	CPI  R30,LOW(0x12C)
0001c5 e0a1      	LDI  R26,HIGH(0x12C)
0001c6 07fa      	CPC  R31,R26
0001c7 f434      	BRGE _0x2E
0001c8 01df      	MOVW R26,R30
0001c9 ede4      	LDI  R30,LOW(65236)
0001ca effe      	LDI  R31,HIGH(65236)
0001cb 17ea      	CP   R30,R26
0001cc 07fb      	CPC  R31,R27
0001cd f00c      	BRLT _0x2F
                 _0x2E:
0001ce c014      	RJMP _0x30
                 _0x2F:
0001cf 85a8      	LDD  R26,Y+8
0001d0 85b9      	LDD  R27,Y+8+1
0001d1 940e 06e8 	CALL __GETW1P
0001d3 32ec      	CPI  R30,LOW(0x12C)
0001d4 e0a1      	LDI  R26,HIGH(0x12C)
0001d5 07fa      	CPC  R31,R26
0001d6 f454      	BRGE _0x31
0001d7 85a8      	LDD  R26,Y+8
0001d8 85b9      	LDD  R27,Y+8+1
0001d9 940e 06e8 	CALL __GETW1P
0001db 01df      	MOVW R26,R30
0001dc ede4      	LDI  R30,LOW(65236)
0001dd effe      	LDI  R31,HIGH(65236)
0001de 17ea      	CP   R30,R26
0001df 07fb      	CPC  R31,R27
0001e0 f00c      	BRLT _0x32
                 _0x31:
0001e1 c001      	RJMP _0x30
                 _0x32:
0001e2 c001      	RJMP _0x33
                 _0x30:
0001e3 c00a      	RJMP _0x2D
                 _0x33:
                 ; 0000 0102         *R_RPM = 0;
0001e4 85aa      	LDD  R26,Y+10
0001e5 85bb      	LDD  R27,Y+10+1
0001e6 e0e0      	LDI  R30,LOW(0)
0001e7 e0f0      	LDI  R31,HIGH(0)
0001e8 93ed      	ST   X+,R30
0001e9 93fc      	ST   X,R31
                 ; 0000 0103         *L_RPM = 0;
0001ea 85a8      	LDD  R26,Y+8
0001eb 85b9      	LDD  R27,Y+8+1
0001ec 93ed      	ST   X+,R30
0001ed 93fc      	ST   X,R31
                 ; 0000 0104     }
                 ; 0000 0105 }
                 _0x2D:
0001ee 9660      	ADIW R28,16
0001ef 9508      	RET
                 ;
                 ;void oper_Disapath(int velocity_R, int velocity_L)
                 ; 0000 0108 {
                 _oper_Disapath:
                 ; 0000 0109     RTU_WriteOperate0(R,(unsigned int)121,(int)(velocity_R));
                 ;	velocity_R -> Y+2
                 ;	velocity_L -> Y+0
0001f0 e0e1      	LDI  R30,LOW(1)
0001f1 93ea      	ST   -Y,R30
0001f2 e7e9      	LDI  R30,LOW(121)
0001f3 e0f0      	LDI  R31,HIGH(121)
0001f4 93fa      	ST   -Y,R31
0001f5 93ea      	ST   -Y,R30
0001f6 81ed      	LDD  R30,Y+5
0001f7 81fe      	LDD  R31,Y+5+1
0001f8 940e 04de 	CALL SUBOPT_0x4
                 ; 0000 010A     delay_ms(1);
                 ; 0000 010B 
                 ; 0000 010C     RTU_WriteOperate0(L,(unsigned int)121,(int)-(velocity_L));
0001fa e0e2      	LDI  R30,LOW(2)
0001fb 93ea      	ST   -Y,R30
0001fc e7e9      	LDI  R30,LOW(121)
0001fd e0f0      	LDI  R31,HIGH(121)
0001fe 93fa      	ST   -Y,R31
0001ff 93ea      	ST   -Y,R30
000200 81eb      	LDD  R30,Y+3
000201 81fc      	LDD  R31,Y+3+1
000202 940e 06ca 	CALL __ANEGW1
000204 940e 04de 	CALL SUBOPT_0x4
                 ; 0000 010D     delay_ms(1);
                 ; 0000 010E 
                 ; 0000 010F     RTU_WriteOperate0(R,(unsigned int)120,(int)(START));
000206 e0e1      	LDI  R30,LOW(1)
000207 940e 04e8 	CALL SUBOPT_0x5
                 ; 0000 0110     delay_ms(1);
                 ; 0000 0111 
                 ; 0000 0112     RTU_WriteOperate0(L,(unsigned int)120,(int)(START));
000209 e0e2      	LDI  R30,LOW(2)
00020a 940e 04e8 	CALL SUBOPT_0x5
                 ; 0000 0113     delay_ms(1);
                 ; 0000 0114 }
00020c 9624      	ADIW R28,4
00020d 9508      	RET
                 ;
                 ;interrupt [USART0_RXC] void usart0_rxc(void)
                 ; 0000 0117 {
                 _usart0_rxc:
00020e 93aa      	ST   -Y,R26
00020f 93ba      	ST   -Y,R27
000210 93ea      	ST   -Y,R30
000211 b7ef      	IN   R30,SREG
000212 93ea      	ST   -Y,R30
                 ; 0000 0118     if(((TCNT2 < CHARACTER3_5) && (TIMER2_OVERFLOW == 0)) || PACKET_BUFF_IDX == 0)
000213 b5e4      	IN   R30,0x24
000214 31e9      	CPI  R30,LOW(0x19)
000215 f418      	BRSH _0x35
000216 e0e0      	LDI  R30,LOW(0)
000217 15e5      	CP   R30,R5
000218 f019      	BREQ _0x37
                 _0x35:
000219 e0e0      	LDI  R30,LOW(0)
00021a 15e4      	CP   R30,R4
00021b f419      	BRNE _0x34
                 _0x37:
                 ; 0000 0119     {
                 ; 0000 011A         PACKET_BUFF[PACKET_BUFF_IDX] = UDR0;
00021c 940e 04f0 	CALL SUBOPT_0x6
                 ; 0000 011B         PACKET_BUFF_IDX++;
                 ; 0000 011C         TCNT2 = 0;
                 ; 0000 011D     }
                 ; 0000 011E     else {
00021e c004      	RJMP _0x39
                 _0x34:
                 ; 0000 011F         PACKET_BUFF_IDX = 0;
00021f 2444      	CLR  R4
                 ; 0000 0120         PACKET_BUFF[PACKET_BUFF_IDX] = UDR0;
000220 940e 04f0 	CALL SUBOPT_0x6
                 ; 0000 0121         PACKET_BUFF_IDX++;
                 ; 0000 0122         TCNT2 = 0;
                 ; 0000 0123         TIMER2_OVERFLOW = 0;
000222 2455      	CLR  R5
                 ; 0000 0124     }
                 _0x39:
                 ; 0000 0125 }
000223 91e9      	LD   R30,Y+
000224 bfef      	OUT  SREG,R30
000225 91e9      	LD   R30,Y+
000226 91b9      	LD   R27,Y+
000227 91a9      	LD   R26,Y+
000228 9518      	RETI
                 ;
                 ;interrupt [USART1_RXC] void usart1_rxc(void)
                 ; 0000 0128 {
                 _usart1_rxc:
000229 93ea      	ST   -Y,R30
00022a 93fa      	ST   -Y,R31
00022b b7ef      	IN   R30,SREG
00022c 93ea      	ST   -Y,R30
                 ; 0000 0129     unsigned char i = 0;
                 ; 0000 012A     i = UDR1;
00022d 931a      	ST   -Y,R17
                 ;	i -> R17
00022e e010      	LDI  R17,0
00022f 9110 009c 	LDS  R17,156
                 ; 0000 012B     if((i == '<') && (CHECK_GETS == 0)){
000231 331c      	CPI  R17,60
000232 f419      	BRNE _0x3B
000233 e0e0      	LDI  R30,LOW(0)
000234 15e9      	CP   R30,R9
000235 f009      	BREQ _0x3C
                 _0x3B:
000236 c007      	RJMP _0x3A
                 _0x3C:
                 ; 0000 012C         PORTB.3 = ~PORTB.3;
000237 9bc3      	SBIS 0x18,3
000238 c002      	RJMP _0x3D
000239 98c3      	CBI  0x18,3
00023a c001      	RJMP _0x3E
                 _0x3D:
00023b 9ac3      	SBI  0x18,3
                 _0x3E:
                 ; 0000 012D         VELOCITY_BUFF_IDX = 0;
00023c 2466      	CLR  R6
                 ; 0000 012E         VELOCITY_BUFF[VELOCITY_BUFF_IDX] = i;
00023d c00e      	RJMP _0x5B
                 ; 0000 012F         VELOCITY_BUFF_IDX++;
                 ; 0000 0130     }
                 ; 0000 0131     else if(i == '>' && (CHECK_GETS == 0)){
                 _0x3A:
00023e 331e      	CPI  R17,62
00023f f419      	BRNE _0x41
000240 e0e0      	LDI  R30,LOW(0)
000241 15e9      	CP   R30,R9
000242 f009      	BREQ _0x42
                 _0x41:
000243 c006      	RJMP _0x40
                 _0x42:
                 ; 0000 0132         VELOCITY_BUFF[VELOCITY_BUFF_IDX] = i;
000244 2de6      	MOV  R30,R6
000245 940e 04fa 	CALL SUBOPT_0x7
                 ; 0000 0133         VELOCITY_BUFF_IDX++;
                 ; 0000 0134         CHECK_GETS = 1;
000247 e0e1      	LDI  R30,LOW(1)
000248 2e9e      	MOV  R9,R30
                 ; 0000 0135     }
                 ; 0000 0136     else if(CHECK_GETS == 0){
000249 c005      	RJMP _0x43
                 _0x40:
00024a 2099      	TST  R9
00024b f419      	BRNE _0x44
                 ; 0000 0137         VELOCITY_BUFF[VELOCITY_BUFF_IDX] = i;
                 _0x5B:
00024c 2de6      	MOV  R30,R6
00024d 940e 04fa 	CALL SUBOPT_0x7
                 ; 0000 0138         VELOCITY_BUFF_IDX++;
                 ; 0000 0139     }
                 ; 0000 013A }
                 _0x44:
                 _0x43:
00024f 9119      	LD   R17,Y+
000250 91e9      	LD   R30,Y+
000251 bfef      	OUT  SREG,R30
000252 91f9      	LD   R31,Y+
000253 91e9      	LD   R30,Y+
000254 9518      	RETI
                 ;
                 ;interrupt [TIM2_COMP] void timer2_comp(void)
                 ; 0000 013D {
                 _timer2_comp:
000255 93ea      	ST   -Y,R30
000256 b7ef      	IN   R30,SREG
                 ; 0000 013E     TIMER2_OVERFLOW++;
000257 9453      	INC  R5
                 ; 0000 013F }
000258 c003      	RJMP _0x5C
                 ;
                 ;interrupt [TIM0_COMP] void timer0_comp(void)
                 ; 0000 0142 {
                 _timer0_comp:
000259 93ea      	ST   -Y,R30
00025a b7ef      	IN   R30,SREG
                 ; 0000 0143     TIMER0_OVERFLOW++;
00025b 9473      	INC  R7
                 ; 0000 0144 }
                 _0x5C:
00025c bfef      	OUT  SREG,R30
00025d 91e9      	LD   R30,Y+
00025e 9518      	RETI
                 ;
                 ;void main(void)
                 ; 0000 0147 {
                 _main:
                 ; 0000 0148     float a_buff;
                 ; 0000 0149     float v_buff;
                 ; 0000 014A 
                 ; 0000 014B     int velocity = 0;
                 ; 0000 014C     int angularV = 0;
                 ; 0000 014D     int velocity_R = 0;
                 ; 0000 014E     int velocity_L = 0;
                 ; 0000 014F     int past_velocity_R = 0;
                 ; 0000 0150     int past_velocity_L = 0;
                 ; 0000 0151 
                 ; 0000 0152     unsigned char mode_R = 0;
                 ; 0000 0153     unsigned char mode_L = 0;
                 ; 0000 0154     unsigned char BUFF[100] = {0,};
                 ; 0000 0155 
                 ; 0000 0156     usart1_init(bps_115200);
00025f 97ef      	SBIW R28,63
000260 97e5      	SBIW R28,53
000261 e68c      	LDI  R24,108
000262 e0a0      	LDI  R26,LOW(0)
000263 e0b0      	LDI  R27,HIGH(0)
000264 e8ec      	LDI  R30,LOW(_0x45*2)
000265 e0f0      	LDI  R31,HIGH(_0x45*2)
000266 940e 0723 	CALL __INITLOCB
                 ;	a_buff -> Y+112
                 ;	v_buff -> Y+108
                 ;	velocity -> R16,R17
                 ;	angularV -> R18,R19
                 ;	velocity_R -> R20,R21
                 ;	velocity_L -> Y+106
                 ;	past_velocity_R -> Y+104
                 ;	past_velocity_L -> Y+102
                 ;	mode_R -> Y+101
                 ;	mode_L -> Y+100
                 ;	BUFF -> Y+0
                +
000268 e000     +LDI R16 , LOW ( 0 )
000269 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
00026a e020     +LDI R18 , LOW ( 0 )
00026b e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
00026c e040     +LDI R20 , LOW ( 0 )
00026d e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
00026e e0e7      	LDI  R30,LOW(7)
00026f e0f0      	LDI  R31,HIGH(7)
000270 93fa      	ST   -Y,R31
000271 93ea      	ST   -Y,R30
000272 de53      	RCALL _usart1_init
                 ; 0000 0157     usart0_init(bps_115200);
000273 e0e7      	LDI  R30,LOW(7)
000274 e0f0      	LDI  R31,HIGH(7)
000275 93fa      	ST   -Y,R31
000276 93ea      	ST   -Y,R30
000277 de66      	RCALL _usart0_init
                 ; 0000 0158     timer2_init();
000278 de7b      	RCALL _timer2_init
                 ; 0000 0159     timer0_init();
000279 de7f      	RCALL _timer0_init
                 ; 0000 015A     SREG |= 0x80;
00027a 9478      	BSET 7
                 ; 0000 015B     DDRB.1 = 1;
00027b 9ab9      	SBI  0x17,1
                 ; 0000 015C     DDRB.2 = 1;
00027c 9aba      	SBI  0x17,2
                 ; 0000 015D     DDRB.3 = 1;
00027d 9abb      	SBI  0x17,3
                 ; 0000 015E     delay_ms(5000);
00027e e8e8      	LDI  R30,LOW(5000)
00027f e1f3      	LDI  R31,HIGH(5000)
000280 93fa      	ST   -Y,R31
000281 93ea      	ST   -Y,R30
000282 940e 0531 	CALL _delay_ms
                 ; 0000 015F     PORTB.1 = 0;
000284 98c1      	CBI  0x18,1
                 ; 0000 0160     PORTB.2 = 1;
000285 9ac2      	SBI  0x18,2
                 ; 0000 0161     while(1)
                 _0x50:
                 ; 0000 0162     {
                 ; 0000 0163         if(CHECK_GETS)
000286 2099      	TST  R9
000287 f411      	BRNE PC+3
000288 940c 0305 	JMP _0x53
                 ; 0000 0164         {
                 ; 0000 0165             TIMER0_OVERFLOW = 0;
00028a 2477      	CLR  R7
                 ; 0000 0166             TCNT0 = 0;
00028b e0e0      	LDI  R30,LOW(0)
00028c bfe2      	OUT  0x32,R30
                 ; 0000 0167 
                 ; 0000 0168             PORTB.1 = 1;
00028d 9ac1      	SBI  0x18,1
                 ; 0000 0169             PORTB.2 = ~PORTB.2;
00028e 9bc2      	SBIS 0x18,2
00028f c002      	RJMP _0x56
000290 98c2      	CBI  0x18,2
000291 c001      	RJMP _0x57
                 _0x56:
000292 9ac2      	SBI  0x18,2
                 _0x57:
                 ; 0000 016A 
                 ; 0000 016B             UCSR1B &= ~(1<<RXEN1);
000293 91e0 009a 	LDS  R30,154
000295 7eef      	ANDI R30,0xEF
000296 93e0 009a 	STS  154,R30
                 ; 0000 016C             sscanf(VELOCITY_BUFF,"<%d,%d>", &velocity, &angularV);
000298 e6e4      	LDI  R30,LOW(_VELOCITY_BUFF)
000299 e0f5      	LDI  R31,HIGH(_VELOCITY_BUFF)
00029a 93fa      	ST   -Y,R31
00029b 93ea      	ST   -Y,R30
                +
00029c efee     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
00029d e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
00029e 93fa      	ST   -Y,R31
00029f 93ea      	ST   -Y,R30
0002a0 b7ed      	IN   R30,SPL
0002a1 b7fe      	IN   R31,SPH
0002a2 9731      	SBIW R30,1
0002a3 940e 0701 	CALL __PUTPARD1L
0002a5 931f      	PUSH R17
0002a6 930f      	PUSH R16
0002a7 b7ed      	IN   R30,SPL
0002a8 b7fe      	IN   R31,SPH
0002a9 9731      	SBIW R30,1
0002aa 940e 0701 	CALL __PUTPARD1L
0002ac 933f      	PUSH R19
0002ad 932f      	PUSH R18
0002ae e088      	LDI  R24,8
0002af 940e 0469 	CALL _sscanf
0002b1 962c      	ADIW R28,12
0002b2 912f      	POP  R18
0002b3 913f      	POP  R19
0002b4 910f      	POP  R16
0002b5 911f      	POP  R17
                 ; 0000 016D 
                 ; 0000 016E             v_buff = (float)velocity/1000;
0002b6 01f8      	MOVW R30,R16
0002b7 940e 0500 	CALL SUBOPT_0x8
                +
0002b9 01de     +MOVW R26 , R28
0002ba 59a4     +SUBI R26 , LOW ( - 108 )
0002bb 4fbf     +SBCI R27 , HIGH ( - 108 )
0002bc 93ed     +ST X + , R30
0002bd 93fd     +ST X + , R31
0002be 936d     +ST X + , R22
0002bf 937c     +ST X , R23
                 	__PUTD1SX 108
                 ; 0000 016F             a_buff = (float)angularV/1000;
0002c0 01f9      	MOVW R30,R18
0002c1 940e 0500 	CALL SUBOPT_0x8
                +
0002c3 01de     +MOVW R26 , R28
0002c4 59a0     +SUBI R26 , LOW ( - 112 )
0002c5 4fbf     +SBCI R27 , HIGH ( - 112 )
0002c6 93ed     +ST X + , R30
0002c7 93fd     +ST X + , R31
0002c8 936d     +ST X + , R22
0002c9 937c     +ST X , R23
                 	__PUTD1SX 112
                 ; 0000 0170 
                 ; 0000 0171             Make_MSPEED(&v_buff, &a_buff, &velocity_R, &velocity_L);
0002ca 01fe      	MOVW R30,R28
0002cb 59e4      	SUBI R30,LOW(-(108))
0002cc 4fff      	SBCI R31,HIGH(-(108))
0002cd 93fa      	ST   -Y,R31
0002ce 93ea      	ST   -Y,R30
0002cf 01fe      	MOVW R30,R28
0002d0 58ee      	SUBI R30,LOW(-(114))
0002d1 4fff      	SBCI R31,HIGH(-(114))
0002d2 93fa      	ST   -Y,R31
0002d3 93ea      	ST   -Y,R30
0002d4 b7ed      	IN   R30,SPL
0002d5 b7fe      	IN   R31,SPH
0002d6 9731      	SBIW R30,1
0002d7 93fa      	ST   -Y,R31
0002d8 93ea      	ST   -Y,R30
0002d9 935f      	PUSH R21
0002da 934f      	PUSH R20
0002db 01fe      	MOVW R30,R28
0002dc 59e0      	SUBI R30,LOW(-(112))
0002dd 4fff      	SBCI R31,HIGH(-(112))
0002de 93fa      	ST   -Y,R31
0002df 93ea      	ST   -Y,R30
0002e0 de8f      	RCALL _Make_MSPEED
0002e1 914f      	POP  R20
0002e2 915f      	POP  R21
                 ; 0000 0172             //sprintf(BUFF,"<%.2f,%.f2>", v_buff, a_buff);
                 ; 0000 0173             //sprintf(BUFF,"<%d,%d>", velocity_R, velocity_L);
                 ; 0000 0174 
                 ; 0000 0175             //puts_USART1(BUFF,VELOCITY_BUFF_IDX);
                 ; 0000 0176 
                 ; 0000 0177             past_velocity_R = velocity_R;
                +
0002e3 01fe     +MOVW R30 , R28
0002e4 59e8     +SUBI R30 , LOW ( - 104 )
0002e5 4fff     +SBCI R31 , HIGH ( - 104 )
0002e6 9341     +ST Z + , R20
0002e7 8350     +ST Z , R21
                 	__PUTWSRX 20,21,104
                 ; 0000 0178             past_velocity_L = velocity_L;
                +
0002e8 01fe     +MOVW R30 , R28
0002e9 59e6     +SUBI R30 , LOW ( - 106 )
0002ea 4fff     +SBCI R31 , HIGH ( - 106 )
0002eb 9001     +LD R0 , Z +
0002ec 81f0     +LD R31 , Z
0002ed 2de0     +MOV R30 , R0
                 	__GETW1SX 106
                +
0002ee 01de     +MOVW R26 , R28
0002ef 59aa     +SUBI R26 , LOW ( - 102 )
0002f0 4fbf     +SBCI R27 , HIGH ( - 102 )
0002f1 93ed     +ST X + , R30
0002f2 93fc     +ST X , R31
                 	__PUTW1SX 102
                 ; 0000 0179 
                 ; 0000 017A             oper_Disapath(velocity_R, velocity_L);
0002f3 935a      	ST   -Y,R21
0002f4 934a      	ST   -Y,R20
                +
0002f5 01fe     +MOVW R30 , R28
0002f6 59e4     +SUBI R30 , LOW ( - 108 )
0002f7 4fff     +SBCI R31 , HIGH ( - 108 )
0002f8 9001     +LD R0 , Z +
0002f9 81f0     +LD R31 , Z
0002fa 2de0     +MOV R30 , R0
                 	__GETW1SX 108
0002fb 93fa      	ST   -Y,R31
0002fc 93ea      	ST   -Y,R30
0002fd def2      	RCALL _oper_Disapath
                 ; 0000 017B 
                 ; 0000 017C             CHECK_GETS = 0;
0002fe 2499      	CLR  R9
                 ; 0000 017D             UCSR1B |=(1<<RXEN1);
0002ff 91e0 009a 	LDS  R30,154
000301 61e0      	ORI  R30,0x10
000302 93e0 009a 	STS  154,R30
                 ; 0000 017E             PORTB.1 = 0;
000304 98c1      	CBI  0x18,1
                 ; 0000 017F         }
                 ; 0000 0180     }
                 _0x53:
000305 cf80      	RJMP _0x50
                 ; 0000 0181 }
                 _0x5A:
000306 cfff      	RJMP _0x5A
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _get_buff_G100:
000307 931a      	ST   -Y,R17
000308 81a9      	LDD  R26,Y+1
000309 81ba      	LDD  R27,Y+1+1
00030a e0e0      	LDI  R30,LOW(0)
00030b 93ec      	ST   X,R30
00030c 81ab      	LDD  R26,Y+3
00030d 81bc      	LDD  R27,Y+3+1
00030e 91ec      	LD   R30,X
00030f 2f1e      	MOV  R17,R30
000310 30e0      	CPI  R30,0
000311 f019      	BREQ _0x20000BF
000312 e0e0      	LDI  R30,LOW(0)
000313 93ec      	ST   X,R30
000314 c019      	RJMP _0x20000C0
                 _0x20000BF:
000315 81a9      	LDD  R26,Y+1
000316 81ba      	LDD  R27,Y+1+1
000317 9611      	ADIW R26,1
000318 940e 06e8 	CALL __GETW1P
00031a 9730      	SBIW R30,0
00031b f089      	BREQ _0x20000C1
00031c 81e9      	LDD  R30,Y+1
00031d 81fa      	LDD  R31,Y+1+1
00031e 81a1      	LDD  R26,Z+1
00031f 81b2      	LDD  R27,Z+2
000320 91ec      	LD   R30,X
000321 2f1e      	MOV  R17,R30
000322 30e0      	CPI  R30,0
000323 f041      	BREQ _0x20000C2
000324 81a9      	LDD  R26,Y+1
000325 81ba      	LDD  R27,Y+1+1
000326 9611      	ADIW R26,1
000327 91ed      	LD   R30,X+
000328 91fd      	LD   R31,X+
000329 9631      	ADIW R30,1
00032a 93fe      	ST   -X,R31
00032b 93ee      	ST   -X,R30
                 _0x20000C2:
00032c c001      	RJMP _0x20000C3
                 _0x20000C1:
00032d e010      	LDI  R17,LOW(0)
                 _0x20000C3:
                 _0x20000C0:
00032e 2fe1      	MOV  R30,R17
00032f 8118      	LDD  R17,Y+0
000330 9625      	ADIW R28,5
000331 9508      	RET
                 __scanf_G100:
000332 9725      	SBIW R28,5
000333 940e 0715 	CALL __SAVELOCR6
000335 e0e0      	LDI  R30,LOW(0)
000336 e0f0      	LDI  R31,HIGH(0)
000337 87e8      	STD  Y+8,R30
000338 87f9      	STD  Y+8+1,R31
000339 2f4e      	MOV  R20,R30
                 _0x20000C4:
00033a 89e9      	LDD  R30,Y+17
00033b 89fa      	LDD  R31,Y+17+1
00033c 9631      	ADIW R30,1
00033d 8be9      	STD  Y+17,R30
00033e 8bfa      	STD  Y+17+1,R31
00033f 9731      	SBIW R30,1
000340 91e4      	LPM  R30,Z
000341 2f3e      	MOV  R19,R30
000342 30e0      	CPI  R30,0
000343 f411      	BRNE PC+3
000344 940c 0463 	JMP _0x20000C6
000346 940e 050d 	CALL SUBOPT_0x9
000348 f0c1      	BREQ _0x20000C7
                 _0x20000C8:
000349 b7ed      	IN   R30,SPL
00034a b7fe      	IN   R31,SPH
00034b 93fa      	ST   -Y,R31
00034c 93ea      	ST   -Y,R30
00034d 934f      	PUSH R20
00034e 940e 0512 	CALL SUBOPT_0xA
000350 914f      	POP  R20
000351 2f3e      	MOV  R19,R30
000352 30e0      	CPI  R30,0
000353 f019      	BREQ _0x20000CB
000354 940e 050d 	CALL SUBOPT_0x9
000356 f409      	BRNE _0x20000CC
                 _0x20000CB:
000357 c007      	RJMP _0x20000CA
                 _0x20000CC:
000358 940e 051a 	CALL SUBOPT_0xB
00035a f41c      	BRGE _0x20000CD
00035b efef      	LDI  R30,LOW(65535)
00035c efff      	LDI  R31,HIGH(65535)
00035d c107      	RJMP _0x20A0002
                 _0x20000CD:
00035e cfea      	RJMP _0x20000C8
                 _0x20000CA:
00035f 2f43      	MOV  R20,R19
000360 c101      	RJMP _0x20000CE
                 _0x20000C7:
000361 3235      	CPI  R19,37
000362 f011      	BREQ PC+3
000363 940c 044a 	JMP _0x20000CF
000365 e050      	LDI  R21,LOW(0)
                 _0x20000D0:
000366 89e9      	LDD  R30,Y+17
000367 89fa      	LDD  R31,Y+17+1
000368 9135      	LPM  R19,Z+
000369 8be9      	STD  Y+17,R30
00036a 8bfa      	STD  Y+17+1,R31
00036b 3330      	CPI  R19,48
00036c f010      	BRLO _0x20000D4
00036d 333a      	CPI  R19,58
00036e f008      	BRLO _0x20000D3
                 _0x20000D4:
00036f c007      	RJMP _0x20000D2
                 _0x20000D3:
000370 e0aa      	LDI  R26,LOW(10)
000371 9f5a      	MUL  R21,R26
000372 2d50      	MOV  R21,R0
000373 2fe3      	MOV  R30,R19
000374 53e0      	SUBI R30,LOW(48)
000375 0f5e      	ADD  R21,R30
000376 cfef      	RJMP _0x20000D0
                 _0x20000D2:
000377 3030      	CPI  R19,0
000378 f409      	BRNE _0x20000D6
000379 c0e9      	RJMP _0x20000C6
                 _0x20000D6:
                 _0x20000D7:
00037a b7ed      	IN   R30,SPL
00037b b7fe      	IN   R31,SPH
00037c 93fa      	ST   -Y,R31
00037d 93ea      	ST   -Y,R30
00037e 934f      	PUSH R20
00037f 940e 0512 	CALL SUBOPT_0xA
000381 914f      	POP  R20
000382 2f2e      	MOV  R18,R30
000383 93ea      	ST   -Y,R30
000384 940e 049e 	CALL _isspace
000386 30e0      	CPI  R30,0
000387 f039      	BREQ _0x20000D9
000388 940e 051a 	CALL SUBOPT_0xB
00038a f41c      	BRGE _0x20000DA
00038b efef      	LDI  R30,LOW(65535)
00038c efff      	LDI  R31,HIGH(65535)
00038d c0d7      	RJMP _0x20A0002
                 _0x20000DA:
00038e cfeb      	RJMP _0x20000D7
                 _0x20000D9:
00038f 3020      	CPI  R18,0
000390 f409      	BRNE _0x20000DB
000391 c0c8      	RJMP _0x20000DC
                 _0x20000DB:
000392 2f42      	MOV  R20,R18
000393 3050      	CPI  R21,0
000394 f409      	BRNE _0x20000DD
000395 ef5f      	LDI  R21,LOW(255)
                 _0x20000DD:
000396 2fe3      	MOV  R30,R19
000397 36e3      	CPI  R30,LOW(0x63)
000398 f499      	BRNE _0x20000E1
000399 940e 051f 	CALL SUBOPT_0xC
00039b b7ed      	IN   R30,SPL
00039c b7fe      	IN   R31,SPH
00039d 93fa      	ST   -Y,R31
00039e 93ea      	ST   -Y,R30
00039f 934f      	PUSH R20
0003a0 940e 0512 	CALL SUBOPT_0xA
0003a2 914f      	POP  R20
0003a3 01d8      	MOVW R26,R16
0003a4 93ec      	ST   X,R30
0003a5 940e 051a 	CALL SUBOPT_0xB
0003a7 f41c      	BRGE _0x20000E2
0003a8 efef      	LDI  R30,LOW(65535)
0003a9 efff      	LDI  R31,HIGH(65535)
0003aa c0ba      	RJMP _0x20A0002
                 _0x20000E2:
0003ab c098      	RJMP _0x20000E0
                 _0x20000E1:
0003ac 37e3      	CPI  R30,LOW(0x73)
0003ad f541      	BRNE _0x20000EB
0003ae 940e 051f 	CALL SUBOPT_0xC
                 _0x20000E4:
0003b0 2fe5      	MOV  R30,R21
0003b1 5051      	SUBI R21,1
0003b2 30e0      	CPI  R30,0
0003b3 f0f1      	BREQ _0x20000E6
0003b4 b7ed      	IN   R30,SPL
0003b5 b7fe      	IN   R31,SPH
0003b6 93fa      	ST   -Y,R31
0003b7 93ea      	ST   -Y,R30
0003b8 934f      	PUSH R20
0003b9 940e 0512 	CALL SUBOPT_0xA
0003bb 914f      	POP  R20
0003bc 2f3e      	MOV  R19,R30
0003bd 30e0      	CPI  R30,0
0003be f019      	BREQ _0x20000E8
0003bf 940e 050d 	CALL SUBOPT_0x9
0003c1 f039      	BREQ _0x20000E7
                 _0x20000E8:
0003c2 940e 051a 	CALL SUBOPT_0xB
0003c4 f41c      	BRGE _0x20000EA
0003c5 efef      	LDI  R30,LOW(65535)
0003c6 efff      	LDI  R31,HIGH(65535)
0003c7 c09d      	RJMP _0x20A0002
                 _0x20000EA:
0003c8 c009      	RJMP _0x20000E6
                 _0x20000E7:
0003c9 931f      	PUSH R17
0003ca 930f      	PUSH R16
                +
0003cb 5f0f     +SUBI R16 , LOW ( - 1 )
0003cc 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0003cd 2fe3      	MOV  R30,R19
0003ce 91af      	POP  R26
0003cf 91bf      	POP  R27
0003d0 93ec      	ST   X,R30
0003d1 cfde      	RJMP _0x20000E4
                 _0x20000E6:
0003d2 01d8      	MOVW R26,R16
0003d3 e0e0      	LDI  R30,LOW(0)
0003d4 93ec      	ST   X,R30
0003d5 c06e      	RJMP _0x20000E0
                 _0x20000EB:
0003d6 e0e1      	LDI  R30,LOW(1)
0003d7 87ea      	STD  Y+10,R30
0003d8 2fe3      	MOV  R30,R19
0003d9 36e4      	CPI  R30,LOW(0x64)
0003da f011      	BREQ _0x20000F0
0003db 36e9      	CPI  R30,LOW(0x69)
0003dc f419      	BRNE _0x20000F1
                 _0x20000F0:
0003dd e0e0      	LDI  R30,LOW(0)
0003de 87ea      	STD  Y+10,R30
0003df c002      	RJMP _0x20000F2
                 _0x20000F1:
0003e0 37e5      	CPI  R30,LOW(0x75)
0003e1 f411      	BRNE _0x20000F3
                 _0x20000F2:
0003e2 e02a      	LDI  R18,LOW(10)
0003e3 c008      	RJMP _0x20000EE
                 _0x20000F3:
0003e4 37e8      	CPI  R30,LOW(0x78)
0003e5 f411      	BRNE _0x20000F4
0003e6 e120      	LDI  R18,LOW(16)
0003e7 c004      	RJMP _0x20000EE
                 _0x20000F4:
0003e8 32e5      	CPI  R30,LOW(0x25)
0003e9 f409      	BRNE _0x20000F7
0003ea c05f      	RJMP _0x20000F6
                 _0x20000F7:
0003eb c077      	RJMP _0x20A0003
                 _0x20000EE:
0003ec e0e0      	LDI  R30,LOW(0)
0003ed 83ee      	STD  Y+6,R30
0003ee 83ef      	STD  Y+6+1,R30
                 _0x20000F8:
0003ef 2fe5      	MOV  R30,R21
0003f0 5051      	SUBI R21,1
0003f1 30e0      	CPI  R30,0
0003f2 f411      	BRNE PC+3
0003f3 940c 0437 	JMP _0x20000FA
0003f5 b7ed      	IN   R30,SPL
0003f6 b7fe      	IN   R31,SPH
0003f7 93fa      	ST   -Y,R31
0003f8 93ea      	ST   -Y,R30
0003f9 934f      	PUSH R20
0003fa 940e 0512 	CALL SUBOPT_0xA
0003fc 914f      	POP  R20
0003fd 2f3e      	MOV  R19,R30
0003fe 32e1      	CPI  R30,LOW(0x21)
0003ff f438      	BRSH _0x20000FB
000400 940e 051a 	CALL SUBOPT_0xB
000402 f41c      	BRGE _0x20000FC
000403 efef      	LDI  R30,LOW(65535)
000404 efff      	LDI  R31,HIGH(65535)
000405 c05f      	RJMP _0x20A0002
                 _0x20000FC:
000406 c017      	RJMP _0x20000FD
                 _0x20000FB:
000407 85ea      	LDD  R30,Y+10
000408 30e0      	CPI  R30,0
000409 f439      	BRNE _0x20000FE
00040a 323d      	CPI  R19,45
00040b f419      	BRNE _0x20000FF
00040c efef      	LDI  R30,LOW(255)
00040d 87ea      	STD  Y+10,R30
00040e cfe0      	RJMP _0x20000F8
                 _0x20000FF:
00040f e0e1      	LDI  R30,LOW(1)
000410 87ea      	STD  Y+10,R30
                 _0x20000FE:
000411 3120      	CPI  R18,16
000412 f431      	BRNE _0x2000101
000413 933a      	ST   -Y,R19
000414 940e 04a8 	CALL _isxdigit
000416 30e0      	CPI  R30,0
000417 f031      	BREQ _0x20000FD
000418 c007      	RJMP _0x2000103
                 _0x2000101:
000419 933a      	ST   -Y,R19
00041a 940e 0496 	CALL _isdigit
00041c 30e0      	CPI  R30,0
00041d f411      	BRNE _0x2000104
                 _0x20000FD:
00041e 2f43      	MOV  R20,R19
00041f c017      	RJMP _0x20000FA
                 _0x2000104:
                 _0x2000103:
000420 3631      	CPI  R19,97
000421 f010      	BRLO _0x2000105
000422 5537      	SUBI R19,LOW(87)
000423 c005      	RJMP _0x2000106
                 _0x2000105:
000424 3431      	CPI  R19,65
000425 f010      	BRLO _0x2000107
000426 5337      	SUBI R19,LOW(55)
000427 c001      	RJMP _0x2000108
                 _0x2000107:
000428 5330      	SUBI R19,LOW(48)
                 _0x2000108:
                 _0x2000106:
000429 2fe2      	MOV  R30,R18
00042a 81ae      	LDD  R26,Y+6
00042b 81bf      	LDD  R27,Y+6+1
00042c e0f0      	LDI  R31,0
00042d 940e 06e0 	CALL __MULW12U
00042f 01df      	MOVW R26,R30
000430 2fe3      	MOV  R30,R19
000431 e0f0      	LDI  R31,0
000432 0fea      	ADD  R30,R26
000433 1ffb      	ADC  R31,R27
000434 83ee      	STD  Y+6,R30
000435 83ff      	STD  Y+6+1,R31
000436 cfb8      	RJMP _0x20000F8
                 _0x20000FA:
000437 940e 051f 	CALL SUBOPT_0xC
000439 85ea      	LDD  R30,Y+10
00043a 81ae      	LDD  R26,Y+6
00043b 81bf      	LDD  R27,Y+6+1
00043c e0f0      	LDI  R31,0
00043d fde7      	SBRC R30,7
00043e efff      	SER  R31
00043f 940e 06e0 	CALL __MULW12U
000441 01d8      	MOVW R26,R16
000442 93ed      	ST   X+,R30
000443 93fc      	ST   X,R31
                 _0x20000E0:
000444 85e8      	LDD  R30,Y+8
000445 85f9      	LDD  R31,Y+8+1
000446 9631      	ADIW R30,1
000447 87e8      	STD  Y+8,R30
000448 87f9      	STD  Y+8+1,R31
000449 c018      	RJMP _0x2000109
                 _0x20000CF:
                 _0x20000F6:
00044a b7ed      	IN   R30,SPL
00044b b7fe      	IN   R31,SPH
00044c 93fa      	ST   -Y,R31
00044d 93ea      	ST   -Y,R30
00044e 934f      	PUSH R20
00044f 940e 0512 	CALL SUBOPT_0xA
000451 914f      	POP  R20
000452 17e3      	CP   R30,R19
000453 f071      	BREQ _0x200010A
000454 940e 051a 	CALL SUBOPT_0xB
000456 f41c      	BRGE _0x200010B
000457 efef      	LDI  R30,LOW(65535)
000458 efff      	LDI  R31,HIGH(65535)
000459 c00b      	RJMP _0x20A0002
                 _0x200010B:
                 _0x20000DC:
00045a 85e8      	LDD  R30,Y+8
00045b 85f9      	LDD  R31,Y+8+1
00045c 9730      	SBIW R30,0
00045d f419      	BRNE _0x200010C
00045e efef      	LDI  R30,LOW(65535)
00045f efff      	LDI  R31,HIGH(65535)
000460 c004      	RJMP _0x20A0002
                 _0x200010C:
000461 c001      	RJMP _0x20000C6
                 _0x200010A:
                 _0x2000109:
                 _0x20000CE:
000462 ced7      	RJMP _0x20000C4
                 _0x20000C6:
                 _0x20A0003:
000463 85e8      	LDD  R30,Y+8
000464 85f9      	LDD  R31,Y+8+1
                 _0x20A0002:
000465 940e 071c 	CALL __LOADLOCR6
000467 9663      	ADIW R28,19
000468 9508      	RET
                 _sscanf:
000469 92ff      	PUSH R15
00046a 2ef8      	MOV  R15,R24
00046b 9723      	SBIW R28,3
00046c 931a      	ST   -Y,R17
00046d 930a      	ST   -Y,R16
00046e 940e 052a 	CALL SUBOPT_0xD
000470 9730      	SBIW R30,0
000471 f419      	BRNE _0x200010D
000472 efef      	LDI  R30,LOW(65535)
000473 efff      	LDI  R31,HIGH(65535)
000474 c01c      	RJMP _0x20A0001
                 _0x200010D:
000475 01de      	MOVW R26,R28
000476 9611      	ADIW R26,1
000477 940e 06c6 	CALL __ADDW2R15
000479 018d      	MOVW R16,R26
00047a 940e 052a 	CALL SUBOPT_0xD
00047c 83eb      	STD  Y+3,R30
00047d 83fc      	STD  Y+3+1,R31
00047e 01de      	MOVW R26,R28
00047f 9615      	ADIW R26,5
000480 940e 06c6 	CALL __ADDW2R15
000482 940e 06e8 	CALL __GETW1P
000484 93fa      	ST   -Y,R31
000485 93ea      	ST   -Y,R30
000486 931a      	ST   -Y,R17
000487 930a      	ST   -Y,R16
000488 e0e7      	LDI  R30,LOW(_get_buff_G100)
000489 e0f3      	LDI  R31,HIGH(_get_buff_G100)
00048a 93fa      	ST   -Y,R31
00048b 93ea      	ST   -Y,R30
00048c 01fe      	MOVW R30,R28
00048d 9638      	ADIW R30,8
00048e 93fa      	ST   -Y,R31
00048f 93ea      	ST   -Y,R30
000490 dea1      	RCALL __scanf_G100
                 _0x20A0001:
000491 8119      	LDD  R17,Y+1
000492 8108      	LDD  R16,Y+0
000493 9625      	ADIW R28,5
000494 90ff      	POP  R15
000495 9508      	RET
                 
                 	.CSEG
                 _isdigit:
000496 e0e1          ldi  r30,1
000497 91f9          ld   r31,y+
000498 33f0          cpi  r31,'0'
000499 f010          brlo isdigit0
00049a 33fa          cpi  r31,'9'+1
00049b f008          brlo isdigit1
                 isdigit0:
00049c 27ee          clr  r30
                 isdigit1:
00049d 9508          ret
                 _isspace:
00049e e0e1          ldi  r30,1
00049f 91f9          ld   r31,y+
0004a0 32f0          cpi  r31,' '
0004a1 f029          breq isspace1
0004a2 30f9          cpi  r31,9
0004a3 f010          brlo isspace0
0004a4 30fe          cpi  r31,13+1
0004a5 f008          brlo isspace1
                 isspace0:
0004a6 27ee          clr  r30
                 isspace1:
0004a7 9508          ret
                 _isxdigit:
0004a8 e0e1          ldi  r30,1
0004a9 91f9          ld   r31,y+
0004aa 53f0          subi r31,0x30
0004ab f040          brcs isxdigit0
0004ac 30fa          cpi  r31,10
0004ad f038          brcs isxdigit1
0004ae 75ff          andi r31,0x5f
0004af 50f7          subi r31,7
0004b0 30fa          cpi  r31,10
0004b1 f010          brcs isxdigit0
0004b2 31f0          cpi  r31,16
0004b3 f008          brcs isxdigit1
                 isxdigit0:
0004b4 27ee          clr  r30
                 isxdigit1:
0004b5 9508          ret
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _PACKET_BUFF:
000500           	.BYTE 0x64
                 _VELOCITY_BUFF:
000564           	.BYTE 0x14
                 __seed_G104:
000578           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0004b6 85ae      	LDD  R26,Y+14
0004b7 85bf      	LDD  R27,Y+14+1
0004b8 940e 06ec 	CALL __GETD1P
0004ba 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
0004bb 85ac      	LDD  R26,Y+12
0004bc 85bd      	LDD  R27,Y+12+1
0004bd 940e 06ec 	CALL __GETD1P
0004bf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2:
                +
0004c0 eea1     +LDI R26 , LOW ( 0x3E947AE1 )
0004c1 e7ba     +LDI R27 , HIGH ( 0x3E947AE1 )
0004c2 e984     +LDI R24 , BYTE3 ( 0x3E947AE1 )
0004c3 e39e     +LDI R25 , BYTE4 ( 0x3E947AE1 )
                 	__GETD2N 0x3E947AE1
0004c4 940e 0633 	CALL __MULF12
0004c6 01df      	MOVW R26,R30
0004c7 01cb      	MOVW R24,R22
                +
0004c8 e0e0     +LDI R30 , LOW ( 0x40800000 )
0004c9 e0f0     +LDI R31 , HIGH ( 0x40800000 )
0004ca e860     +LDI R22 , BYTE3 ( 0x40800000 )
0004cb e470     +LDI R23 , BYTE4 ( 0x40800000 )
                 	__GETD1N 0x40800000
0004cc 940e 0681 	CALL __DIVF21
0004ce 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3:
                +
0004cf ebaa     +LDI R26 , LOW ( 0x4318C9BA )
0004d0 ecb9     +LDI R27 , HIGH ( 0x4318C9BA )
0004d1 e188     +LDI R24 , BYTE3 ( 0x4318C9BA )
0004d2 e493     +LDI R25 , BYTE4 ( 0x4318C9BA )
                 	__GETD2N 0x4318C9BA
0004d3 940e 0633 	CALL __MULF12
                +
0004d5 e0a0     +LDI R26 , LOW ( 0x41C80000 )
0004d6 e0b0     +LDI R27 , HIGH ( 0x41C80000 )
0004d7 ec88     +LDI R24 , BYTE3 ( 0x41C80000 )
0004d8 e491     +LDI R25 , BYTE4 ( 0x41C80000 )
                 	__GETD2N 0x41C80000
0004d9 940e 0633 	CALL __MULF12
0004db 940e 0572 	CALL __CFD1
0004dd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x4:
0004de 93fa      	ST   -Y,R31
0004df 93ea      	ST   -Y,R30
0004e0 940e 0135 	CALL _RTU_WriteOperate0
0004e2 e0e1      	LDI  R30,LOW(1)
0004e3 e0f0      	LDI  R31,HIGH(1)
0004e4 93fa      	ST   -Y,R31
0004e5 93ea      	ST   -Y,R30
0004e6 940c 0531 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x5:
0004e8 93ea      	ST   -Y,R30
0004e9 e7e8      	LDI  R30,LOW(120)
0004ea e0f0      	LDI  R31,HIGH(120)
0004eb 93fa      	ST   -Y,R31
0004ec 93ea      	ST   -Y,R30
0004ed e0e1      	LDI  R30,LOW(1)
0004ee e0f0      	LDI  R31,HIGH(1)
0004ef cfee      	RJMP SUBOPT_0x4
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x6:
0004f0 2da4      	MOV  R26,R4
0004f1 e0b0      	LDI  R27,0
0004f2 50a0      	SUBI R26,LOW(-_PACKET_BUFF)
0004f3 4fbb      	SBCI R27,HIGH(-_PACKET_BUFF)
0004f4 b1ec      	IN   R30,0xC
0004f5 93ec      	ST   X,R30
0004f6 9443      	INC  R4
0004f7 e0e0      	LDI  R30,LOW(0)
0004f8 bde4      	OUT  0x24,R30
0004f9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x7:
0004fa e0f0      	LDI  R31,0
0004fb 59ec      	SUBI R30,LOW(-_VELOCITY_BUFF)
0004fc 4ffa      	SBCI R31,HIGH(-_VELOCITY_BUFF)
0004fd 8310      	ST   Z,R17
0004fe 9463      	INC  R6
0004ff 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x8:
000500 940e 06db 	CALL __CWD1
000502 940e 05a9 	CALL __CDF1
000504 01df      	MOVW R26,R30
000505 01cb      	MOVW R24,R22
                +
000506 e0e0     +LDI R30 , LOW ( 0x447A0000 )
000507 e0f0     +LDI R31 , HIGH ( 0x447A0000 )
000508 e76a     +LDI R22 , BYTE3 ( 0x447A0000 )
000509 e474     +LDI R23 , BYTE4 ( 0x447A0000 )
                 	__GETD1N 0x447A0000
00050a 940e 0681 	CALL __DIVF21
00050c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
00050d 933a      	ST   -Y,R19
00050e 940e 049e 	CALL _isspace
000510 30e0      	CPI  R30,0
000511 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0xA:
000512 85ed      	LDD  R30,Y+13
000513 85fe      	LDD  R31,Y+13+1
000514 93fa      	ST   -Y,R31
000515 93ea      	ST   -Y,R30
000516 89e9      	LDD  R30,Y+17
000517 89fa      	LDD  R31,Y+17+1
000518 9509      	ICALL
000519 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xB:
00051a 85ab      	LDD  R26,Y+11
00051b 85bc      	LDD  R27,Y+11+1
00051c 91ac      	LD   R26,X
00051d 30a0      	CPI  R26,0
00051e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xC:
00051f 85ef      	LDD  R30,Y+15
000520 89f8      	LDD  R31,Y+15+1
000521 9734      	SBIW R30,4
000522 87ef      	STD  Y+15,R30
000523 8bf8      	STD  Y+15+1,R31
000524 85af      	LDD  R26,Y+15
000525 89b8      	LDD  R27,Y+15+1
000526 9614      	ADIW R26,4
000527 910d      	LD   R16,X+
000528 911c      	LD   R17,X
000529 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xD:
00052a 01de      	MOVW R26,R28
00052b 9617      	ADIW R26,7
00052c 940e 06c6 	CALL __ADDW2R15
00052e 940e 06e8 	CALL __GETW1P
000530 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000531 91e9      	ld   r30,y+
000532 91f9      	ld   r31,y+
000533 9630      	adiw r30,0
000534 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000535 e686     +LDI R24 , LOW ( 0xE66 )
000536 e09e     +LDI R25 , HIGH ( 0xE66 )
                +__DELAY_USW_LOOP :
000537 9701     +SBIW R24 , 1
000538 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xE66
000539 95a8      	wdr
00053a 9731      	sbiw r30,1
00053b f7c9      	brne __delay_ms0
                 __delay_ms1:
00053c 9508      	ret
                 
                 __ANEGF1:
00053d 9730      	SBIW R30,0
00053e 4060      	SBCI R22,0
00053f 4070      	SBCI R23,0
000540 f009      	BREQ __ANEGF10
000541 5870      	SUBI R23,0x80
                 __ANEGF10:
000542 9508      	RET
                 
                 __ROUND_REPACK:
000543 2355      	TST  R21
000544 f442      	BRPL __REPACK
000545 3850      	CPI  R21,0x80
000546 f411      	BRNE __ROUND_REPACK0
000547 ffe0      	SBRS R30,0
000548 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000549 9631      	ADIW R30,1
00054a 1f69      	ADC  R22,R25
00054b 1f79      	ADC  R23,R25
00054c f06b      	BRVS __REPACK1
                 
                 __REPACK:
00054d e850      	LDI  R21,0x80
00054e 2757      	EOR  R21,R23
00054f f411      	BRNE __REPACK0
000550 935f      	PUSH R21
000551 c0cf      	RJMP __ZERORES
                 __REPACK0:
000552 3f5f      	CPI  R21,0xFF
000553 f031      	BREQ __REPACK1
000554 0f66      	LSL  R22
000555 0c00      	LSL  R0
000556 9557      	ROR  R21
000557 9567      	ROR  R22
000558 2f75      	MOV  R23,R21
000559 9508      	RET
                 __REPACK1:
00055a 935f      	PUSH R21
00055b 2000      	TST  R0
00055c f00a      	BRMI __REPACK2
00055d c0cf      	RJMP __MAXRES
                 __REPACK2:
00055e c0c8      	RJMP __MINRES
                 
                 __UNPACK:
00055f e850      	LDI  R21,0x80
000560 2e19      	MOV  R1,R25
000561 2215      	AND  R1,R21
000562 0f88      	LSL  R24
000563 1f99      	ROL  R25
000564 2795      	EOR  R25,R21
000565 0f55      	LSL  R21
000566 9587      	ROR  R24
                 
                 __UNPACK1:
000567 e850      	LDI  R21,0x80
000568 2e07      	MOV  R0,R23
000569 2205      	AND  R0,R21
00056a 0f66      	LSL  R22
00056b 1f77      	ROL  R23
00056c 2775      	EOR  R23,R21
00056d 0f55      	LSL  R21
00056e 9567      	ROR  R22
00056f 9508      	RET
                 
                 __CFD1U:
000570 9468      	SET
000571 c001      	RJMP __CFD1U0
                 __CFD1:
000572 94e8      	CLT
                 __CFD1U0:
000573 935f      	PUSH R21
000574 dff2      	RCALL __UNPACK1
000575 3870      	CPI  R23,0x80
000576 f018      	BRLO __CFD10
000577 3f7f      	CPI  R23,0xFF
000578 f408      	BRCC __CFD10
000579 c0a7      	RJMP __ZERORES
                 __CFD10:
00057a e156      	LDI  R21,22
00057b 1b57      	SUB  R21,R23
00057c f4aa      	BRPL __CFD11
00057d 9551      	NEG  R21
00057e 3058      	CPI  R21,8
00057f f40e      	BRTC __CFD19
000580 3059      	CPI  R21,9
                 __CFD19:
000581 f030      	BRLO __CFD17
000582 efef      	SER  R30
000583 efff      	SER  R31
000584 ef6f      	SER  R22
000585 e77f      	LDI  R23,0x7F
000586 f977      	BLD  R23,7
000587 c01a      	RJMP __CFD15
                 __CFD17:
000588 2777      	CLR  R23
000589 2355      	TST  R21
00058a f0b9      	BREQ __CFD15
                 __CFD18:
00058b 0fee      	LSL  R30
00058c 1fff      	ROL  R31
00058d 1f66      	ROL  R22
00058e 1f77      	ROL  R23
00058f 955a      	DEC  R21
000590 f7d1      	BRNE __CFD18
000591 c010      	RJMP __CFD15
                 __CFD11:
000592 2777      	CLR  R23
                 __CFD12:
000593 3058      	CPI  R21,8
000594 f028      	BRLO __CFD13
000595 2fef      	MOV  R30,R31
000596 2ff6      	MOV  R31,R22
000597 2f67      	MOV  R22,R23
000598 5058      	SUBI R21,8
000599 cff9      	RJMP __CFD12
                 __CFD13:
00059a 2355      	TST  R21
00059b f031      	BREQ __CFD15
                 __CFD14:
00059c 9576      	LSR  R23
00059d 9567      	ROR  R22
00059e 95f7      	ROR  R31
00059f 95e7      	ROR  R30
0005a0 955a      	DEC  R21
0005a1 f7d1      	BRNE __CFD14
                 __CFD15:
0005a2 2000      	TST  R0
0005a3 f40a      	BRPL __CFD16
0005a4 d129      	RCALL __ANEGD1
                 __CFD16:
0005a5 915f      	POP  R21
0005a6 9508      	RET
                 
                 __CDF1U:
0005a7 9468      	SET
0005a8 c001      	RJMP __CDF1U0
                 __CDF1:
0005a9 94e8      	CLT
                 __CDF1U0:
0005aa 9730      	SBIW R30,0
0005ab 4060      	SBCI R22,0
0005ac 4070      	SBCI R23,0
0005ad f0b1      	BREQ __CDF10
0005ae 2400      	CLR  R0
0005af f026      	BRTS __CDF11
0005b0 2377      	TST  R23
0005b1 f412      	BRPL __CDF11
0005b2 9400      	COM  R0
0005b3 d11a      	RCALL __ANEGD1
                 __CDF11:
0005b4 2e17      	MOV  R1,R23
0005b5 e17e      	LDI  R23,30
0005b6 2011      	TST  R1
                 __CDF12:
0005b7 f032      	BRMI __CDF13
0005b8 957a      	DEC  R23
0005b9 0fee      	LSL  R30
0005ba 1fff      	ROL  R31
0005bb 1f66      	ROL  R22
0005bc 1c11      	ROL  R1
0005bd cff9      	RJMP __CDF12
                 __CDF13:
0005be 2fef      	MOV  R30,R31
0005bf 2ff6      	MOV  R31,R22
0005c0 2d61      	MOV  R22,R1
0005c1 935f      	PUSH R21
0005c2 df8a      	RCALL __REPACK
0005c3 915f      	POP  R21
                 __CDF10:
0005c4 9508      	RET
                 
                 __SWAPACC:
0005c5 934f      	PUSH R20
0005c6 01af      	MOVW R20,R30
0005c7 01fd      	MOVW R30,R26
0005c8 01da      	MOVW R26,R20
0005c9 01ab      	MOVW R20,R22
0005ca 01bc      	MOVW R22,R24
0005cb 01ca      	MOVW R24,R20
0005cc 2d40      	MOV  R20,R0
0005cd 2c01      	MOV  R0,R1
0005ce 2e14      	MOV  R1,R20
0005cf 914f      	POP  R20
0005d0 9508      	RET
                 
                 __UADD12:
0005d1 0fea      	ADD  R30,R26
0005d2 1ffb      	ADC  R31,R27
0005d3 1f68      	ADC  R22,R24
0005d4 9508      	RET
                 
                 __NEGMAN1:
0005d5 95e0      	COM  R30
0005d6 95f0      	COM  R31
0005d7 9560      	COM  R22
0005d8 5fef      	SUBI R30,-1
0005d9 4fff      	SBCI R31,-1
0005da 4f6f      	SBCI R22,-1
0005db 9508      	RET
                 
                 __SUBF12:
0005dc 935f      	PUSH R21
0005dd df81      	RCALL __UNPACK
0005de 3890      	CPI  R25,0x80
0005df f171      	BREQ __ADDF129
0005e0 e850      	LDI  R21,0x80
0005e1 2615      	EOR  R1,R21
                 
0005e2 c004      	RJMP __ADDF120
                 
                 __ADDF12:
0005e3 935f      	PUSH R21
0005e4 df7a      	RCALL __UNPACK
0005e5 3890      	CPI  R25,0x80
0005e6 f139      	BREQ __ADDF129
                 
                 __ADDF120:
0005e7 3870      	CPI  R23,0x80
0005e8 f121      	BREQ __ADDF128
                 __ADDF121:
0005e9 2f57      	MOV  R21,R23
0005ea 1b59      	SUB  R21,R25
0005eb f12b      	BRVS __ADDF1211
0005ec f412      	BRPL __ADDF122
0005ed dfd7      	RCALL __SWAPACC
0005ee cffa      	RJMP __ADDF121
                 __ADDF122:
0005ef 3158      	CPI  R21,24
0005f0 f018      	BRLO __ADDF123
0005f1 27aa      	CLR  R26
0005f2 27bb      	CLR  R27
0005f3 2788      	CLR  R24
                 __ADDF123:
0005f4 3058      	CPI  R21,8
0005f5 f028      	BRLO __ADDF124
0005f6 2fab      	MOV  R26,R27
0005f7 2fb8      	MOV  R27,R24
0005f8 2788      	CLR  R24
0005f9 5058      	SUBI R21,8
0005fa cff9      	RJMP __ADDF123
                 __ADDF124:
0005fb 2355      	TST  R21
0005fc f029      	BREQ __ADDF126
                 __ADDF125:
0005fd 9586      	LSR  R24
0005fe 95b7      	ROR  R27
0005ff 95a7      	ROR  R26
000600 955a      	DEC  R21
000601 f7d9      	BRNE __ADDF125
                 __ADDF126:
000602 2d50      	MOV  R21,R0
000603 2551      	EOR  R21,R1
000604 f072      	BRMI __ADDF127
000605 dfcb      	RCALL __UADD12
000606 f438      	BRCC __ADDF129
000607 9567      	ROR  R22
000608 95f7      	ROR  R31
000609 95e7      	ROR  R30
00060a 9573      	INC  R23
00060b f413      	BRVC __ADDF129
00060c c020      	RJMP __MAXRES
                 __ADDF128:
00060d dfb7      	RCALL __SWAPACC
                 __ADDF129:
00060e df3e      	RCALL __REPACK
00060f 915f      	POP  R21
000610 9508      	RET
                 __ADDF1211:
000611 f7d8      	BRCC __ADDF128
000612 cffb      	RJMP __ADDF129
                 __ADDF127:
000613 1bea      	SUB  R30,R26
000614 0bfb      	SBC  R31,R27
000615 0b68      	SBC  R22,R24
000616 f051      	BREQ __ZERORES
000617 f410      	BRCC __ADDF1210
000618 9400      	COM  R0
000619 dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
00061a 2366      	TST  R22
00061b f392      	BRMI __ADDF129
00061c 0fee      	LSL  R30
00061d 1fff      	ROL  R31
00061e 1f66      	ROL  R22
00061f 957a      	DEC  R23
000620 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
000621 27ee      	CLR  R30
000622 27ff      	CLR  R31
000623 2766      	CLR  R22
000624 2777      	CLR  R23
000625 915f      	POP  R21
000626 9508      	RET
                 
                 __MINRES:
000627 efef      	SER  R30
000628 efff      	SER  R31
000629 e76f      	LDI  R22,0x7F
00062a ef7f      	SER  R23
00062b 915f      	POP  R21
00062c 9508      	RET
                 
                 __MAXRES:
00062d efef      	SER  R30
00062e efff      	SER  R31
00062f e76f      	LDI  R22,0x7F
000630 e77f      	LDI  R23,0x7F
000631 915f      	POP  R21
000632 9508      	RET
                 
                 __MULF12:
000633 935f      	PUSH R21
000634 df2a      	RCALL __UNPACK
000635 3870      	CPI  R23,0x80
000636 f351      	BREQ __ZERORES
000637 3890      	CPI  R25,0x80
000638 f341      	BREQ __ZERORES
000639 2401      	EOR  R0,R1
00063a 9408      	SEC
00063b 1f79      	ADC  R23,R25
00063c f423      	BRVC __MULF124
00063d f31c      	BRLT __ZERORES
                 __MULF125:
00063e 2000      	TST  R0
00063f f33a      	BRMI __MINRES
000640 cfec      	RJMP __MAXRES
                 __MULF124:
000641 920f      	PUSH R0
000642 931f      	PUSH R17
000643 932f      	PUSH R18
000644 933f      	PUSH R19
000645 934f      	PUSH R20
000646 2711      	CLR  R17
000647 2722      	CLR  R18
000648 2799      	CLR  R25
000649 9f68      	MUL  R22,R24
00064a 01a0      	MOVW R20,R0
00064b 9f8f      	MUL  R24,R31
00064c 2d30      	MOV  R19,R0
00064d 0d41      	ADD  R20,R1
00064e 1f59      	ADC  R21,R25
00064f 9f6b      	MUL  R22,R27
000650 0d30      	ADD  R19,R0
000651 1d41      	ADC  R20,R1
000652 1f59      	ADC  R21,R25
000653 9f8e      	MUL  R24,R30
000654 d027      	RCALL __MULF126
000655 9fbf      	MUL  R27,R31
000656 d025      	RCALL __MULF126
000657 9f6a      	MUL  R22,R26
000658 d023      	RCALL __MULF126
000659 9fbe      	MUL  R27,R30
00065a d01d      	RCALL __MULF127
00065b 9faf      	MUL  R26,R31
00065c d01b      	RCALL __MULF127
00065d 9fae      	MUL  R26,R30
00065e 0d11      	ADD  R17,R1
00065f 1f29      	ADC  R18,R25
000660 1f39      	ADC  R19,R25
000661 1f49      	ADC  R20,R25
000662 1f59      	ADC  R21,R25
000663 2fe3      	MOV  R30,R19
000664 2ff4      	MOV  R31,R20
000665 2f65      	MOV  R22,R21
000666 2f52      	MOV  R21,R18
000667 914f      	POP  R20
000668 913f      	POP  R19
000669 912f      	POP  R18
00066a 911f      	POP  R17
00066b 900f      	POP  R0
00066c 2366      	TST  R22
00066d f02a      	BRMI __MULF122
00066e 0f55      	LSL  R21
00066f 1fee      	ROL  R30
000670 1fff      	ROL  R31
000671 1f66      	ROL  R22
000672 c002      	RJMP __MULF123
                 __MULF122:
000673 9573      	INC  R23
000674 f24b      	BRVS __MULF125
                 __MULF123:
000675 decd      	RCALL __ROUND_REPACK
000676 915f      	POP  R21
000677 9508      	RET
                 
                 __MULF127:
000678 0d10      	ADD  R17,R0
000679 1d21      	ADC  R18,R1
00067a 1f39      	ADC  R19,R25
00067b c002      	RJMP __MULF128
                 __MULF126:
00067c 0d20      	ADD  R18,R0
00067d 1d31      	ADC  R19,R1
                 __MULF128:
00067e 1f49      	ADC  R20,R25
00067f 1f59      	ADC  R21,R25
000680 9508      	RET
                 
                 __DIVF21:
000681 935f      	PUSH R21
000682 dedc      	RCALL __UNPACK
000683 3870      	CPI  R23,0x80
000684 f421      	BRNE __DIVF210
000685 2011      	TST  R1
                 __DIVF211:
000686 f40a      	BRPL __DIVF219
000687 cf9f      	RJMP __MINRES
                 __DIVF219:
000688 cfa4      	RJMP __MAXRES
                 __DIVF210:
000689 3890      	CPI  R25,0x80
00068a f409      	BRNE __DIVF218
                 __DIVF217:
00068b cf95      	RJMP __ZERORES
                 __DIVF218:
00068c 2401      	EOR  R0,R1
00068d 9408      	SEC
00068e 0b97      	SBC  R25,R23
00068f f41b      	BRVC __DIVF216
000690 f3d4      	BRLT __DIVF217
000691 2000      	TST  R0
000692 cff3      	RJMP __DIVF211
                 __DIVF216:
000693 2f79      	MOV  R23,R25
000694 931f      	PUSH R17
000695 932f      	PUSH R18
000696 933f      	PUSH R19
000697 934f      	PUSH R20
000698 2411      	CLR  R1
000699 2711      	CLR  R17
00069a 2722      	CLR  R18
00069b 2733      	CLR  R19
00069c 2744      	CLR  R20
00069d 2755      	CLR  R21
00069e e290      	LDI  R25,32
                 __DIVF212:
00069f 17ae      	CP   R26,R30
0006a0 07bf      	CPC  R27,R31
0006a1 0786      	CPC  R24,R22
0006a2 0741      	CPC  R20,R17
0006a3 f030      	BRLO __DIVF213
0006a4 1bae      	SUB  R26,R30
0006a5 0bbf      	SBC  R27,R31
0006a6 0b86      	SBC  R24,R22
0006a7 0b41      	SBC  R20,R17
0006a8 9408      	SEC
0006a9 c001      	RJMP __DIVF214
                 __DIVF213:
0006aa 9488      	CLC
                 __DIVF214:
0006ab 1f55      	ROL  R21
0006ac 1f22      	ROL  R18
0006ad 1f33      	ROL  R19
0006ae 1c11      	ROL  R1
0006af 1faa      	ROL  R26
0006b0 1fbb      	ROL  R27
0006b1 1f88      	ROL  R24
0006b2 1f44      	ROL  R20
0006b3 959a      	DEC  R25
0006b4 f751      	BRNE __DIVF212
0006b5 01f9      	MOVW R30,R18
0006b6 2d61      	MOV  R22,R1
0006b7 914f      	POP  R20
0006b8 913f      	POP  R19
0006b9 912f      	POP  R18
0006ba 911f      	POP  R17
0006bb 2366      	TST  R22
0006bc f032      	BRMI __DIVF215
0006bd 0f55      	LSL  R21
0006be 1fee      	ROL  R30
0006bf 1fff      	ROL  R31
0006c0 1f66      	ROL  R22
0006c1 957a      	DEC  R23
0006c2 f243      	BRVS __DIVF217
                 __DIVF215:
0006c3 de7f      	RCALL __ROUND_REPACK
0006c4 915f      	POP  R21
0006c5 9508      	RET
                 
                 __ADDW2R15:
0006c6 2400      	CLR  R0
0006c7 0daf      	ADD  R26,R15
0006c8 1db0      	ADC  R27,R0
0006c9 9508      	RET
                 
                 __ANEGW1:
0006ca 95f1      	NEG  R31
0006cb 95e1      	NEG  R30
0006cc 40f0      	SBCI R31,0
0006cd 9508      	RET
                 
                 __ANEGD1:
0006ce 95f0      	COM  R31
0006cf 9560      	COM  R22
0006d0 9570      	COM  R23
0006d1 95e1      	NEG  R30
0006d2 4fff      	SBCI R31,-1
0006d3 4f6f      	SBCI R22,-1
0006d4 4f7f      	SBCI R23,-1
0006d5 9508      	RET
                 
                 __ASRW8:
0006d6 2fef      	MOV  R30,R31
0006d7 27ff      	CLR  R31
0006d8 fde7      	SBRC R30,7
0006d9 efff      	SER  R31
0006da 9508      	RET
                 
                 __CWD1:
0006db 2f6f      	MOV  R22,R31
0006dc 0f66      	ADD  R22,R22
0006dd 0b66      	SBC  R22,R22
0006de 2f76      	MOV  R23,R22
0006df 9508      	RET
                 
                 __MULW12U:
0006e0 9ffa      	MUL  R31,R26
0006e1 2df0      	MOV  R31,R0
0006e2 9feb      	MUL  R30,R27
0006e3 0df0      	ADD  R31,R0
0006e4 9fea      	MUL  R30,R26
0006e5 2de0      	MOV  R30,R0
0006e6 0df1      	ADD  R31,R1
0006e7 9508      	RET
                 
                 __GETW1P:
0006e8 91ed      	LD   R30,X+
0006e9 91fc      	LD   R31,X
0006ea 9711      	SBIW R26,1
0006eb 9508      	RET
                 
                 __GETD1P:
0006ec 91ed      	LD   R30,X+
0006ed 91fd      	LD   R31,X+
0006ee 916d      	LD   R22,X+
0006ef 917c      	LD   R23,X
0006f0 9713      	SBIW R26,3
0006f1 9508      	RET
                 
                 __PUTDP1:
0006f2 93ed      	ST   X+,R30
0006f3 93fd      	ST   X+,R31
0006f4 936d      	ST   X+,R22
0006f5 937c      	ST   X,R23
0006f6 9508      	RET
                 
                 __GETD1S0:
0006f7 81e8      	LD   R30,Y
0006f8 81f9      	LDD  R31,Y+1
0006f9 816a      	LDD  R22,Y+2
0006fa 817b      	LDD  R23,Y+3
0006fb 9508      	RET
                 
                 __PUTD1S0:
0006fc 83e8      	ST   Y,R30
0006fd 83f9      	STD  Y+1,R31
0006fe 836a      	STD  Y+2,R22
0006ff 837b      	STD  Y+3,R23
000700 9508      	RET
                 
                 __PUTPARD1L:
000701 e060      	LDI  R22,0
000702 e070      	LDI  R23,0
                 __PUTPARD1:
000703 937a      	ST   -Y,R23
000704 936a      	ST   -Y,R22
000705 93fa      	ST   -Y,R31
000706 93ea      	ST   -Y,R30
000707 9508      	RET
                 
                 __SWAPD12:
000708 2e18      	MOV  R1,R24
000709 2f86      	MOV  R24,R22
00070a 2d61      	MOV  R22,R1
00070b 2e19      	MOV  R1,R25
00070c 2f97      	MOV  R25,R23
00070d 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
00070e 2e1b      	MOV  R1,R27
00070f 2fbf      	MOV  R27,R31
000710 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
000711 2e1a      	MOV  R1,R26
000712 2fae      	MOV  R26,R30
000713 2de1      	MOV  R30,R1
000714 9508      	RET
                 
                 __SAVELOCR6:
000715 935a      	ST   -Y,R21
                 __SAVELOCR5:
000716 934a      	ST   -Y,R20
                 __SAVELOCR4:
000717 933a      	ST   -Y,R19
                 __SAVELOCR3:
000718 932a      	ST   -Y,R18
                 __SAVELOCR2:
000719 931a      	ST   -Y,R17
00071a 930a      	ST   -Y,R16
00071b 9508      	RET
                 
                 __LOADLOCR6:
00071c 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00071d 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00071e 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00071f 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000720 8119      	LDD  R17,Y+1
000721 8108      	LD   R16,Y
000722 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
000723 0fac      	ADD  R26,R28
000724 1fbd      	ADC  R27,R29
                 __INITLOC0:
000725 9005      	LPM  R0,Z+
000726 920d      	ST   X+,R0
000727 958a      	DEC  R24
000728 f7e1      	BRNE __INITLOC0
000729 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :  40 r1 :  31 r2 :   0 r3 :   0 r4 :   4 r5 :   3 r6 :   4 r7 :   2 
r8 :   0 r9 :   6 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  21 r17:  38 r18:  36 r19:  52 r20:  47 r21:  81 r22:  66 r23:  57 
r24:  39 r25:  35 r26:  94 r27:  59 r28:  33 r29:   2 r30: 406 r31: 192 
x  :  51 y  : 248 z  :  19 
Registers used: 27 out of 35 (77.1%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  21 add   :  14 
adiw  :  25 and   :   2 andi  :   6 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   4 brcs  :   4 break :   0 breq  :  33 
brge  :  10 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  14 
brlt  :   4 brmi  :   8 brne  :  37 brpl  :   6 brsh  :   2 brtc  :   1 
brts  :   1 brvc  :   4 brvs  :   4 bset  :   1 bst   :   0 call  :  89 
cbi   :   4 cbr   :   0 clc   :   1 clh   :   0 cli   :   1 cln   :   0 
clr   :  32 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   8 
cp    :   8 cpc   :   9 cpi   :  62 cpse  :   0 dec   :   9 des   :   0 
elpm  :   0 eor   :  11 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   1 
ijmp  :   0 in    :  24 inc   :   6 jmp   :  41 ld    :  40 ldd   :  90 
ldi   : 172 lds   :   5 lpm   :  11 lsl   :  11 lsr   :   3 mov   :  70 
movw  :  44 mul   :  13 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 
or    :   1 ori   :   1 out   :  22 pop   :  41 push  :  41 rcall :  29 
ret   :  57 reti  :   3 rjmp  :  85 rol   :  24 ror   :  13 sbc   :   7 
sbci  :  24 sbi   :   7 sbic  :   0 sbis  :   3 sbiw  :  24 sbr   :   0 
sbrc  :   2 sbrs  :   1 sec   :   3 seh   :   0 sei   :   0 sen   :   0 
ser   :  10 ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    : 130 std   :  48 sts   :  12 sub   :   4 subi  :  26 
swap  :   0 tst   :  17 wdr   :   1 
Instructions used: 76 out of 117 (65.0%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000e54   3514    154   3668  131072   2.8%
[.dseg] 0x000100 0x00057c      0    124    124    4351   2.8%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 8 warnings
