
AVRASM ver. 2.1.30  C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm Thu Jan 30 16:12:03 2020

C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1061): warning: Register r5 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1062): warning: Register r4 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1063): warning: Register r7 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1064): warning: Register r6 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1065): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega128
                 ;Program type             : Application
                 ;Clock frequency          : 14.745600 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : float, width, precision
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 1024 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : No
                 ;global 'const' stored in FLASH: Yes
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4351
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _TIMER2_OVERFLOW=R5
                 	.DEF _PACKET_BUFF_IDX=R4
                 	.DEF _TIMER0_OVERFLOW=R7
                 	.DEF _VELOCITY_BUFF_IDX=R6
                 	.DEF _CHECK_GETS=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0093 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0237 	JMP  _timer2_comp
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 023b 	JMP  _timer0_comp
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 01f0 	JMP  _usart0_rxc
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 020b 	JMP  _usart1_rxc
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _0x53:
000046 0000
000047 0000
000048 0000
000049 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00004a 0000
00004b 0000
00004c 0000
00004d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00004e 0000
00004f 0000
000050 0000
000051 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000052 0000
000053 0000
000054 0000
000055 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000056 0000
000057 0000
000058 0000
000059 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00005a 0000
00005b 0000
00005c 0000
00005d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00005e 0000
00005f 0000
000060 0000
000061 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000062 0000
000063 0000
000064 0000
000065 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000066 0000
000067 0000
000068 0000
000069 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00006a 0000
00006b 0000
00006c 0000
00006d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00006e 0000
00006f 0000
000070 0000
000071 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000072 0000
000073 0000
000074 0000
000075 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000076 0000
000077 0000
000078 0000
000079 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00007a 0000
00007b 0000      	.DB  0x0,0x0,0x0,0x0
                 _0x69:
00007c 0000
00007d 0000
00007e 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0
                 _0x0:
00007f 253c
000080 2c64
000081 6425
000082 003e      	.DB  0x3C,0x25,0x64,0x2C,0x25,0x64,0x3E,0x0
                 _0x2000000:
000083 4e2d
000084 4e41
C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1130): warning: .cseg .db misalignment - padding zero byte
000085 0000      	.DB  0x2D,0x4E,0x41,0x4E,0x0
                 _0x2080060:
C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1132): warning: .cseg .db misalignment - padding zero byte
000086 0001      	.DB  0x1
                 _0x2080000:
000087 4e2d
000088 4e41
000089 4900
00008a 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1135): warning: .cseg .db misalignment - padding zero byte
00008b 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00008c 0006      	.DW  0x06
00008d 0004      	.DW  0x04
00008e 00f8      	.DW  _0x69*2
                 
00008f 0001      	.DW  0x01
000090 0578      	.DW  __seed_G104
000091 010c      	.DW  _0x2080060*2
                 
                 _0xFFFFFFFF:
000092 0000      	.DW  0
                 
                 __RESET:
000093 94f8      	CLI
000094 27ee      	CLR  R30
000095 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000096 e0f1      	LDI  R31,1
000097 bff5      	OUT  MCUCR,R31
000098 bfe5      	OUT  MCUCR,R30
000099 93e0 006c 	STS  XMCRB,R30
                 
                 ;DISABLE WATCHDOG
00009b e1f8      	LDI  R31,0x18
00009c bdf1      	OUT  WDTCR,R31
00009d bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
00009e e08d      	LDI  R24,(14-2)+1
00009f e0a2      	LDI  R26,2
0000a0 27bb      	CLR  R27
                 __CLEAR_REG:
0000a1 93ed      	ST   X+,R30
0000a2 958a      	DEC  R24
0000a3 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000a4 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000a5 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000a6 e0a0      	LDI  R26,LOW(__SRAM_START)
0000a7 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
0000a8 93ed      	ST   X+,R30
0000a9 9701      	SBIW R24,1
0000aa f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000ab e1e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000ac e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000ad 9185      	LPM  R24,Z+
0000ae 9195      	LPM  R25,Z+
0000af 9700      	SBIW R24,0
0000b0 f061      	BREQ __GLOBAL_INI_END
0000b1 91a5      	LPM  R26,Z+
0000b2 91b5      	LPM  R27,Z+
0000b3 9005      	LPM  R0,Z+
0000b4 9015      	LPM  R1,Z+
0000b5 01bf      	MOVW R22,R30
0000b6 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000b7 9005      	LPM  R0,Z+
0000b8 920d      	ST   X+,R0
0000b9 9701      	SBIW R24,1
0000ba f7e1      	BRNE __GLOBAL_INI_LOOP
0000bb 01fb      	MOVW R30,R22
0000bc cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
0000bd bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000be efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000bf bfed      	OUT  SPL,R30
0000c0 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000c1 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000c2 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000c3 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000c4 940c 0241 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdio.h>
                 ;#include <delay.h>
                 ;
                 ;#define bps_115200 0x0007
                 ;
                 ;#define POLYNORMIAL 0xA001
                 ;
                 ;#define CHARACTER3_5 25
                 ;#define TRUE 0
                 ;#define FALSE 1
                 ;
                 ;#define R 0x01
                 ;#define L 0x02
                 ;#define START 1
                 ;#define STOP 2
                 ;
                 ;#define Length 0.29
                 ;#define Gearratio 25
                 ;
                 ;unsigned char TIMER2_OVERFLOW = 0;
                 ;unsigned char PACKET_BUFF[100] = {0,};
                 ;unsigned char PACKET_BUFF_IDX = 0;
                 ;
                 ;unsigned char TIMER0_OVERFLOW = 0;
                 ;unsigned char VELOCITY_BUFF[20] = {0,};
                 ;unsigned char VELOCITY_BUFF_IDX = 0;
                 ;unsigned char CHECK_GETS = 0;
                 ;
                 ;void usart1_init(int bps)
                 ; 0000 001F {
                 
                 	.CSEG
                 _usart1_init:
                 ; 0000 0020     UCSR1A = 0x00;
                 ;	bps -> Y+0
0000c6 e0e0      	LDI  R30,LOW(0)
0000c7 93e0 009b 	STS  155,R30
                 ; 0000 0021     UCSR1B = (1<<RXEN1)|(1<<TXEN1)|(1<<RXCIE1); // RXCIE1 bit is recevie interrupt allow
0000c9 e9e8      	LDI  R30,LOW(152)
0000ca 93e0 009a 	STS  154,R30
                 ; 0000 0022     UCSR1C = (1<<UCSZ11)|(1<<UCSZ10);
0000cc e0e6      	LDI  R30,LOW(6)
0000cd 93e0 009d 	STS  157,R30
                 ; 0000 0023     UCSR1C &= ~(1<<UMSEL1);
0000cf 91e0 009d 	LDS  R30,157
0000d1 7bef      	ANDI R30,0xBF
0000d2 93e0 009d 	STS  157,R30
                 ; 0000 0024 
                 ; 0000 0025     UBRR1H = (unsigned char)((bps>>8)  & 0x00ff);
0000d4 81e8      	LD   R30,Y
0000d5 81f9      	LDD  R31,Y+1
0000d6 940e 06cb 	CALL __ASRW8
0000d8 93e0 0098 	STS  152,R30
                 ; 0000 0026     UBRR1L = (unsigned char)(bps & 0x00ff);
0000da 81e8      	LD   R30,Y
0000db 93e0 0099 	STS  153,R30
                 ; 0000 0027 }
0000dd c014      	RJMP _0x20A0005
                 ;
                 ;void usart0_init(int bps)
                 ; 0000 002A {
                 _usart0_init:
                 ; 0000 002B     UCSR0A = 0x00;
                 ;	bps -> Y+0
0000de e0e0      	LDI  R30,LOW(0)
0000df b9eb      	OUT  0xB,R30
                 ; 0000 002C     UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0); // RXCIE1 bit is recevie interrupt allow
0000e0 e9e8      	LDI  R30,LOW(152)
0000e1 b9ea      	OUT  0xA,R30
                 ; 0000 002D     UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
0000e2 e0e6      	LDI  R30,LOW(6)
0000e3 93e0 0095 	STS  149,R30
                 ; 0000 002E     UCSR0C &= ~(1<<UMSEL0);
0000e5 91e0 0095 	LDS  R30,149
0000e7 7bef      	ANDI R30,0xBF
0000e8 93e0 0095 	STS  149,R30
                 ; 0000 002F 
                 ; 0000 0030     UBRR0H = (unsigned char)((bps>>8)  & 0x00ff);
0000ea 81e8      	LD   R30,Y
0000eb 81f9      	LDD  R31,Y+1
0000ec 940e 06cb 	CALL __ASRW8
0000ee 93e0 0090 	STS  144,R30
                 ; 0000 0031     UBRR0L = (unsigned char)(bps & 0x00ff);
0000f0 81e8      	LD   R30,Y
0000f1 b9e9      	OUT  0x9,R30
                 ; 0000 0032 }
                 _0x20A0005:
0000f2 9622      	ADIW R28,2
0000f3 9508      	RET
                 ;
                 ;void timer2_init(void)
                 ; 0000 0035 {
                 _timer2_init:
                 ; 0000 0036     //TIMER2
                 ; 0000 0037     TCCR2 = (1<<WGM21)|(1<<CS22)|(1<<CS20);// CTC모드, 1024분주
0000f4 e0ed      	LDI  R30,LOW(13)
0000f5 bde5      	OUT  0x25,R30
                 ; 0000 0038 
                 ; 0000 0039     OCR2 = 40;
0000f6 e2e8      	LDI  R30,LOW(40)
0000f7 bde3      	OUT  0x23,R30
                 ; 0000 003A     TIMSK = (1<<OCIE2)|(1<<OCIE0);
0000f8 c004      	RJMP _0x20A0004
                 ; 0000 003B     //TIMSK = (1<<OCIE2);
                 ; 0000 003C }
                 ;void timer0_init(void)
                 ; 0000 003E {
                 _timer0_init:
                 ; 0000 003F     TCCR0 = (1<<WGM01)|(1<<CS02)|(1<<CS01)|(1<<CS00); // CTC모드, 1024분주
0000f9 e0ef      	LDI  R30,LOW(15)
0000fa bfe3      	OUT  0x33,R30
                 ; 0000 0040     OCR0 = 144;
0000fb e9e0      	LDI  R30,LOW(144)
0000fc bfe1      	OUT  0x31,R30
                 ; 0000 0041     TIMSK = (1<<OCIE2)|(1<<OCIE0);
                 _0x20A0004:
0000fd e8e2      	LDI  R30,LOW(130)
0000fe bfe7      	OUT  0x37,R30
                 ; 0000 0042 }
0000ff 9508      	RET
                 ;
                 ;void putch_USART1(char data)
                 ; 0000 0045 {
                 ; 0000 0046     while(!(UCSR1A & (1<<UDRE1))); // UDRE flag is USART Data Register Empty
                 ;	data -> Y+0
                 ; 0000 0047     UDR1 = data;
                 ; 0000 0048 }
                 ;
                 ;//USART 문자열 송신
                 ;void puts_USART1(char *str,char IDX)
                 ; 0000 004C {
                 ; 0000 004D     unsigned char i = 0;
                 ; 0000 004E 
                 ; 0000 004F     for(i = 0;i<IDX;i++)
                 ;	*str -> Y+2
                 ;	IDX -> Y+1
                 ;	i -> R17
                 ; 0000 0050     {
                 ; 0000 0051         putch_USART1(*(str+i));
                 ; 0000 0052     }
                 ; 0000 0053 
                 ; 0000 0054     for(i = 0; i<IDX; i++)
                 ; 0000 0055     {
                 ; 0000 0056         *(str+i) = 0;
                 ; 0000 0057     }
                 ; 0000 0058 }
                 ;
                 ;// void puts_USART1(char *str,char IDX)
                 ;// {
                 ;//     unsigned char i = 0;
                 ;
                 ;//     while(*str != 0)
                 ;//     {
                 ;//         putch_USART1(*(str+i));
                 ;//         i++;
                 ;//     }
                 ;
                 ;//     for(i = 0; i<IDX; i++)
                 ;//     {
                 ;//         *(str+i) = 0;
                 ;//     }
                 ;// }
                 ;
                 ;void puts_Modbus1(char *str,char IDX)
                 ; 0000 006B {
                 ; 0000 006C     unsigned char i = 0;
                 ; 0000 006D     UCSR0B &= ~(1<<RXEN0);
                 ;	*str -> Y+2
                 ;	IDX -> Y+1
                 ;	i -> R17
                 ; 0000 006E     if(TIMER2_OVERFLOW>0)
                 ; 0000 006F     {
                 ; 0000 0070         for(i = 0;i<IDX-1;i++) putch_USART1(*(str+i));
                 ; 0000 0072 for(i = 0; i<IDX; i++) *(str+i) = 0;
                 ; 0000 0073 }
                 ; 0000 0074     UCSR0B |= (1<<RXEN0);
                 ; 0000 0075 }
                 ;
                 ;void putch_USART0(char data)
                 ; 0000 0078 {
                 _putch_USART0:
                 ; 0000 0079     while(!(UCSR0A & (1<<UDRE0))); // UDRE flag is USART Data Register Empty
                 ;	data -> Y+0
                 _0x13:
000100 9b5d      	SBIS 0xB,5
000101 cffe      	RJMP _0x13
                 ; 0000 007A     UDR0 = data;
000102 81e8      	LD   R30,Y
000103 b9ec      	OUT  0xC,R30
                 ; 0000 007B }
000104 9621      	ADIW R28,1
000105 9508      	RET
                 ;
                 ;void puts_USART0(char *str,char IDX)
                 ; 0000 007E {
                 ; 0000 007F     //PACKET_BUFF[PACKET_BUFF_IDX] = 0;
                 ; 0000 0080     unsigned char i = 0;
                 ; 0000 0081     for(i = 0;i<IDX-1;i++)
                 ;	*str -> Y+2
                 ;	IDX -> Y+1
                 ;	i -> R17
                 ; 0000 0082     {
                 ; 0000 0083         putch_USART1(*(str+i));
                 ; 0000 0084     }
                 ; 0000 0085 
                 ; 0000 0086     for(i = 0; i<IDX; i++)
                 ; 0000 0087     {
                 ; 0000 0088         *(str+i) = 0;
                 ; 0000 0089     }
                 ; 0000 008A }
                 ;
                 ;unsigned short CRC16(unsigned char *puchMsg, int usDataLen)
                 ; 0000 008D {
                 _CRC16:
                 ; 0000 008E     int i;
                 ; 0000 008F     unsigned short crc, flag;
                 ; 0000 0090     crc = 0xffff;
000106 940e 070a 	CALL __SAVELOCR6
                 ;	*puchMsg -> Y+8
                 ;	usDataLen -> Y+6
                 ;	i -> R16,R17
                 ;	crc -> R18,R19
                 ;	flag -> R20,R21
                +
000108 ef2f     +LDI R18 , LOW ( - 1 )
000109 ef3f     +LDI R19 , HIGH ( - 1 )
                 	__GETWRN 18,19,-1
                 ; 0000 0091 
                 ; 0000 0092     while(usDataLen--){
                 _0x1C:
00010a 81ee      	LDD  R30,Y+6
00010b 81ff      	LDD  R31,Y+6+1
00010c 9731      	SBIW R30,1
00010d 83ee      	STD  Y+6,R30
00010e 83ff      	STD  Y+6+1,R31
00010f 9631      	ADIW R30,1
000110 f0f9      	BREQ _0x1E
                 ; 0000 0093         crc ^= *puchMsg++;
000111 85a8      	LDD  R26,Y+8
000112 85b9      	LDD  R27,Y+8+1
000113 91ed      	LD   R30,X+
000114 87a8      	STD  Y+8,R26
000115 87b9      	STD  Y+8+1,R27
000116 e0f0      	LDI  R31,0
                +
000117 272e     +EOR R18 , R30
000118 273f     +EOR R19 , R31
                 	__EORWRR 18,19,30,31
                 ; 0000 0094 
                 ; 0000 0095         for (i=0; i<8; i++){
                +
000119 e000     +LDI R16 , LOW ( 0 )
00011a e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x20:
                +
00011b 3008     +CPI R16 , LOW ( 8 )
00011c e0e0     +LDI R30 , HIGH ( 8 )
00011d 071e     +CPC R17 , R30
                 	__CPWRN 16,17,8
00011e f484      	BRGE _0x21
                 ; 0000 0096             flag = crc & 0x0001;
00011f 01f9      	MOVW R30,R18
000120 70e1      	ANDI R30,LOW(0x1)
000121 70f0      	ANDI R31,HIGH(0x1)
000122 01af      	MOVW R20,R30
                 ; 0000 0097             crc >>= 1;
000123 9536      	LSR  R19
000124 9527      	ROR  R18
                 ; 0000 0098             if(flag) crc ^= POLYNORMIAL;
000125 2e04      	MOV  R0,R20
000126 2a05      	OR   R0,R21
000127 f021      	BREQ _0x22
000128 e0e1      	LDI  R30,LOW(40961)
000129 eaf0      	LDI  R31,HIGH(40961)
                +
00012a 272e     +EOR R18 , R30
00012b 273f     +EOR R19 , R31
                 	__EORWRR 18,19,30,31
                 ; 0000 0099         }
                 _0x22:
                +
00012c 5f0f     +SUBI R16 , LOW ( - 1 )
00012d 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00012e cfec      	RJMP _0x20
                 _0x21:
                 ; 0000 009A     }
00012f cfda      	RJMP _0x1C
                 _0x1E:
                 ; 0000 009B     return crc;
000130 01f9      	MOVW R30,R18
000131 940e 0711 	CALL __LOADLOCR6
000133 962a      	ADIW R28,10
000134 9508      	RET
                 ; 0000 009C }
                 ;
                 ;int RTU_WriteOperate0(char device_address,int starting_address,int data)
                 ; 0000 009F {
                 _RTU_WriteOperate0:
                 ; 0000 00A0     char protocol[8];
                 ; 0000 00A1     unsigned short crc16;
                 ; 0000 00A2     int i=0;
                 ; 0000 00A3     //PACKET_BUFF_IDX = 0;
                 ; 0000 00A4 
                 ; 0000 00A5     protocol[0]=device_address;
000135 9728      	SBIW R28,8
000136 940e 070c 	CALL __SAVELOCR4
                 ;	device_address -> Y+16
                 ;	starting_address -> Y+14
                 ;	data -> Y+12
                 ;	protocol -> Y+4
                 ;	crc16 -> R16,R17
                 ;	i -> R18,R19
                +
000138 e020     +LDI R18 , LOW ( 0 )
000139 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
00013a 89e8      	LDD  R30,Y+16
00013b 83ec      	STD  Y+4,R30
                 ; 0000 00A6     protocol[1]=0x06;
00013c e0e6      	LDI  R30,LOW(6)
00013d 83ed      	STD  Y+5,R30
                 ; 0000 00A7     protocol[2]=((starting_address>>8)  & 0x00ff);
00013e 85ee      	LDD  R30,Y+14
00013f 85ff      	LDD  R31,Y+14+1
000140 940e 06cb 	CALL __ASRW8
000142 83ee      	STD  Y+6,R30
                 ; 0000 00A8     protocol[3]=((starting_address)     & 0x00ff);
000143 85ee      	LDD  R30,Y+14
000144 83ef      	STD  Y+7,R30
                 ; 0000 00A9     protocol[4]=((data>>8)              & 0x00ff);
000145 85ec      	LDD  R30,Y+12
000146 85fd      	LDD  R31,Y+12+1
000147 940e 06cb 	CALL __ASRW8
000149 87e8      	STD  Y+8,R30
                 ; 0000 00AA     protocol[5]=((data)                 & 0x00ff);
00014a 85ec      	LDD  R30,Y+12
00014b 87e9      	STD  Y+9,R30
                 ; 0000 00AB     protocol[6]=0;
00014c e0e0      	LDI  R30,LOW(0)
00014d 87ea      	STD  Y+10,R30
                 ; 0000 00AC     protocol[7]=0;
00014e 87eb      	STD  Y+11,R30
                 ; 0000 00AD 
                 ; 0000 00AE     crc16 = CRC16(protocol, 6);
00014f 01fe      	MOVW R30,R28
000150 9634      	ADIW R30,4
000151 93fa      	ST   -Y,R31
000152 93ea      	ST   -Y,R30
000153 e0e6      	LDI  R30,LOW(6)
000154 e0f0      	LDI  R31,HIGH(6)
000155 93fa      	ST   -Y,R31
000156 93ea      	ST   -Y,R30
000157 dfae      	RCALL _CRC16
000158 018f      	MOVW R16,R30
                 ; 0000 00AF 
                 ; 0000 00B0     protocol[6] = (unsigned char)((crc16>>0) & 0x00ff);
000159 01f8      	MOVW R30,R16
00015a 87ea      	STD  Y+10,R30
                 ; 0000 00B1     protocol[7] = (unsigned char)((crc16>>8) & 0x00ff);
                +
00015b 871b     +STD Y + 11 , R17
                 	__PUTBSR 17,11
                 ; 0000 00B2 
                 ; 0000 00B3 
                 ; 0000 00B4     for(i=0;i<8;i++)
                +
00015c e020     +LDI R18 , LOW ( 0 )
00015d e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x24:
                +
00015e 3028     +CPI R18 , LOW ( 8 )
00015f e0e0     +LDI R30 , HIGH ( 8 )
000160 073e     +CPC R19 , R30
                 	__CPWRN 18,19,8
000161 f454      	BRGE _0x25
                 ; 0000 00B5     {
                 ; 0000 00B6         putch_USART0(*(protocol+i));
000162 01de      	MOVW R26,R28
000163 9614      	ADIW R26,4
000164 0fa2      	ADD  R26,R18
000165 1fb3      	ADC  R27,R19
000166 91ec      	LD   R30,X
000167 93ea      	ST   -Y,R30
000168 df97      	RCALL _putch_USART0
                 ; 0000 00B7     }
                +
000169 5f2f     +SUBI R18 , LOW ( - 1 )
00016a 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00016b cff2      	RJMP _0x24
                 _0x25:
                 ; 0000 00B8 }
00016c 940e 0713 	CALL __LOADLOCR4
00016e 9661      	ADIW R28,17
00016f 9508      	RET
                 ;
                 ;int RTU_WriteOperate1(char device_address,int starting_address,int data)
                 ; 0000 00BB {
                 ; 0000 00BC     char protocol[8];
                 ; 0000 00BD     unsigned short crc16;
                 ; 0000 00BE     int i=0;
                 ; 0000 00BF    // PACKET_BUFF_IDX = 0;
                 ; 0000 00C0 
                 ; 0000 00C1     protocol[0]=device_address;
                 ;	device_address -> Y+16
                 ;	starting_address -> Y+14
                 ;	data -> Y+12
                 ;	protocol -> Y+4
                 ;	crc16 -> R16,R17
                 ;	i -> R18,R19
                 ; 0000 00C2     protocol[1]=0x06;
                 ; 0000 00C3     protocol[2]=((starting_address>>8)  & 0x00ff);
                 ; 0000 00C4     protocol[3]=((starting_address)     & 0x00ff);
                 ; 0000 00C5     protocol[4]=((data>>8)              & 0x00ff);
                 ; 0000 00C6     protocol[5]=((data)                 & 0x00ff);
                 ; 0000 00C7     protocol[6]=0;
                 ; 0000 00C8     protocol[7]=0;
                 ; 0000 00C9 
                 ; 0000 00CA     crc16 = CRC16(protocol, 6);
                 ; 0000 00CB 
                 ; 0000 00CC     protocol[6] = (unsigned char)((crc16>>0) & 0x00ff);
                 ; 0000 00CD     protocol[7] = (unsigned char)((crc16>>8) & 0x00ff);
                 ; 0000 00CE 
                 ; 0000 00CF 
                 ; 0000 00D0     for(i=0;i<8;i++)
                 ; 0000 00D1     {
                 ; 0000 00D2         putch_USART1(*(protocol+i));
                 ; 0000 00D3     }
                 ; 0000 00D4 }
                 ;
                 ;int RTU_ReedOperate0(char device_address,int starting_address,int data)
                 ; 0000 00D7 {
                 ; 0000 00D8     char protocol[8];
                 ; 0000 00D9     unsigned short crc16;
                 ; 0000 00DA     int i=0;
                 ; 0000 00DB     //PACKET_BUFF_IDX = 0;
                 ; 0000 00DC 
                 ; 0000 00DD     protocol[0]=device_address;
                 ;	device_address -> Y+16
                 ;	starting_address -> Y+14
                 ;	data -> Y+12
                 ;	protocol -> Y+4
                 ;	crc16 -> R16,R17
                 ;	i -> R18,R19
                 ; 0000 00DE     protocol[1]=0x03;
                 ; 0000 00DF     protocol[2]=((starting_address>>8)  & 0x00ff);
                 ; 0000 00E0     protocol[3]=((starting_address)     & 0x00ff);
                 ; 0000 00E1     protocol[4]=((data>>8)              & 0x00ff);
                 ; 0000 00E2     protocol[5]=((data)                 & 0x00ff);
                 ; 0000 00E3     protocol[6]=0;
                 ; 0000 00E4     protocol[7]=0;
                 ; 0000 00E5 
                 ; 0000 00E6     crc16 = CRC16(protocol, 6);
                 ; 0000 00E7 
                 ; 0000 00E8     protocol[6] = (unsigned char)((crc16>>0) & 0x00ff);
                 ; 0000 00E9     protocol[7] = (unsigned char)((crc16>>8) & 0x00ff);
                 ; 0000 00EA 
                 ; 0000 00EB 
                 ; 0000 00EC     for(i=0;i<8;i++)
                 ; 0000 00ED     {
                 ; 0000 00EE         putch_USART0(*(protocol+i));
                 ; 0000 00EF     }
                 ; 0000 00F0 }
                 ;
                 ;void Make_MSPEED(float* _velocity, float* _angularV, int* R_RPM, int* L_RPM)
                 ; 0000 00F3 {
                 _Make_MSPEED:
                 ; 0000 00F4     float VelocityR = 0;
                 ; 0000 00F5     float VelocityL = 0;
                 ; 0000 00F6 
                 ; 0000 00F7     if(*_velocity>=0){
000170 9728      	SBIW R28,8
000171 e0e0      	LDI  R30,LOW(0)
000172 83e8      	ST   Y,R30
000173 83e9      	STD  Y+1,R30
000174 83ea      	STD  Y+2,R30
000175 83eb      	STD  Y+3,R30
000176 83ec      	STD  Y+4,R30
000177 83ed      	STD  Y+5,R30
000178 83ee      	STD  Y+6,R30
000179 83ef      	STD  Y+7,R30
                 ;	*_velocity -> Y+14
                 ;	*_angularV -> Y+12
                 ;	*R_RPM -> Y+10
                 ;	*L_RPM -> Y+8
                 ;	VelocityR -> Y+4
                 ;	VelocityL -> Y+0
00017a 940e 04a9 	CALL SUBOPT_0x0
00017c 2377      	TST  R23
00017d f042      	BRMI _0x2C
                 ; 0000 00F8         *_angularV = -(*_angularV);
00017e 940e 04ae 	CALL SUBOPT_0x1
000180 940e 0532 	CALL __ANEGF1
000182 85ac      	LDD  R26,Y+12
000183 85bd      	LDD  R27,Y+12+1
000184 940e 06e7 	CALL __PUTDP1
                 ; 0000 00F9     }
                 ; 0000 00FA 
                 ; 0000 00FB     VelocityR = *_velocity+(*_angularV*Length)/4;
                 _0x2C:
000186 940e 04a9 	CALL SUBOPT_0x0
000188 937f      	PUSH R23
000189 936f      	PUSH R22
00018a 93ff      	PUSH R31
00018b 93ef      	PUSH R30
00018c 940e 04ae 	CALL SUBOPT_0x1
00018e 940e 04b3 	CALL SUBOPT_0x2
000190 91af      	POP  R26
000191 91bf      	POP  R27
000192 918f      	POP  R24
000193 919f      	POP  R25
000194 940e 05d8 	CALL __ADDF12
                +
000196 83ec     +STD Y + 4 , R30
000197 83fd     +STD Y + 4 + 1 , R31
000198 836e     +STD Y + 4 + 2 , R22
000199 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
                 ; 0000 00FC     VelocityL = *_velocity-(*_angularV*Length)/4;
00019a 940e 04a9 	CALL SUBOPT_0x0
00019c 937f      	PUSH R23
00019d 936f      	PUSH R22
00019e 93ff      	PUSH R31
00019f 93ef      	PUSH R30
0001a0 940e 04ae 	CALL SUBOPT_0x1
0001a2 940e 04b3 	CALL SUBOPT_0x2
0001a4 91af      	POP  R26
0001a5 91bf      	POP  R27
0001a6 918f      	POP  R24
0001a7 919f      	POP  R25
0001a8 940e 06fd 	CALL __SWAPD12
0001aa 940e 05d1 	CALL __SUBF12
0001ac 940e 06f1 	CALL __PUTD1S0
                 ; 0000 00FD 
                 ; 0000 00FE     *R_RPM = (int)(152.788*VelocityR*Gearratio);
                +
0001ae 81ec     +LDD R30 , Y + 4
0001af 81fd     +LDD R31 , Y + 4 + 1
0001b0 816e     +LDD R22 , Y + 4 + 2
0001b1 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
0001b2 940e 04c2 	CALL SUBOPT_0x3
0001b4 85aa      	LDD  R26,Y+10
0001b5 85bb      	LDD  R27,Y+10+1
0001b6 93ed      	ST   X+,R30
0001b7 93fc      	ST   X,R31
                 ; 0000 00FF     *L_RPM = (int)(152.788*VelocityL*Gearratio);
0001b8 940e 06ec 	CALL __GETD1S0
0001ba 940e 04c2 	CALL SUBOPT_0x3
0001bc 85a8      	LDD  R26,Y+8
0001bd 85b9      	LDD  R27,Y+8+1
0001be 93ed      	ST   X+,R30
0001bf 93fc      	ST   X,R31
                 ; 0000 0100 
                 ; 0000 0101     if( ((*R_RPM<300)&&(*R_RPM>-300))&&((*L_RPM<300)&&(*L_RPM>-300))){
0001c0 85aa      	LDD  R26,Y+10
0001c1 85bb      	LDD  R27,Y+10+1
0001c2 940e 06dd 	CALL __GETW1P
0001c4 32ec      	CPI  R30,LOW(0x12C)
0001c5 e0a1      	LDI  R26,HIGH(0x12C)
0001c6 07fa      	CPC  R31,R26
0001c7 f434      	BRGE _0x2E
0001c8 01df      	MOVW R26,R30
0001c9 ede4      	LDI  R30,LOW(65236)
0001ca effe      	LDI  R31,HIGH(65236)
0001cb 17ea      	CP   R30,R26
0001cc 07fb      	CPC  R31,R27
0001cd f00c      	BRLT _0x2F
                 _0x2E:
0001ce c014      	RJMP _0x30
                 _0x2F:
0001cf 85a8      	LDD  R26,Y+8
0001d0 85b9      	LDD  R27,Y+8+1
0001d1 940e 06dd 	CALL __GETW1P
0001d3 32ec      	CPI  R30,LOW(0x12C)
0001d4 e0a1      	LDI  R26,HIGH(0x12C)
0001d5 07fa      	CPC  R31,R26
0001d6 f454      	BRGE _0x31
0001d7 85a8      	LDD  R26,Y+8
0001d8 85b9      	LDD  R27,Y+8+1
0001d9 940e 06dd 	CALL __GETW1P
0001db 01df      	MOVW R26,R30
0001dc ede4      	LDI  R30,LOW(65236)
0001dd effe      	LDI  R31,HIGH(65236)
0001de 17ea      	CP   R30,R26
0001df 07fb      	CPC  R31,R27
0001e0 f00c      	BRLT _0x32
                 _0x31:
0001e1 c001      	RJMP _0x30
                 _0x32:
0001e2 c001      	RJMP _0x33
                 _0x30:
0001e3 c00a      	RJMP _0x2D
                 _0x33:
                 ; 0000 0102         *R_RPM = 0;
0001e4 85aa      	LDD  R26,Y+10
0001e5 85bb      	LDD  R27,Y+10+1
0001e6 e0e0      	LDI  R30,LOW(0)
0001e7 e0f0      	LDI  R31,HIGH(0)
0001e8 93ed      	ST   X+,R30
0001e9 93fc      	ST   X,R31
                 ; 0000 0103         *L_RPM = 0;
0001ea 85a8      	LDD  R26,Y+8
0001eb 85b9      	LDD  R27,Y+8+1
0001ec 93ed      	ST   X+,R30
0001ed 93fc      	ST   X,R31
                 ; 0000 0104     }
                 ; 0000 0105 }
                 _0x2D:
0001ee 9660      	ADIW R28,16
0001ef 9508      	RET
                 ;void oper_Disapath(int velocityR, int velocityL, int p_velocity_R, int p_velocity_L)
                 ; 0000 0107 {
                 ; 0000 0108     if((p_velocity_R==0) && (velocityR != 0))
                 ;	velocityR -> Y+6
                 ;	velocityL -> Y+4
                 ;	p_velocity_R -> Y+2
                 ;	p_velocity_L -> Y+0
                 ; 0000 0109     {
                 ; 0000 010A         RTU_WriteOperate0(R,(unsigned int)120,START);
                 ; 0000 010B         delay_ms(5);
                 ; 0000 010C     }
                 ; 0000 010D     else if((p_velocity_R!=0) && (velocityR == 0))
                 ; 0000 010E     {
                 ; 0000 010F         RTU_WriteOperate0(R,(unsigned int)120,STOP);
                 ; 0000 0110         delay_ms(5);
                 ; 0000 0111     }
                 ; 0000 0112     if((p_velocity_L==0) && (velocityL != 0))
                 ; 0000 0113     {
                 ; 0000 0114         RTU_WriteOperate0(L,(unsigned int)120,START);
                 ; 0000 0115         delay_ms(5);
                 ; 0000 0116     }
                 ; 0000 0117     else if((p_velocity_L!=0) && (velocityL == 0))
                 ; 0000 0118     {
                 ; 0000 0119         RTU_WriteOperate0(L,(unsigned int)120,STOP);
                 ; 0000 011A         delay_ms(5);
                 ; 0000 011B     }
                 ; 0000 011C }
                 ;
                 ;interrupt [USART0_RXC] void usart0_rxc(void)
                 ; 0000 011F {
                 _usart0_rxc:
0001f0 93aa      	ST   -Y,R26
0001f1 93ba      	ST   -Y,R27
0001f2 93ea      	ST   -Y,R30
0001f3 b7ef      	IN   R30,SREG
0001f4 93ea      	ST   -Y,R30
                 ; 0000 0120     if(((TCNT2 < CHARACTER3_5) && (TIMER2_OVERFLOW == 0)) || PACKET_BUFF_IDX == 0)
0001f5 b5e4      	IN   R30,0x24
0001f6 31e9      	CPI  R30,LOW(0x19)
0001f7 f418      	BRSH _0x43
0001f8 e0e0      	LDI  R30,LOW(0)
0001f9 15e5      	CP   R30,R5
0001fa f019      	BREQ _0x45
                 _0x43:
0001fb e0e0      	LDI  R30,LOW(0)
0001fc 15e4      	CP   R30,R4
0001fd f419      	BRNE _0x42
                 _0x45:
                 ; 0000 0121     {
                 ; 0000 0122         PACKET_BUFF[PACKET_BUFF_IDX] = UDR0;
0001fe 940e 04d1 	CALL SUBOPT_0x4
                 ; 0000 0123         PACKET_BUFF_IDX++;
                 ; 0000 0124         TCNT2 = 0;
                 ; 0000 0125     }
                 ; 0000 0126     else {
000200 c004      	RJMP _0x47
                 _0x42:
                 ; 0000 0127         PACKET_BUFF_IDX = 0;
000201 2444      	CLR  R4
                 ; 0000 0128         PACKET_BUFF[PACKET_BUFF_IDX] = UDR0;
000202 940e 04d1 	CALL SUBOPT_0x4
                 ; 0000 0129         PACKET_BUFF_IDX++;
                 ; 0000 012A         TCNT2 = 0;
                 ; 0000 012B         TIMER2_OVERFLOW = 0;
000204 2455      	CLR  R5
                 ; 0000 012C     }
                 _0x47:
                 ; 0000 012D }
000205 91e9      	LD   R30,Y+
000206 bfef      	OUT  SREG,R30
000207 91e9      	LD   R30,Y+
000208 91b9      	LD   R27,Y+
000209 91a9      	LD   R26,Y+
00020a 9518      	RETI
                 ;
                 ;interrupt [USART1_RXC] void usart1_rxc(void)
                 ; 0000 0130 {
                 _usart1_rxc:
00020b 93ea      	ST   -Y,R30
00020c 93fa      	ST   -Y,R31
00020d b7ef      	IN   R30,SREG
00020e 93ea      	ST   -Y,R30
                 ; 0000 0131     unsigned char i = 0;
                 ; 0000 0132     i = UDR1;
00020f 931a      	ST   -Y,R17
                 ;	i -> R17
000210 e010      	LDI  R17,0
000211 9110 009c 	LDS  R17,156
                 ; 0000 0133     if((i == '<') && (CHECK_GETS == 0)){
000213 331c      	CPI  R17,60
000214 f419      	BRNE _0x49
000215 e0e0      	LDI  R30,LOW(0)
000216 15e9      	CP   R30,R9
000217 f009      	BREQ _0x4A
                 _0x49:
000218 c007      	RJMP _0x48
                 _0x4A:
                 ; 0000 0134         PORTB.3 = ~PORTB.3;
000219 9bc3      	SBIS 0x18,3
00021a c002      	RJMP _0x4B
00021b 98c3      	CBI  0x18,3
00021c c001      	RJMP _0x4C
                 _0x4B:
00021d 9ac3      	SBI  0x18,3
                 _0x4C:
                 ; 0000 0135         VELOCITY_BUFF_IDX = 0;
00021e 2466      	CLR  R6
                 ; 0000 0136         VELOCITY_BUFF[VELOCITY_BUFF_IDX] = i;
00021f c00e      	RJMP _0x67
                 ; 0000 0137         VELOCITY_BUFF_IDX++;
                 ; 0000 0138     }
                 ; 0000 0139     else if(i == '>' && (CHECK_GETS == 0)){
                 _0x48:
000220 331e      	CPI  R17,62
000221 f419      	BRNE _0x4F
000222 e0e0      	LDI  R30,LOW(0)
000223 15e9      	CP   R30,R9
000224 f009      	BREQ _0x50
                 _0x4F:
000225 c006      	RJMP _0x4E
                 _0x50:
                 ; 0000 013A         VELOCITY_BUFF[VELOCITY_BUFF_IDX] = i;
000226 2de6      	MOV  R30,R6
000227 940e 04db 	CALL SUBOPT_0x5
                 ; 0000 013B         VELOCITY_BUFF_IDX++;
                 ; 0000 013C         CHECK_GETS = 1;
000229 e0e1      	LDI  R30,LOW(1)
00022a 2e9e      	MOV  R9,R30
                 ; 0000 013D     }
                 ; 0000 013E     else if(CHECK_GETS == 0){
00022b c005      	RJMP _0x51
                 _0x4E:
00022c 2099      	TST  R9
00022d f419      	BRNE _0x52
                 ; 0000 013F         VELOCITY_BUFF[VELOCITY_BUFF_IDX] = i;
                 _0x67:
00022e 2de6      	MOV  R30,R6
00022f 940e 04db 	CALL SUBOPT_0x5
                 ; 0000 0140         VELOCITY_BUFF_IDX++;
                 ; 0000 0141     }
                 ; 0000 0142 }
                 _0x52:
                 _0x51:
000231 9119      	LD   R17,Y+
000232 91e9      	LD   R30,Y+
000233 bfef      	OUT  SREG,R30
000234 91f9      	LD   R31,Y+
000235 91e9      	LD   R30,Y+
000236 9518      	RETI
                 ;
                 ;interrupt [TIM2_COMP] void timer2_comp(void)
                 ; 0000 0145 {
                 _timer2_comp:
000237 93ea      	ST   -Y,R30
000238 b7ef      	IN   R30,SREG
                 ; 0000 0146     TIMER2_OVERFLOW++;
000239 9453      	INC  R5
                 ; 0000 0147 }
00023a c003      	RJMP _0x68
                 ;
                 ;interrupt [TIM0_COMP] void timer0_comp(void)
                 ; 0000 014A {
                 _timer0_comp:
00023b 93ea      	ST   -Y,R30
00023c b7ef      	IN   R30,SREG
                 ; 0000 014B     TIMER0_OVERFLOW++;
00023d 9473      	INC  R7
                 ; 0000 014C }
                 _0x68:
00023e bfef      	OUT  SREG,R30
00023f 91e9      	LD   R30,Y+
000240 9518      	RETI
                 ;
                 ;void main(void)
                 ; 0000 014F {
                 _main:
                 ; 0000 0150     float a_buff;
                 ; 0000 0151     float v_buff;
                 ; 0000 0152 
                 ; 0000 0153     int velocity = 0;
                 ; 0000 0154     int angularV = 0;
                 ; 0000 0155     int velocity_R = 0;
                 ; 0000 0156     int velocity_L = 0;
                 ; 0000 0157     int past_velocity_R = 0;
                 ; 0000 0158     int past_velocity_L = 0;
                 ; 0000 0159 
                 ; 0000 015A     unsigned char mode_R = 0;
                 ; 0000 015B     unsigned char mode_L = 0;
                 ; 0000 015C     unsigned char BUFF[100] = {0,};
                 ; 0000 015D 
                 ; 0000 015E     usart1_init(bps_115200);
000241 97ef      	SBIW R28,63
000242 97e5      	SBIW R28,53
000243 e68c      	LDI  R24,108
000244 e0a0      	LDI  R26,LOW(0)
000245 e0b0      	LDI  R27,HIGH(0)
000246 e8ec      	LDI  R30,LOW(_0x53*2)
000247 e0f0      	LDI  R31,HIGH(_0x53*2)
000248 940e 0718 	CALL __INITLOCB
                 ;	a_buff -> Y+112
                 ;	v_buff -> Y+108
                 ;	velocity -> R16,R17
                 ;	angularV -> R18,R19
                 ;	velocity_R -> R20,R21
                 ;	velocity_L -> Y+106
                 ;	past_velocity_R -> Y+104
                 ;	past_velocity_L -> Y+102
                 ;	mode_R -> Y+101
                 ;	mode_L -> Y+100
                 ;	BUFF -> Y+0
                +
00024a e000     +LDI R16 , LOW ( 0 )
00024b e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
00024c e020     +LDI R18 , LOW ( 0 )
00024d e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
00024e e040     +LDI R20 , LOW ( 0 )
00024f e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
000250 e0e7      	LDI  R30,LOW(7)
000251 e0f0      	LDI  R31,HIGH(7)
000252 93fa      	ST   -Y,R31
000253 93ea      	ST   -Y,R30
000254 de71      	RCALL _usart1_init
                 ; 0000 015F     usart0_init(bps_115200);
000255 e0e7      	LDI  R30,LOW(7)
000256 e0f0      	LDI  R31,HIGH(7)
000257 93fa      	ST   -Y,R31
000258 93ea      	ST   -Y,R30
000259 de84      	RCALL _usart0_init
                 ; 0000 0160     timer2_init();
00025a de99      	RCALL _timer2_init
                 ; 0000 0161     timer0_init();
00025b de9d      	RCALL _timer0_init
                 ; 0000 0162     SREG |= 0x80;
00025c 9478      	BSET 7
                 ; 0000 0163     DDRB.1 = 1;
00025d 9ab9      	SBI  0x17,1
                 ; 0000 0164     PORTB.1 = 0;
00025e 98c1      	CBI  0x18,1
                 ; 0000 0165     DDRB.2 = 1;
00025f 9aba      	SBI  0x17,2
                 ; 0000 0166     DDRB.3 = 1;
000260 9abb      	SBI  0x17,3
                 ; 0000 0167 
                 ; 0000 0168     delay_ms(5000);
000261 e8e8      	LDI  R30,LOW(5000)
000262 e1f3      	LDI  R31,HIGH(5000)
000263 940e 04e1 	CALL SUBOPT_0x6
                 ; 0000 0169     PORTB.2 = 1;
000265 9ac2      	SBI  0x18,2
                 ; 0000 016A     while(1)
                 _0x5E:
                 ; 0000 016B     {
                 ; 0000 016C         if(CHECK_GETS)
000266 2099      	TST  R9
000267 f411      	BRNE PC+3
000268 940c 02f8 	JMP _0x61
                 ; 0000 016D         {
                 ; 0000 016E             TIMER0_OVERFLOW = 0;
00026a 2477      	CLR  R7
                 ; 0000 016F             TCNT0 = 0;
00026b e0e0      	LDI  R30,LOW(0)
00026c bfe2      	OUT  0x32,R30
                 ; 0000 0170 
                 ; 0000 0171             PORTB.2 = ~PORTB.2;
00026d 9bc2      	SBIS 0x18,2
00026e c002      	RJMP _0x62
00026f 98c2      	CBI  0x18,2
000270 c001      	RJMP _0x63
                 _0x62:
000271 9ac2      	SBI  0x18,2
                 _0x63:
                 ; 0000 0172 
                 ; 0000 0173             UCSR1B &= ~(1<<RXEN1);
000272 91e0 009a 	LDS  R30,154
000274 7eef      	ANDI R30,0xEF
000275 93e0 009a 	STS  154,R30
                 ; 0000 0174             sscanf(VELOCITY_BUFF,"<%d,%d>", &velocity, &angularV);
000277 e6e4      	LDI  R30,LOW(_VELOCITY_BUFF)
000278 e0f5      	LDI  R31,HIGH(_VELOCITY_BUFF)
000279 93fa      	ST   -Y,R31
00027a 93ea      	ST   -Y,R30
                +
00027b efee     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
00027c e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
00027d 93fa      	ST   -Y,R31
00027e 93ea      	ST   -Y,R30
00027f b7ed      	IN   R30,SPL
000280 b7fe      	IN   R31,SPH
000281 9731      	SBIW R30,1
000282 940e 06f6 	CALL __PUTPARD1L
000284 931f      	PUSH R17
000285 930f      	PUSH R16
000286 b7ed      	IN   R30,SPL
000287 b7fe      	IN   R31,SPH
000288 9731      	SBIW R30,1
000289 940e 06f6 	CALL __PUTPARD1L
00028b 933f      	PUSH R19
00028c 932f      	PUSH R18
00028d e088      	LDI  R24,8
00028e 940e 045c 	CALL _sscanf
000290 962c      	ADIW R28,12
000291 912f      	POP  R18
000292 913f      	POP  R19
000293 910f      	POP  R16
000294 911f      	POP  R17
                 ; 0000 0175             UCSR1B |=(1<<RXEN1);
000295 91e0 009a 	LDS  R30,154
000297 61e0      	ORI  R30,0x10
000298 93e0 009a 	STS  154,R30
                 ; 0000 0176 
                 ; 0000 0177             v_buff = (float)velocity/1000;
00029a 01f8      	MOVW R30,R16
00029b 940e 04e5 	CALL SUBOPT_0x7
                +
00029d 01de     +MOVW R26 , R28
00029e 59a4     +SUBI R26 , LOW ( - 108 )
00029f 4fbf     +SBCI R27 , HIGH ( - 108 )
0002a0 93ed     +ST X + , R30
0002a1 93fd     +ST X + , R31
0002a2 936d     +ST X + , R22
0002a3 937c     +ST X , R23
                 	__PUTD1SX 108
                 ; 0000 0178             a_buff = (float)angularV/1000;
0002a4 01f9      	MOVW R30,R18
0002a5 940e 04e5 	CALL SUBOPT_0x7
                +
0002a7 01de     +MOVW R26 , R28
0002a8 59a0     +SUBI R26 , LOW ( - 112 )
0002a9 4fbf     +SBCI R27 , HIGH ( - 112 )
0002aa 93ed     +ST X + , R30
0002ab 93fd     +ST X + , R31
0002ac 936d     +ST X + , R22
0002ad 937c     +ST X , R23
                 	__PUTD1SX 112
                 ; 0000 0179 
                 ; 0000 017A             Make_MSPEED(&v_buff, &a_buff, &velocity_R, &velocity_L);
0002ae 01fe      	MOVW R30,R28
0002af 59e4      	SUBI R30,LOW(-(108))
0002b0 4fff      	SBCI R31,HIGH(-(108))
0002b1 93fa      	ST   -Y,R31
0002b2 93ea      	ST   -Y,R30
0002b3 01fe      	MOVW R30,R28
0002b4 58ee      	SUBI R30,LOW(-(114))
0002b5 4fff      	SBCI R31,HIGH(-(114))
0002b6 93fa      	ST   -Y,R31
0002b7 93ea      	ST   -Y,R30
0002b8 b7ed      	IN   R30,SPL
0002b9 b7fe      	IN   R31,SPH
0002ba 9731      	SBIW R30,1
0002bb 93fa      	ST   -Y,R31
0002bc 93ea      	ST   -Y,R30
0002bd 935f      	PUSH R21
0002be 934f      	PUSH R20
0002bf 01fe      	MOVW R30,R28
0002c0 59e0      	SUBI R30,LOW(-(112))
0002c1 4fff      	SBCI R31,HIGH(-(112))
0002c2 93fa      	ST   -Y,R31
0002c3 93ea      	ST   -Y,R30
0002c4 deab      	RCALL _Make_MSPEED
0002c5 914f      	POP  R20
0002c6 915f      	POP  R21
                 ; 0000 017B             //sprintf(BUFF,"<%.2f,%.f2>", v_buff, a_buff);
                 ; 0000 017C             //sprintf(BUFF,"<%d,%d>", velocity_R, velocity_L);
                 ; 0000 017D 
                 ; 0000 017E             //puts_USART1(BUFF,VELOCITY_BUFF_IDX);
                 ; 0000 017F 
                 ; 0000 0180 
                 ; 0000 0181             past_velocity_R = velocity_R;
                +
0002c7 01fe     +MOVW R30 , R28
0002c8 59e8     +SUBI R30 , LOW ( - 104 )
0002c9 4fff     +SBCI R31 , HIGH ( - 104 )
0002ca 9341     +ST Z + , R20
0002cb 8350     +ST Z , R21
                 	__PUTWSRX 20,21,104
                 ; 0000 0182             past_velocity_L = velocity_L;
                +
0002cc 01fe     +MOVW R30 , R28
0002cd 59e6     +SUBI R30 , LOW ( - 106 )
0002ce 4fff     +SBCI R31 , HIGH ( - 106 )
0002cf 9001     +LD R0 , Z +
0002d0 81f0     +LD R31 , Z
0002d1 2de0     +MOV R30 , R0
                 	__GETW1SX 106
                +
0002d2 01de     +MOVW R26 , R28
0002d3 59aa     +SUBI R26 , LOW ( - 102 )
0002d4 4fbf     +SBCI R27 , HIGH ( - 102 )
0002d5 93ed     +ST X + , R30
0002d6 93fc     +ST X , R31
                 	__PUTW1SX 102
                 ; 0000 0183 
                 ; 0000 0184             RTU_WriteOperate0(R,(unsigned int)121,(int)(velocity_R));
0002d7 e0e1      	LDI  R30,LOW(1)
0002d8 93ea      	ST   -Y,R30
0002d9 e7e9      	LDI  R30,LOW(121)
0002da e0f0      	LDI  R31,HIGH(121)
0002db 93fa      	ST   -Y,R31
0002dc 93ea      	ST   -Y,R30
0002dd 935a      	ST   -Y,R21
0002de 934a      	ST   -Y,R20
0002df 940e 04f2 	CALL SUBOPT_0x8
                 ; 0000 0185             delay_ms(1);
                 ; 0000 0186 
                 ; 0000 0187 
                 ; 0000 0188             RTU_WriteOperate0(L,(unsigned int)121,(int)-(velocity_L));
0002e1 e0e2      	LDI  R30,LOW(2)
0002e2 93ea      	ST   -Y,R30
0002e3 e7e9      	LDI  R30,LOW(121)
0002e4 e0f0      	LDI  R31,HIGH(121)
0002e5 93fa      	ST   -Y,R31
0002e6 93ea      	ST   -Y,R30
                +
0002e7 01fe     +MOVW R30 , R28
0002e8 59e3     +SUBI R30 , LOW ( - 109 )
0002e9 4fff     +SBCI R31 , HIGH ( - 109 )
0002ea 9001     +LD R0 , Z +
0002eb 81f0     +LD R31 , Z
0002ec 2de0     +MOV R30 , R0
                 	__GETW1SX 109
0002ed 940e 06bf 	CALL __ANEGW1
0002ef 940e 04f7 	CALL SUBOPT_0x9
                 ; 0000 0189             delay_ms(1);
                 ; 0000 018A 
                 ; 0000 018B             RTU_WriteOperate0(R,(unsigned int)120,(int)(START));
0002f1 e0e1      	LDI  R30,LOW(1)
0002f2 940e 04fa 	CALL SUBOPT_0xA
                 ; 0000 018C             delay_ms(1);
                 ; 0000 018D 
                 ; 0000 018E             RTU_WriteOperate0(L,(unsigned int)120,(int)(START));
0002f4 e0e2      	LDI  R30,LOW(2)
0002f5 940e 04fa 	CALL SUBOPT_0xA
                 ; 0000 018F             delay_ms(1);
                 ; 0000 0190 
                 ; 0000 0191             CHECK_GETS = 0;
0002f7 2499      	CLR  R9
                 ; 0000 0192         }
                 ; 0000 0193     }
                 _0x61:
0002f8 cf6d      	RJMP _0x5E
                 ; 0000 0194 }
                 _0x64:
0002f9 cfff      	RJMP _0x64
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _get_buff_G100:
0002fa 931a      	ST   -Y,R17
0002fb 81a9      	LDD  R26,Y+1
0002fc 81ba      	LDD  R27,Y+1+1
0002fd e0e0      	LDI  R30,LOW(0)
0002fe 93ec      	ST   X,R30
0002ff 81ab      	LDD  R26,Y+3
000300 81bc      	LDD  R27,Y+3+1
000301 91ec      	LD   R30,X
000302 2f1e      	MOV  R17,R30
000303 30e0      	CPI  R30,0
000304 f019      	BREQ _0x20000BF
000305 e0e0      	LDI  R30,LOW(0)
000306 93ec      	ST   X,R30
000307 c019      	RJMP _0x20000C0
                 _0x20000BF:
000308 81a9      	LDD  R26,Y+1
000309 81ba      	LDD  R27,Y+1+1
00030a 9611      	ADIW R26,1
00030b 940e 06dd 	CALL __GETW1P
00030d 9730      	SBIW R30,0
00030e f089      	BREQ _0x20000C1
00030f 81e9      	LDD  R30,Y+1
000310 81fa      	LDD  R31,Y+1+1
000311 81a1      	LDD  R26,Z+1
000312 81b2      	LDD  R27,Z+2
000313 91ec      	LD   R30,X
000314 2f1e      	MOV  R17,R30
000315 30e0      	CPI  R30,0
000316 f041      	BREQ _0x20000C2
000317 81a9      	LDD  R26,Y+1
000318 81ba      	LDD  R27,Y+1+1
000319 9611      	ADIW R26,1
00031a 91ed      	LD   R30,X+
00031b 91fd      	LD   R31,X+
00031c 9631      	ADIW R30,1
00031d 93fe      	ST   -X,R31
00031e 93ee      	ST   -X,R30
                 _0x20000C2:
00031f c001      	RJMP _0x20000C3
                 _0x20000C1:
000320 e010      	LDI  R17,LOW(0)
                 _0x20000C3:
                 _0x20000C0:
000321 2fe1      	MOV  R30,R17
000322 8118      	LDD  R17,Y+0
000323 9625      	ADIW R28,5
000324 9508      	RET
                 __scanf_G100:
000325 9725      	SBIW R28,5
000326 940e 070a 	CALL __SAVELOCR6
000328 e0e0      	LDI  R30,LOW(0)
000329 e0f0      	LDI  R31,HIGH(0)
00032a 87e8      	STD  Y+8,R30
00032b 87f9      	STD  Y+8+1,R31
00032c 2f4e      	MOV  R20,R30
                 _0x20000C4:
00032d 89e9      	LDD  R30,Y+17
00032e 89fa      	LDD  R31,Y+17+1
00032f 9631      	ADIW R30,1
000330 8be9      	STD  Y+17,R30
000331 8bfa      	STD  Y+17+1,R31
000332 9731      	SBIW R30,1
000333 91e4      	LPM  R30,Z
000334 2f3e      	MOV  R19,R30
000335 30e0      	CPI  R30,0
000336 f411      	BRNE PC+3
000337 940c 0456 	JMP _0x20000C6
000339 940e 0502 	CALL SUBOPT_0xB
00033b f0c1      	BREQ _0x20000C7
                 _0x20000C8:
00033c b7ed      	IN   R30,SPL
00033d b7fe      	IN   R31,SPH
00033e 93fa      	ST   -Y,R31
00033f 93ea      	ST   -Y,R30
000340 934f      	PUSH R20
000341 940e 0507 	CALL SUBOPT_0xC
000343 914f      	POP  R20
000344 2f3e      	MOV  R19,R30
000345 30e0      	CPI  R30,0
000346 f019      	BREQ _0x20000CB
000347 940e 0502 	CALL SUBOPT_0xB
000349 f409      	BRNE _0x20000CC
                 _0x20000CB:
00034a c007      	RJMP _0x20000CA
                 _0x20000CC:
00034b 940e 050f 	CALL SUBOPT_0xD
00034d f41c      	BRGE _0x20000CD
00034e efef      	LDI  R30,LOW(65535)
00034f efff      	LDI  R31,HIGH(65535)
000350 c107      	RJMP _0x20A0002
                 _0x20000CD:
000351 cfea      	RJMP _0x20000C8
                 _0x20000CA:
000352 2f43      	MOV  R20,R19
000353 c101      	RJMP _0x20000CE
                 _0x20000C7:
000354 3235      	CPI  R19,37
000355 f011      	BREQ PC+3
000356 940c 043d 	JMP _0x20000CF
000358 e050      	LDI  R21,LOW(0)
                 _0x20000D0:
000359 89e9      	LDD  R30,Y+17
00035a 89fa      	LDD  R31,Y+17+1
00035b 9135      	LPM  R19,Z+
00035c 8be9      	STD  Y+17,R30
00035d 8bfa      	STD  Y+17+1,R31
00035e 3330      	CPI  R19,48
00035f f010      	BRLO _0x20000D4
000360 333a      	CPI  R19,58
000361 f008      	BRLO _0x20000D3
                 _0x20000D4:
000362 c007      	RJMP _0x20000D2
                 _0x20000D3:
000363 e0aa      	LDI  R26,LOW(10)
000364 9f5a      	MUL  R21,R26
000365 2d50      	MOV  R21,R0
000366 2fe3      	MOV  R30,R19
000367 53e0      	SUBI R30,LOW(48)
000368 0f5e      	ADD  R21,R30
000369 cfef      	RJMP _0x20000D0
                 _0x20000D2:
00036a 3030      	CPI  R19,0
00036b f409      	BRNE _0x20000D6
00036c c0e9      	RJMP _0x20000C6
                 _0x20000D6:
                 _0x20000D7:
00036d b7ed      	IN   R30,SPL
00036e b7fe      	IN   R31,SPH
00036f 93fa      	ST   -Y,R31
000370 93ea      	ST   -Y,R30
000371 934f      	PUSH R20
000372 940e 0507 	CALL SUBOPT_0xC
000374 914f      	POP  R20
000375 2f2e      	MOV  R18,R30
000376 93ea      	ST   -Y,R30
000377 940e 0491 	CALL _isspace
000379 30e0      	CPI  R30,0
00037a f039      	BREQ _0x20000D9
00037b 940e 050f 	CALL SUBOPT_0xD
00037d f41c      	BRGE _0x20000DA
00037e efef      	LDI  R30,LOW(65535)
00037f efff      	LDI  R31,HIGH(65535)
000380 c0d7      	RJMP _0x20A0002
                 _0x20000DA:
000381 cfeb      	RJMP _0x20000D7
                 _0x20000D9:
000382 3020      	CPI  R18,0
000383 f409      	BRNE _0x20000DB
000384 c0c8      	RJMP _0x20000DC
                 _0x20000DB:
000385 2f42      	MOV  R20,R18
000386 3050      	CPI  R21,0
000387 f409      	BRNE _0x20000DD
000388 ef5f      	LDI  R21,LOW(255)
                 _0x20000DD:
000389 2fe3      	MOV  R30,R19
00038a 36e3      	CPI  R30,LOW(0x63)
00038b f499      	BRNE _0x20000E1
00038c 940e 0514 	CALL SUBOPT_0xE
00038e b7ed      	IN   R30,SPL
00038f b7fe      	IN   R31,SPH
000390 93fa      	ST   -Y,R31
000391 93ea      	ST   -Y,R30
000392 934f      	PUSH R20
000393 940e 0507 	CALL SUBOPT_0xC
000395 914f      	POP  R20
000396 01d8      	MOVW R26,R16
000397 93ec      	ST   X,R30
000398 940e 050f 	CALL SUBOPT_0xD
00039a f41c      	BRGE _0x20000E2
00039b efef      	LDI  R30,LOW(65535)
00039c efff      	LDI  R31,HIGH(65535)
00039d c0ba      	RJMP _0x20A0002
                 _0x20000E2:
00039e c098      	RJMP _0x20000E0
                 _0x20000E1:
00039f 37e3      	CPI  R30,LOW(0x73)
0003a0 f541      	BRNE _0x20000EB
0003a1 940e 0514 	CALL SUBOPT_0xE
                 _0x20000E4:
0003a3 2fe5      	MOV  R30,R21
0003a4 5051      	SUBI R21,1
0003a5 30e0      	CPI  R30,0
0003a6 f0f1      	BREQ _0x20000E6
0003a7 b7ed      	IN   R30,SPL
0003a8 b7fe      	IN   R31,SPH
0003a9 93fa      	ST   -Y,R31
0003aa 93ea      	ST   -Y,R30
0003ab 934f      	PUSH R20
0003ac 940e 0507 	CALL SUBOPT_0xC
0003ae 914f      	POP  R20
0003af 2f3e      	MOV  R19,R30
0003b0 30e0      	CPI  R30,0
0003b1 f019      	BREQ _0x20000E8
0003b2 940e 0502 	CALL SUBOPT_0xB
0003b4 f039      	BREQ _0x20000E7
                 _0x20000E8:
0003b5 940e 050f 	CALL SUBOPT_0xD
0003b7 f41c      	BRGE _0x20000EA
0003b8 efef      	LDI  R30,LOW(65535)
0003b9 efff      	LDI  R31,HIGH(65535)
0003ba c09d      	RJMP _0x20A0002
                 _0x20000EA:
0003bb c009      	RJMP _0x20000E6
                 _0x20000E7:
0003bc 931f      	PUSH R17
0003bd 930f      	PUSH R16
                +
0003be 5f0f     +SUBI R16 , LOW ( - 1 )
0003bf 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0003c0 2fe3      	MOV  R30,R19
0003c1 91af      	POP  R26
0003c2 91bf      	POP  R27
0003c3 93ec      	ST   X,R30
0003c4 cfde      	RJMP _0x20000E4
                 _0x20000E6:
0003c5 01d8      	MOVW R26,R16
0003c6 e0e0      	LDI  R30,LOW(0)
0003c7 93ec      	ST   X,R30
0003c8 c06e      	RJMP _0x20000E0
                 _0x20000EB:
0003c9 e0e1      	LDI  R30,LOW(1)
0003ca 87ea      	STD  Y+10,R30
0003cb 2fe3      	MOV  R30,R19
0003cc 36e4      	CPI  R30,LOW(0x64)
0003cd f011      	BREQ _0x20000F0
0003ce 36e9      	CPI  R30,LOW(0x69)
0003cf f419      	BRNE _0x20000F1
                 _0x20000F0:
0003d0 e0e0      	LDI  R30,LOW(0)
0003d1 87ea      	STD  Y+10,R30
0003d2 c002      	RJMP _0x20000F2
                 _0x20000F1:
0003d3 37e5      	CPI  R30,LOW(0x75)
0003d4 f411      	BRNE _0x20000F3
                 _0x20000F2:
0003d5 e02a      	LDI  R18,LOW(10)
0003d6 c008      	RJMP _0x20000EE
                 _0x20000F3:
0003d7 37e8      	CPI  R30,LOW(0x78)
0003d8 f411      	BRNE _0x20000F4
0003d9 e120      	LDI  R18,LOW(16)
0003da c004      	RJMP _0x20000EE
                 _0x20000F4:
0003db 32e5      	CPI  R30,LOW(0x25)
0003dc f409      	BRNE _0x20000F7
0003dd c05f      	RJMP _0x20000F6
                 _0x20000F7:
0003de c077      	RJMP _0x20A0003
                 _0x20000EE:
0003df e0e0      	LDI  R30,LOW(0)
0003e0 83ee      	STD  Y+6,R30
0003e1 83ef      	STD  Y+6+1,R30
                 _0x20000F8:
0003e2 2fe5      	MOV  R30,R21
0003e3 5051      	SUBI R21,1
0003e4 30e0      	CPI  R30,0
0003e5 f411      	BRNE PC+3
0003e6 940c 042a 	JMP _0x20000FA
0003e8 b7ed      	IN   R30,SPL
0003e9 b7fe      	IN   R31,SPH
0003ea 93fa      	ST   -Y,R31
0003eb 93ea      	ST   -Y,R30
0003ec 934f      	PUSH R20
0003ed 940e 0507 	CALL SUBOPT_0xC
0003ef 914f      	POP  R20
0003f0 2f3e      	MOV  R19,R30
0003f1 32e1      	CPI  R30,LOW(0x21)
0003f2 f438      	BRSH _0x20000FB
0003f3 940e 050f 	CALL SUBOPT_0xD
0003f5 f41c      	BRGE _0x20000FC
0003f6 efef      	LDI  R30,LOW(65535)
0003f7 efff      	LDI  R31,HIGH(65535)
0003f8 c05f      	RJMP _0x20A0002
                 _0x20000FC:
0003f9 c017      	RJMP _0x20000FD
                 _0x20000FB:
0003fa 85ea      	LDD  R30,Y+10
0003fb 30e0      	CPI  R30,0
0003fc f439      	BRNE _0x20000FE
0003fd 323d      	CPI  R19,45
0003fe f419      	BRNE _0x20000FF
0003ff efef      	LDI  R30,LOW(255)
000400 87ea      	STD  Y+10,R30
000401 cfe0      	RJMP _0x20000F8
                 _0x20000FF:
000402 e0e1      	LDI  R30,LOW(1)
000403 87ea      	STD  Y+10,R30
                 _0x20000FE:
000404 3120      	CPI  R18,16
000405 f431      	BRNE _0x2000101
000406 933a      	ST   -Y,R19
000407 940e 049b 	CALL _isxdigit
000409 30e0      	CPI  R30,0
00040a f031      	BREQ _0x20000FD
00040b c007      	RJMP _0x2000103
                 _0x2000101:
00040c 933a      	ST   -Y,R19
00040d 940e 0489 	CALL _isdigit
00040f 30e0      	CPI  R30,0
000410 f411      	BRNE _0x2000104
                 _0x20000FD:
000411 2f43      	MOV  R20,R19
000412 c017      	RJMP _0x20000FA
                 _0x2000104:
                 _0x2000103:
000413 3631      	CPI  R19,97
000414 f010      	BRLO _0x2000105
000415 5537      	SUBI R19,LOW(87)
000416 c005      	RJMP _0x2000106
                 _0x2000105:
000417 3431      	CPI  R19,65
000418 f010      	BRLO _0x2000107
000419 5337      	SUBI R19,LOW(55)
00041a c001      	RJMP _0x2000108
                 _0x2000107:
00041b 5330      	SUBI R19,LOW(48)
                 _0x2000108:
                 _0x2000106:
00041c 2fe2      	MOV  R30,R18
00041d 81ae      	LDD  R26,Y+6
00041e 81bf      	LDD  R27,Y+6+1
00041f e0f0      	LDI  R31,0
000420 940e 06d5 	CALL __MULW12U
000422 01df      	MOVW R26,R30
000423 2fe3      	MOV  R30,R19
000424 e0f0      	LDI  R31,0
000425 0fea      	ADD  R30,R26
000426 1ffb      	ADC  R31,R27
000427 83ee      	STD  Y+6,R30
000428 83ff      	STD  Y+6+1,R31
000429 cfb8      	RJMP _0x20000F8
                 _0x20000FA:
00042a 940e 0514 	CALL SUBOPT_0xE
00042c 85ea      	LDD  R30,Y+10
00042d 81ae      	LDD  R26,Y+6
00042e 81bf      	LDD  R27,Y+6+1
00042f e0f0      	LDI  R31,0
000430 fde7      	SBRC R30,7
000431 efff      	SER  R31
000432 940e 06d5 	CALL __MULW12U
000434 01d8      	MOVW R26,R16
000435 93ed      	ST   X+,R30
000436 93fc      	ST   X,R31
                 _0x20000E0:
000437 85e8      	LDD  R30,Y+8
000438 85f9      	LDD  R31,Y+8+1
000439 9631      	ADIW R30,1
00043a 87e8      	STD  Y+8,R30
00043b 87f9      	STD  Y+8+1,R31
00043c c018      	RJMP _0x2000109
                 _0x20000CF:
                 _0x20000F6:
00043d b7ed      	IN   R30,SPL
00043e b7fe      	IN   R31,SPH
00043f 93fa      	ST   -Y,R31
000440 93ea      	ST   -Y,R30
000441 934f      	PUSH R20
000442 940e 0507 	CALL SUBOPT_0xC
000444 914f      	POP  R20
000445 17e3      	CP   R30,R19
000446 f071      	BREQ _0x200010A
000447 940e 050f 	CALL SUBOPT_0xD
000449 f41c      	BRGE _0x200010B
00044a efef      	LDI  R30,LOW(65535)
00044b efff      	LDI  R31,HIGH(65535)
00044c c00b      	RJMP _0x20A0002
                 _0x200010B:
                 _0x20000DC:
00044d 85e8      	LDD  R30,Y+8
00044e 85f9      	LDD  R31,Y+8+1
00044f 9730      	SBIW R30,0
000450 f419      	BRNE _0x200010C
000451 efef      	LDI  R30,LOW(65535)
000452 efff      	LDI  R31,HIGH(65535)
000453 c004      	RJMP _0x20A0002
                 _0x200010C:
000454 c001      	RJMP _0x20000C6
                 _0x200010A:
                 _0x2000109:
                 _0x20000CE:
000455 ced7      	RJMP _0x20000C4
                 _0x20000C6:
                 _0x20A0003:
000456 85e8      	LDD  R30,Y+8
000457 85f9      	LDD  R31,Y+8+1
                 _0x20A0002:
000458 940e 0711 	CALL __LOADLOCR6
00045a 9663      	ADIW R28,19
00045b 9508      	RET
                 _sscanf:
00045c 92ff      	PUSH R15
00045d 2ef8      	MOV  R15,R24
00045e 9723      	SBIW R28,3
00045f 931a      	ST   -Y,R17
000460 930a      	ST   -Y,R16
000461 940e 051f 	CALL SUBOPT_0xF
000463 9730      	SBIW R30,0
000464 f419      	BRNE _0x200010D
000465 efef      	LDI  R30,LOW(65535)
000466 efff      	LDI  R31,HIGH(65535)
000467 c01c      	RJMP _0x20A0001
                 _0x200010D:
000468 01de      	MOVW R26,R28
000469 9611      	ADIW R26,1
00046a 940e 06bb 	CALL __ADDW2R15
00046c 018d      	MOVW R16,R26
00046d 940e 051f 	CALL SUBOPT_0xF
00046f 83eb      	STD  Y+3,R30
000470 83fc      	STD  Y+3+1,R31
000471 01de      	MOVW R26,R28
000472 9615      	ADIW R26,5
000473 940e 06bb 	CALL __ADDW2R15
000475 940e 06dd 	CALL __GETW1P
000477 93fa      	ST   -Y,R31
000478 93ea      	ST   -Y,R30
000479 931a      	ST   -Y,R17
00047a 930a      	ST   -Y,R16
00047b efea      	LDI  R30,LOW(_get_buff_G100)
00047c e0f2      	LDI  R31,HIGH(_get_buff_G100)
00047d 93fa      	ST   -Y,R31
00047e 93ea      	ST   -Y,R30
00047f 01fe      	MOVW R30,R28
000480 9638      	ADIW R30,8
000481 93fa      	ST   -Y,R31
000482 93ea      	ST   -Y,R30
000483 dea1      	RCALL __scanf_G100
                 _0x20A0001:
000484 8119      	LDD  R17,Y+1
000485 8108      	LDD  R16,Y+0
000486 9625      	ADIW R28,5
000487 90ff      	POP  R15
000488 9508      	RET
                 
                 	.CSEG
                 _isdigit:
000489 e0e1          ldi  r30,1
00048a 91f9          ld   r31,y+
00048b 33f0          cpi  r31,'0'
00048c f010          brlo isdigit0
00048d 33fa          cpi  r31,'9'+1
00048e f008          brlo isdigit1
                 isdigit0:
00048f 27ee          clr  r30
                 isdigit1:
000490 9508          ret
                 _isspace:
000491 e0e1          ldi  r30,1
000492 91f9          ld   r31,y+
000493 32f0          cpi  r31,' '
000494 f029          breq isspace1
000495 30f9          cpi  r31,9
000496 f010          brlo isspace0
000497 30fe          cpi  r31,13+1
000498 f008          brlo isspace1
                 isspace0:
000499 27ee          clr  r30
                 isspace1:
00049a 9508          ret
                 _isxdigit:
00049b e0e1          ldi  r30,1
00049c 91f9          ld   r31,y+
00049d 53f0          subi r31,0x30
00049e f040          brcs isxdigit0
00049f 30fa          cpi  r31,10
0004a0 f038          brcs isxdigit1
0004a1 75ff          andi r31,0x5f
0004a2 50f7          subi r31,7
0004a3 30fa          cpi  r31,10
0004a4 f010          brcs isxdigit0
0004a5 31f0          cpi  r31,16
0004a6 f008          brcs isxdigit1
                 isxdigit0:
0004a7 27ee          clr  r30
                 isxdigit1:
0004a8 9508          ret
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _PACKET_BUFF:
000500           	.BYTE 0x64
                 _VELOCITY_BUFF:
000564           	.BYTE 0x14
                 __seed_G104:
000578           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0004a9 85ae      	LDD  R26,Y+14
0004aa 85bf      	LDD  R27,Y+14+1
0004ab 940e 06e1 	CALL __GETD1P
0004ad 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
0004ae 85ac      	LDD  R26,Y+12
0004af 85bd      	LDD  R27,Y+12+1
0004b0 940e 06e1 	CALL __GETD1P
0004b2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2:
                +
0004b3 eea1     +LDI R26 , LOW ( 0x3E947AE1 )
0004b4 e7ba     +LDI R27 , HIGH ( 0x3E947AE1 )
0004b5 e984     +LDI R24 , BYTE3 ( 0x3E947AE1 )
0004b6 e39e     +LDI R25 , BYTE4 ( 0x3E947AE1 )
                 	__GETD2N 0x3E947AE1
0004b7 940e 0628 	CALL __MULF12
0004b9 01df      	MOVW R26,R30
0004ba 01cb      	MOVW R24,R22
                +
0004bb e0e0     +LDI R30 , LOW ( 0x40800000 )
0004bc e0f0     +LDI R31 , HIGH ( 0x40800000 )
0004bd e860     +LDI R22 , BYTE3 ( 0x40800000 )
0004be e470     +LDI R23 , BYTE4 ( 0x40800000 )
                 	__GETD1N 0x40800000
0004bf 940e 0676 	CALL __DIVF21
0004c1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3:
                +
0004c2 ebaa     +LDI R26 , LOW ( 0x4318C9BA )
0004c3 ecb9     +LDI R27 , HIGH ( 0x4318C9BA )
0004c4 e188     +LDI R24 , BYTE3 ( 0x4318C9BA )
0004c5 e493     +LDI R25 , BYTE4 ( 0x4318C9BA )
                 	__GETD2N 0x4318C9BA
0004c6 940e 0628 	CALL __MULF12
                +
0004c8 e0a0     +LDI R26 , LOW ( 0x41C80000 )
0004c9 e0b0     +LDI R27 , HIGH ( 0x41C80000 )
0004ca ec88     +LDI R24 , BYTE3 ( 0x41C80000 )
0004cb e491     +LDI R25 , BYTE4 ( 0x41C80000 )
                 	__GETD2N 0x41C80000
0004cc 940e 0628 	CALL __MULF12
0004ce 940e 0567 	CALL __CFD1
0004d0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x4:
0004d1 2da4      	MOV  R26,R4
0004d2 e0b0      	LDI  R27,0
0004d3 50a0      	SUBI R26,LOW(-_PACKET_BUFF)
0004d4 4fbb      	SBCI R27,HIGH(-_PACKET_BUFF)
0004d5 b1ec      	IN   R30,0xC
0004d6 93ec      	ST   X,R30
0004d7 9443      	INC  R4
0004d8 e0e0      	LDI  R30,LOW(0)
0004d9 bde4      	OUT  0x24,R30
0004da 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x5:
0004db e0f0      	LDI  R31,0
0004dc 59ec      	SUBI R30,LOW(-_VELOCITY_BUFF)
0004dd 4ffa      	SBCI R31,HIGH(-_VELOCITY_BUFF)
0004de 8310      	ST   Z,R17
0004df 9463      	INC  R6
0004e0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x6:
0004e1 93fa      	ST   -Y,R31
0004e2 93ea      	ST   -Y,R30
0004e3 940c 0526 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x7:
0004e5 940e 06d0 	CALL __CWD1
0004e7 940e 059e 	CALL __CDF1
0004e9 01df      	MOVW R26,R30
0004ea 01cb      	MOVW R24,R22
                +
0004eb e0e0     +LDI R30 , LOW ( 0x447A0000 )
0004ec e0f0     +LDI R31 , HIGH ( 0x447A0000 )
0004ed e76a     +LDI R22 , BYTE3 ( 0x447A0000 )
0004ee e474     +LDI R23 , BYTE4 ( 0x447A0000 )
                 	__GETD1N 0x447A0000
0004ef 940e 0676 	CALL __DIVF21
0004f1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x8:
0004f2 940e 0135 	CALL _RTU_WriteOperate0
0004f4 e0e1      	LDI  R30,LOW(1)
0004f5 e0f0      	LDI  R31,HIGH(1)
0004f6 cfea      	RJMP SUBOPT_0x6
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
0004f7 93fa      	ST   -Y,R31
0004f8 93ea      	ST   -Y,R30
0004f9 cff8      	RJMP SUBOPT_0x8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xA:
0004fa 93ea      	ST   -Y,R30
0004fb e7e8      	LDI  R30,LOW(120)
0004fc e0f0      	LDI  R31,HIGH(120)
0004fd 93fa      	ST   -Y,R31
0004fe 93ea      	ST   -Y,R30
0004ff e0e1      	LDI  R30,LOW(1)
000500 e0f0      	LDI  R31,HIGH(1)
000501 cff5      	RJMP SUBOPT_0x9
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
000502 933a      	ST   -Y,R19
000503 940e 0491 	CALL _isspace
000505 30e0      	CPI  R30,0
000506 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0xC:
000507 85ed      	LDD  R30,Y+13
000508 85fe      	LDD  R31,Y+13+1
000509 93fa      	ST   -Y,R31
00050a 93ea      	ST   -Y,R30
00050b 89e9      	LDD  R30,Y+17
00050c 89fa      	LDD  R31,Y+17+1
00050d 9509      	ICALL
00050e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xD:
00050f 85ab      	LDD  R26,Y+11
000510 85bc      	LDD  R27,Y+11+1
000511 91ac      	LD   R26,X
000512 30a0      	CPI  R26,0
000513 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xE:
000514 85ef      	LDD  R30,Y+15
000515 89f8      	LDD  R31,Y+15+1
000516 9734      	SBIW R30,4
000517 87ef      	STD  Y+15,R30
000518 8bf8      	STD  Y+15+1,R31
000519 85af      	LDD  R26,Y+15
00051a 89b8      	LDD  R27,Y+15+1
00051b 9614      	ADIW R26,4
00051c 910d      	LD   R16,X+
00051d 911c      	LD   R17,X
00051e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
00051f 01de      	MOVW R26,R28
000520 9617      	ADIW R26,7
000521 940e 06bb 	CALL __ADDW2R15
000523 940e 06dd 	CALL __GETW1P
000525 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000526 91e9      	ld   r30,y+
000527 91f9      	ld   r31,y+
000528 9630      	adiw r30,0
000529 f039      	breq __delay_ms1
                 __delay_ms0:
                +
00052a e686     +LDI R24 , LOW ( 0xE66 )
00052b e09e     +LDI R25 , HIGH ( 0xE66 )
                +__DELAY_USW_LOOP :
00052c 9701     +SBIW R24 , 1
00052d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xE66
00052e 95a8      	wdr
00052f 9731      	sbiw r30,1
000530 f7c9      	brne __delay_ms0
                 __delay_ms1:
000531 9508      	ret
                 
                 __ANEGF1:
000532 9730      	SBIW R30,0
000533 4060      	SBCI R22,0
000534 4070      	SBCI R23,0
000535 f009      	BREQ __ANEGF10
000536 5870      	SUBI R23,0x80
                 __ANEGF10:
000537 9508      	RET
                 
                 __ROUND_REPACK:
000538 2355      	TST  R21
000539 f442      	BRPL __REPACK
00053a 3850      	CPI  R21,0x80
00053b f411      	BRNE __ROUND_REPACK0
00053c ffe0      	SBRS R30,0
00053d c004      	RJMP __REPACK
                 __ROUND_REPACK0:
00053e 9631      	ADIW R30,1
00053f 1f69      	ADC  R22,R25
000540 1f79      	ADC  R23,R25
000541 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000542 e850      	LDI  R21,0x80
000543 2757      	EOR  R21,R23
000544 f411      	BRNE __REPACK0
000545 935f      	PUSH R21
000546 c0cf      	RJMP __ZERORES
                 __REPACK0:
000547 3f5f      	CPI  R21,0xFF
000548 f031      	BREQ __REPACK1
000549 0f66      	LSL  R22
00054a 0c00      	LSL  R0
00054b 9557      	ROR  R21
00054c 9567      	ROR  R22
00054d 2f75      	MOV  R23,R21
00054e 9508      	RET
                 __REPACK1:
00054f 935f      	PUSH R21
000550 2000      	TST  R0
000551 f00a      	BRMI __REPACK2
000552 c0cf      	RJMP __MAXRES
                 __REPACK2:
000553 c0c8      	RJMP __MINRES
                 
                 __UNPACK:
000554 e850      	LDI  R21,0x80
000555 2e19      	MOV  R1,R25
000556 2215      	AND  R1,R21
000557 0f88      	LSL  R24
000558 1f99      	ROL  R25
000559 2795      	EOR  R25,R21
00055a 0f55      	LSL  R21
00055b 9587      	ROR  R24
                 
                 __UNPACK1:
00055c e850      	LDI  R21,0x80
00055d 2e07      	MOV  R0,R23
00055e 2205      	AND  R0,R21
00055f 0f66      	LSL  R22
000560 1f77      	ROL  R23
000561 2775      	EOR  R23,R21
000562 0f55      	LSL  R21
000563 9567      	ROR  R22
000564 9508      	RET
                 
                 __CFD1U:
000565 9468      	SET
000566 c001      	RJMP __CFD1U0
                 __CFD1:
000567 94e8      	CLT
                 __CFD1U0:
000568 935f      	PUSH R21
000569 dff2      	RCALL __UNPACK1
00056a 3870      	CPI  R23,0x80
00056b f018      	BRLO __CFD10
00056c 3f7f      	CPI  R23,0xFF
00056d f408      	BRCC __CFD10
00056e c0a7      	RJMP __ZERORES
                 __CFD10:
00056f e156      	LDI  R21,22
000570 1b57      	SUB  R21,R23
000571 f4aa      	BRPL __CFD11
000572 9551      	NEG  R21
000573 3058      	CPI  R21,8
000574 f40e      	BRTC __CFD19
000575 3059      	CPI  R21,9
                 __CFD19:
000576 f030      	BRLO __CFD17
000577 efef      	SER  R30
000578 efff      	SER  R31
000579 ef6f      	SER  R22
00057a e77f      	LDI  R23,0x7F
00057b f977      	BLD  R23,7
00057c c01a      	RJMP __CFD15
                 __CFD17:
00057d 2777      	CLR  R23
00057e 2355      	TST  R21
00057f f0b9      	BREQ __CFD15
                 __CFD18:
000580 0fee      	LSL  R30
000581 1fff      	ROL  R31
000582 1f66      	ROL  R22
000583 1f77      	ROL  R23
000584 955a      	DEC  R21
000585 f7d1      	BRNE __CFD18
000586 c010      	RJMP __CFD15
                 __CFD11:
000587 2777      	CLR  R23
                 __CFD12:
000588 3058      	CPI  R21,8
000589 f028      	BRLO __CFD13
00058a 2fef      	MOV  R30,R31
00058b 2ff6      	MOV  R31,R22
00058c 2f67      	MOV  R22,R23
00058d 5058      	SUBI R21,8
00058e cff9      	RJMP __CFD12
                 __CFD13:
00058f 2355      	TST  R21
000590 f031      	BREQ __CFD15
                 __CFD14:
000591 9576      	LSR  R23
000592 9567      	ROR  R22
000593 95f7      	ROR  R31
000594 95e7      	ROR  R30
000595 955a      	DEC  R21
000596 f7d1      	BRNE __CFD14
                 __CFD15:
000597 2000      	TST  R0
000598 f40a      	BRPL __CFD16
000599 d129      	RCALL __ANEGD1
                 __CFD16:
00059a 915f      	POP  R21
00059b 9508      	RET
                 
                 __CDF1U:
00059c 9468      	SET
00059d c001      	RJMP __CDF1U0
                 __CDF1:
00059e 94e8      	CLT
                 __CDF1U0:
00059f 9730      	SBIW R30,0
0005a0 4060      	SBCI R22,0
0005a1 4070      	SBCI R23,0
0005a2 f0b1      	BREQ __CDF10
0005a3 2400      	CLR  R0
0005a4 f026      	BRTS __CDF11
0005a5 2377      	TST  R23
0005a6 f412      	BRPL __CDF11
0005a7 9400      	COM  R0
0005a8 d11a      	RCALL __ANEGD1
                 __CDF11:
0005a9 2e17      	MOV  R1,R23
0005aa e17e      	LDI  R23,30
0005ab 2011      	TST  R1
                 __CDF12:
0005ac f032      	BRMI __CDF13
0005ad 957a      	DEC  R23
0005ae 0fee      	LSL  R30
0005af 1fff      	ROL  R31
0005b0 1f66      	ROL  R22
0005b1 1c11      	ROL  R1
0005b2 cff9      	RJMP __CDF12
                 __CDF13:
0005b3 2fef      	MOV  R30,R31
0005b4 2ff6      	MOV  R31,R22
0005b5 2d61      	MOV  R22,R1
0005b6 935f      	PUSH R21
0005b7 df8a      	RCALL __REPACK
0005b8 915f      	POP  R21
                 __CDF10:
0005b9 9508      	RET
                 
                 __SWAPACC:
0005ba 934f      	PUSH R20
0005bb 01af      	MOVW R20,R30
0005bc 01fd      	MOVW R30,R26
0005bd 01da      	MOVW R26,R20
0005be 01ab      	MOVW R20,R22
0005bf 01bc      	MOVW R22,R24
0005c0 01ca      	MOVW R24,R20
0005c1 2d40      	MOV  R20,R0
0005c2 2c01      	MOV  R0,R1
0005c3 2e14      	MOV  R1,R20
0005c4 914f      	POP  R20
0005c5 9508      	RET
                 
                 __UADD12:
0005c6 0fea      	ADD  R30,R26
0005c7 1ffb      	ADC  R31,R27
0005c8 1f68      	ADC  R22,R24
0005c9 9508      	RET
                 
                 __NEGMAN1:
0005ca 95e0      	COM  R30
0005cb 95f0      	COM  R31
0005cc 9560      	COM  R22
0005cd 5fef      	SUBI R30,-1
0005ce 4fff      	SBCI R31,-1
0005cf 4f6f      	SBCI R22,-1
0005d0 9508      	RET
                 
                 __SUBF12:
0005d1 935f      	PUSH R21
0005d2 df81      	RCALL __UNPACK
0005d3 3890      	CPI  R25,0x80
0005d4 f171      	BREQ __ADDF129
0005d5 e850      	LDI  R21,0x80
0005d6 2615      	EOR  R1,R21
                 
0005d7 c004      	RJMP __ADDF120
                 
                 __ADDF12:
0005d8 935f      	PUSH R21
0005d9 df7a      	RCALL __UNPACK
0005da 3890      	CPI  R25,0x80
0005db f139      	BREQ __ADDF129
                 
                 __ADDF120:
0005dc 3870      	CPI  R23,0x80
0005dd f121      	BREQ __ADDF128
                 __ADDF121:
0005de 2f57      	MOV  R21,R23
0005df 1b59      	SUB  R21,R25
0005e0 f12b      	BRVS __ADDF1211
0005e1 f412      	BRPL __ADDF122
0005e2 dfd7      	RCALL __SWAPACC
0005e3 cffa      	RJMP __ADDF121
                 __ADDF122:
0005e4 3158      	CPI  R21,24
0005e5 f018      	BRLO __ADDF123
0005e6 27aa      	CLR  R26
0005e7 27bb      	CLR  R27
0005e8 2788      	CLR  R24
                 __ADDF123:
0005e9 3058      	CPI  R21,8
0005ea f028      	BRLO __ADDF124
0005eb 2fab      	MOV  R26,R27
0005ec 2fb8      	MOV  R27,R24
0005ed 2788      	CLR  R24
0005ee 5058      	SUBI R21,8
0005ef cff9      	RJMP __ADDF123
                 __ADDF124:
0005f0 2355      	TST  R21
0005f1 f029      	BREQ __ADDF126
                 __ADDF125:
0005f2 9586      	LSR  R24
0005f3 95b7      	ROR  R27
0005f4 95a7      	ROR  R26
0005f5 955a      	DEC  R21
0005f6 f7d9      	BRNE __ADDF125
                 __ADDF126:
0005f7 2d50      	MOV  R21,R0
0005f8 2551      	EOR  R21,R1
0005f9 f072      	BRMI __ADDF127
0005fa dfcb      	RCALL __UADD12
0005fb f438      	BRCC __ADDF129
0005fc 9567      	ROR  R22
0005fd 95f7      	ROR  R31
0005fe 95e7      	ROR  R30
0005ff 9573      	INC  R23
000600 f413      	BRVC __ADDF129
000601 c020      	RJMP __MAXRES
                 __ADDF128:
000602 dfb7      	RCALL __SWAPACC
                 __ADDF129:
000603 df3e      	RCALL __REPACK
000604 915f      	POP  R21
000605 9508      	RET
                 __ADDF1211:
000606 f7d8      	BRCC __ADDF128
000607 cffb      	RJMP __ADDF129
                 __ADDF127:
000608 1bea      	SUB  R30,R26
000609 0bfb      	SBC  R31,R27
00060a 0b68      	SBC  R22,R24
00060b f051      	BREQ __ZERORES
00060c f410      	BRCC __ADDF1210
00060d 9400      	COM  R0
00060e dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
00060f 2366      	TST  R22
000610 f392      	BRMI __ADDF129
000611 0fee      	LSL  R30
000612 1fff      	ROL  R31
000613 1f66      	ROL  R22
000614 957a      	DEC  R23
000615 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
000616 27ee      	CLR  R30
000617 27ff      	CLR  R31
000618 2766      	CLR  R22
000619 2777      	CLR  R23
00061a 915f      	POP  R21
00061b 9508      	RET
                 
                 __MINRES:
00061c efef      	SER  R30
00061d efff      	SER  R31
00061e e76f      	LDI  R22,0x7F
00061f ef7f      	SER  R23
000620 915f      	POP  R21
000621 9508      	RET
                 
                 __MAXRES:
000622 efef      	SER  R30
000623 efff      	SER  R31
000624 e76f      	LDI  R22,0x7F
000625 e77f      	LDI  R23,0x7F
000626 915f      	POP  R21
000627 9508      	RET
                 
                 __MULF12:
000628 935f      	PUSH R21
000629 df2a      	RCALL __UNPACK
00062a 3870      	CPI  R23,0x80
00062b f351      	BREQ __ZERORES
00062c 3890      	CPI  R25,0x80
00062d f341      	BREQ __ZERORES
00062e 2401      	EOR  R0,R1
00062f 9408      	SEC
000630 1f79      	ADC  R23,R25
000631 f423      	BRVC __MULF124
000632 f31c      	BRLT __ZERORES
                 __MULF125:
000633 2000      	TST  R0
000634 f33a      	BRMI __MINRES
000635 cfec      	RJMP __MAXRES
                 __MULF124:
000636 920f      	PUSH R0
000637 931f      	PUSH R17
000638 932f      	PUSH R18
000639 933f      	PUSH R19
00063a 934f      	PUSH R20
00063b 2711      	CLR  R17
00063c 2722      	CLR  R18
00063d 2799      	CLR  R25
00063e 9f68      	MUL  R22,R24
00063f 01a0      	MOVW R20,R0
000640 9f8f      	MUL  R24,R31
000641 2d30      	MOV  R19,R0
000642 0d41      	ADD  R20,R1
000643 1f59      	ADC  R21,R25
000644 9f6b      	MUL  R22,R27
000645 0d30      	ADD  R19,R0
000646 1d41      	ADC  R20,R1
000647 1f59      	ADC  R21,R25
000648 9f8e      	MUL  R24,R30
000649 d027      	RCALL __MULF126
00064a 9fbf      	MUL  R27,R31
00064b d025      	RCALL __MULF126
00064c 9f6a      	MUL  R22,R26
00064d d023      	RCALL __MULF126
00064e 9fbe      	MUL  R27,R30
00064f d01d      	RCALL __MULF127
000650 9faf      	MUL  R26,R31
000651 d01b      	RCALL __MULF127
000652 9fae      	MUL  R26,R30
000653 0d11      	ADD  R17,R1
000654 1f29      	ADC  R18,R25
000655 1f39      	ADC  R19,R25
000656 1f49      	ADC  R20,R25
000657 1f59      	ADC  R21,R25
000658 2fe3      	MOV  R30,R19
000659 2ff4      	MOV  R31,R20
00065a 2f65      	MOV  R22,R21
00065b 2f52      	MOV  R21,R18
00065c 914f      	POP  R20
00065d 913f      	POP  R19
00065e 912f      	POP  R18
00065f 911f      	POP  R17
000660 900f      	POP  R0
000661 2366      	TST  R22
000662 f02a      	BRMI __MULF122
000663 0f55      	LSL  R21
000664 1fee      	ROL  R30
000665 1fff      	ROL  R31
000666 1f66      	ROL  R22
000667 c002      	RJMP __MULF123
                 __MULF122:
000668 9573      	INC  R23
000669 f24b      	BRVS __MULF125
                 __MULF123:
00066a decd      	RCALL __ROUND_REPACK
00066b 915f      	POP  R21
00066c 9508      	RET
                 
                 __MULF127:
00066d 0d10      	ADD  R17,R0
00066e 1d21      	ADC  R18,R1
00066f 1f39      	ADC  R19,R25
000670 c002      	RJMP __MULF128
                 __MULF126:
000671 0d20      	ADD  R18,R0
000672 1d31      	ADC  R19,R1
                 __MULF128:
000673 1f49      	ADC  R20,R25
000674 1f59      	ADC  R21,R25
000675 9508      	RET
                 
                 __DIVF21:
000676 935f      	PUSH R21
000677 dedc      	RCALL __UNPACK
000678 3870      	CPI  R23,0x80
000679 f421      	BRNE __DIVF210
00067a 2011      	TST  R1
                 __DIVF211:
00067b f40a      	BRPL __DIVF219
00067c cf9f      	RJMP __MINRES
                 __DIVF219:
00067d cfa4      	RJMP __MAXRES
                 __DIVF210:
00067e 3890      	CPI  R25,0x80
00067f f409      	BRNE __DIVF218
                 __DIVF217:
000680 cf95      	RJMP __ZERORES
                 __DIVF218:
000681 2401      	EOR  R0,R1
000682 9408      	SEC
000683 0b97      	SBC  R25,R23
000684 f41b      	BRVC __DIVF216
000685 f3d4      	BRLT __DIVF217
000686 2000      	TST  R0
000687 cff3      	RJMP __DIVF211
                 __DIVF216:
000688 2f79      	MOV  R23,R25
000689 931f      	PUSH R17
00068a 932f      	PUSH R18
00068b 933f      	PUSH R19
00068c 934f      	PUSH R20
00068d 2411      	CLR  R1
00068e 2711      	CLR  R17
00068f 2722      	CLR  R18
000690 2733      	CLR  R19
000691 2744      	CLR  R20
000692 2755      	CLR  R21
000693 e290      	LDI  R25,32
                 __DIVF212:
000694 17ae      	CP   R26,R30
000695 07bf      	CPC  R27,R31
000696 0786      	CPC  R24,R22
000697 0741      	CPC  R20,R17
000698 f030      	BRLO __DIVF213
000699 1bae      	SUB  R26,R30
00069a 0bbf      	SBC  R27,R31
00069b 0b86      	SBC  R24,R22
00069c 0b41      	SBC  R20,R17
00069d 9408      	SEC
00069e c001      	RJMP __DIVF214
                 __DIVF213:
00069f 9488      	CLC
                 __DIVF214:
0006a0 1f55      	ROL  R21
0006a1 1f22      	ROL  R18
0006a2 1f33      	ROL  R19
0006a3 1c11      	ROL  R1
0006a4 1faa      	ROL  R26
0006a5 1fbb      	ROL  R27
0006a6 1f88      	ROL  R24
0006a7 1f44      	ROL  R20
0006a8 959a      	DEC  R25
0006a9 f751      	BRNE __DIVF212
0006aa 01f9      	MOVW R30,R18
0006ab 2d61      	MOV  R22,R1
0006ac 914f      	POP  R20
0006ad 913f      	POP  R19
0006ae 912f      	POP  R18
0006af 911f      	POP  R17
0006b0 2366      	TST  R22
0006b1 f032      	BRMI __DIVF215
0006b2 0f55      	LSL  R21
0006b3 1fee      	ROL  R30
0006b4 1fff      	ROL  R31
0006b5 1f66      	ROL  R22
0006b6 957a      	DEC  R23
0006b7 f243      	BRVS __DIVF217
                 __DIVF215:
0006b8 de7f      	RCALL __ROUND_REPACK
0006b9 915f      	POP  R21
0006ba 9508      	RET
                 
                 __ADDW2R15:
0006bb 2400      	CLR  R0
0006bc 0daf      	ADD  R26,R15
0006bd 1db0      	ADC  R27,R0
0006be 9508      	RET
                 
                 __ANEGW1:
0006bf 95f1      	NEG  R31
0006c0 95e1      	NEG  R30
0006c1 40f0      	SBCI R31,0
0006c2 9508      	RET
                 
                 __ANEGD1:
0006c3 95f0      	COM  R31
0006c4 9560      	COM  R22
0006c5 9570      	COM  R23
0006c6 95e1      	NEG  R30
0006c7 4fff      	SBCI R31,-1
0006c8 4f6f      	SBCI R22,-1
0006c9 4f7f      	SBCI R23,-1
0006ca 9508      	RET
                 
                 __ASRW8:
0006cb 2fef      	MOV  R30,R31
0006cc 27ff      	CLR  R31
0006cd fde7      	SBRC R30,7
0006ce efff      	SER  R31
0006cf 9508      	RET
                 
                 __CWD1:
0006d0 2f6f      	MOV  R22,R31
0006d1 0f66      	ADD  R22,R22
0006d2 0b66      	SBC  R22,R22
0006d3 2f76      	MOV  R23,R22
0006d4 9508      	RET
                 
                 __MULW12U:
0006d5 9ffa      	MUL  R31,R26
0006d6 2df0      	MOV  R31,R0
0006d7 9feb      	MUL  R30,R27
0006d8 0df0      	ADD  R31,R0
0006d9 9fea      	MUL  R30,R26
0006da 2de0      	MOV  R30,R0
0006db 0df1      	ADD  R31,R1
0006dc 9508      	RET
                 
                 __GETW1P:
0006dd 91ed      	LD   R30,X+
0006de 91fc      	LD   R31,X
0006df 9711      	SBIW R26,1
0006e0 9508      	RET
                 
                 __GETD1P:
0006e1 91ed      	LD   R30,X+
0006e2 91fd      	LD   R31,X+
0006e3 916d      	LD   R22,X+
0006e4 917c      	LD   R23,X
0006e5 9713      	SBIW R26,3
0006e6 9508      	RET
                 
                 __PUTDP1:
0006e7 93ed      	ST   X+,R30
0006e8 93fd      	ST   X+,R31
0006e9 936d      	ST   X+,R22
0006ea 937c      	ST   X,R23
0006eb 9508      	RET
                 
                 __GETD1S0:
0006ec 81e8      	LD   R30,Y
0006ed 81f9      	LDD  R31,Y+1
0006ee 816a      	LDD  R22,Y+2
0006ef 817b      	LDD  R23,Y+3
0006f0 9508      	RET
                 
                 __PUTD1S0:
0006f1 83e8      	ST   Y,R30
0006f2 83f9      	STD  Y+1,R31
0006f3 836a      	STD  Y+2,R22
0006f4 837b      	STD  Y+3,R23
0006f5 9508      	RET
                 
                 __PUTPARD1L:
0006f6 e060      	LDI  R22,0
0006f7 e070      	LDI  R23,0
                 __PUTPARD1:
0006f8 937a      	ST   -Y,R23
0006f9 936a      	ST   -Y,R22
0006fa 93fa      	ST   -Y,R31
0006fb 93ea      	ST   -Y,R30
0006fc 9508      	RET
                 
                 __SWAPD12:
0006fd 2e18      	MOV  R1,R24
0006fe 2f86      	MOV  R24,R22
0006ff 2d61      	MOV  R22,R1
000700 2e19      	MOV  R1,R25
000701 2f97      	MOV  R25,R23
000702 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
000703 2e1b      	MOV  R1,R27
000704 2fbf      	MOV  R27,R31
000705 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
000706 2e1a      	MOV  R1,R26
000707 2fae      	MOV  R26,R30
000708 2de1      	MOV  R30,R1
000709 9508      	RET
                 
                 __SAVELOCR6:
00070a 935a      	ST   -Y,R21
                 __SAVELOCR5:
00070b 934a      	ST   -Y,R20
                 __SAVELOCR4:
00070c 933a      	ST   -Y,R19
                 __SAVELOCR3:
00070d 932a      	ST   -Y,R18
                 __SAVELOCR2:
00070e 931a      	ST   -Y,R17
00070f 930a      	ST   -Y,R16
000710 9508      	RET
                 
                 __LOADLOCR6:
000711 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000712 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000713 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000714 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000715 8119      	LDD  R17,Y+1
000716 8108      	LD   R16,Y
000717 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
000718 0fac      	ADD  R26,R28
000719 1fbd      	ADC  R27,R29
                 __INITLOC0:
00071a 9005      	LPM  R0,Z+
00071b 920d      	ST   X+,R0
00071c 958a      	DEC  R24
00071d f7e1      	BRNE __INITLOC0
00071e 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :  40 r1 :  31 r2 :   0 r3 :   0 r4 :   4 r5 :   3 r6 :   4 r7 :   2 
r8 :   0 r9 :   6 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  21 r17:  38 r18:  36 r19:  52 r20:  47 r21:  81 r22:  66 r23:  57 
r24:  39 r25:  35 r26:  94 r27:  59 r28:  32 r29:   2 r30: 402 r31: 188 
x  :  51 y  : 240 z  :  19 
Registers used: 27 out of 35 (77.1%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  21 add   :  14 
adiw  :  24 and   :   2 andi  :   6 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   4 brcs  :   4 break :   0 breq  :  33 
brge  :  10 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  14 
brlt  :   4 brmi  :   8 brne  :  37 brpl  :   6 brsh  :   2 brtc  :   1 
brts  :   1 brvc  :   4 brvs  :   4 bset  :   1 bst   :   0 call  :  89 
cbi   :   3 cbr   :   0 clc   :   1 clh   :   0 cli   :   1 cln   :   0 
clr   :  32 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   8 
cp    :   8 cpc   :   9 cpi   :  62 cpse  :   0 dec   :   9 des   :   0 
elpm  :   0 eor   :  11 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   1 
ijmp  :   0 in    :  24 inc   :   6 jmp   :  41 ld    :  40 ldd   :  86 
ldi   : 172 lds   :   5 lpm   :  11 lsl   :  11 lsr   :   3 mov   :  70 
movw  :  44 mul   :  13 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 
or    :   1 ori   :   1 out   :  22 pop   :  41 push  :  41 rcall :  28 
ret   :  56 reti  :   3 rjmp  :  87 rol   :  24 ror   :  13 sbc   :   7 
sbci  :  24 sbi   :   6 sbic  :   0 sbis  :   3 sbiw  :  24 sbr   :   0 
sbrc  :   2 sbrs  :   1 sec   :   3 seh   :   0 sei   :   0 sen   :   0 
ser   :  10 ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    : 126 std   :  48 sts   :  12 sub   :   4 subi  :  26 
swap  :   0 tst   :  17 wdr   :   1 
Instructions used: 76 out of 117 (65.0%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000e3e   3492    154   3646  131072   2.8%
[.dseg] 0x000100 0x00057c      0    124    124    4351   2.8%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 8 warnings
