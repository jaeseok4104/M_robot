<<<<<<< HEAD

AVRASM ver. 2.1.30  C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm Mon Jan 13 11:57:22 2020

C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1061): warning: Register r5 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1062): warning: Register r4 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1063): warning: Register r7 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1064): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega128
                 ;Program type             : Application
                 ;Clock frequency          : 14.745600 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 1024 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : No
                 ;global 'const' stored in FLASH: Yes
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4351
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _TIMER2_OVERFLOW=R5
                 	.DEF _PACKET_BUFF_IDX=R4
                 	.DEF _TIMER0_OVERFLOW=R7
                 	.DEF _VELOCITY_BUFF_IDX=R6
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 008f 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 01a2 	JMP  _timer2_comp
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 01a6 	JMP  _timer0_comp
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0165 	JMP  _usart0_rxc
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0185 	JMP  _usart1_rxc
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x2F:
00004f 0000
000050 0000
000051 0000
000052 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000053 0000
000054 0000
000055 0000
000056 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000057 0000
000058 0000
000059 0000
00005a 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00005b 0000
00005c 0000
00005d 0000
00005e 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00005f 0000
000060 0000
000061 0000
000062 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000063 0000
000064 0000
000065 0000
000066 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000067 0000
000068 0000
000069 0000
00006a 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00006b 0000
00006c 0000
00006d 0000
00006e 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00006f 0000
000070 0000
000071 0000
000072 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000073 0000
000074 0000
000075 0000
000076 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000077 0000
000078 0000
000079 0000
00007a 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00007b 0000
00007c 0000
00007d 0000
00007e 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00007f 0000
000080 0000
000081 0000
000082 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000083 0000
000084 0000      	.DB  0x0,0x0,0x0,0x0
                 _0x4B:
000085 0000
000086 0000      	.DB  0x0,0x0,0x0,0x0
                 _0x0:
000087 253c
000088 2c64
000089 6425
00008a 003e      	.DB  0x3C,0x25,0x64,0x2C,0x25,0x64,0x3E,0x0
                 
                 __GLOBAL_INI_TBL:
00008b 0004      	.DW  0x04
00008c 0004      	.DW  0x04
00008d 010a      	.DW  _0x4B*2
                 
                 _0xFFFFFFFF:
00008e 0000      	.DW  0
                 
                 __RESET:
00008f 94f8      	CLI
000090 27ee      	CLR  R30
000091 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000092 e0f1      	LDI  R31,1
000093 bff5      	OUT  MCUCR,R31
000094 bfe5      	OUT  MCUCR,R30
000095 93e0 006c 	STS  XMCRB,R30
                 
                 ;DISABLE WATCHDOG
000097 e1f8      	LDI  R31,0x18
000098 bdf1      	OUT  WDTCR,R31
000099 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
00009a e08d      	LDI  R24,(14-2)+1
00009b e0a2      	LDI  R26,2
00009c 27bb      	CLR  R27
                 __CLEAR_REG:
00009d 93ed      	ST   X+,R30
00009e 958a      	DEC  R24
00009f f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000a0 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000a1 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000a2 e0a0      	LDI  R26,LOW(__SRAM_START)
0000a3 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
0000a4 93ed      	ST   X+,R30
0000a5 9701      	SBIW R24,1
0000a6 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000a7 e1e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000a8 e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000a9 9185      	LPM  R24,Z+
0000aa 9195      	LPM  R25,Z+
0000ab 9700      	SBIW R24,0
0000ac f061      	BREQ __GLOBAL_INI_END
0000ad 91a5      	LPM  R26,Z+
0000ae 91b5      	LPM  R27,Z+
0000af 9005      	LPM  R0,Z+
0000b0 9015      	LPM  R1,Z+
0000b1 01bf      	MOVW R22,R30
0000b2 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000b3 9005      	LPM  R0,Z+
0000b4 920d      	ST   X+,R0
0000b5 9701      	SBIW R24,1
0000b6 f7e1      	BRNE __GLOBAL_INI_LOOP
0000b7 01fb      	MOVW R30,R22
0000b8 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
0000b9 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000ba efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000bb bfed      	OUT  SPL,R30
0000bc e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000bd bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000be e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000bf e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000c0 940c 01ac 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdio.h>
                 ;#include <delay.h>
                 ;
                 ;#define bps_115200 0x0007
                 ;
                 ;#define POLYNORMIAL 0xA001
                 ;
                 ;#define CHARACTER3_5 25
                 ;
                 ;#define R 0x01
                 ;#define L 0x02
                 ;
                 ;unsigned char TIMER2_OVERFLOW = 0;
                 ;unsigned char PACKET_BUFF[100] = {0,};
                 ;unsigned char PACKET_BUFF_IDX = 0;
                 ;
                 ;unsigned char TIMER0_OVERFLOW = 0;
                 ;unsigned char VELOCITY_BUFF[20] = {0,};
                 ;unsigned char VELOCITY_BUFF_IDX = 0;
                 ;
                 ;void usart1_init(int bps)
                 ; 0000 0017 {
                 
                 	.CSEG
                 _usart1_init:
                 ; 0000 0018     UCSR1A = 0x00;
                 ;	bps -> Y+0
0000c2 e0e0      	LDI  R30,LOW(0)
0000c3 93e0 009b 	STS  155,R30
                 ; 0000 0019     UCSR1B = (1<<RXEN1)|(1<<TXEN1)|(1<<RXCIE1); // RXCIE1 bit is recevie interrupt allow
0000c5 e9e8      	LDI  R30,LOW(152)
0000c6 93e0 009a 	STS  154,R30
                 ; 0000 001A     UCSR1C = (1<<UCSZ11)|(1<<UCSZ10);
0000c8 e0e6      	LDI  R30,LOW(6)
0000c9 93e0 009d 	STS  157,R30
                 ; 0000 001B     UCSR1C &= ~(1<<UMSEL1);
0000cb 91e0 009d 	LDS  R30,157
0000cd 7bef      	ANDI R30,0xBF
0000ce 93e0 009d 	STS  157,R30
                 ; 0000 001C 
                 ; 0000 001D     UBRR1H = (unsigned char)((bps>>8)  & 0x00ff);
0000d0 81e8      	LD   R30,Y
0000d1 81f9      	LDD  R31,Y+1
0000d2 940e 05a4 	CALL __ASRW8
0000d4 93e0 0098 	STS  152,R30
                 ; 0000 001E     UBRR1L = (unsigned char)(bps & 0x00ff);
0000d6 81e8      	LD   R30,Y
0000d7 93e0 0099 	STS  153,R30
                 ; 0000 001F }
0000d9 c014      	RJMP _0x2060004
                 ;
                 ;void usart0_init(int bps)
                 ; 0000 0022 {
                 _usart0_init:
                 ; 0000 0023     UCSR0A = 0x00;
                 ;	bps -> Y+0
0000da e0e0      	LDI  R30,LOW(0)
0000db b9eb      	OUT  0xB,R30
                 ; 0000 0024     UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0); // RXCIE1 bit is recevie interrupt allow
0000dc e9e8      	LDI  R30,LOW(152)
0000dd b9ea      	OUT  0xA,R30
                 ; 0000 0025     UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
0000de e0e6      	LDI  R30,LOW(6)
0000df 93e0 0095 	STS  149,R30
                 ; 0000 0026     UCSR0C &= ~(1<<UMSEL0);
0000e1 91e0 0095 	LDS  R30,149
0000e3 7bef      	ANDI R30,0xBF
0000e4 93e0 0095 	STS  149,R30
                 ; 0000 0027 
                 ; 0000 0028     UBRR0H = (unsigned char)((bps>>8)  & 0x00ff);
0000e6 81e8      	LD   R30,Y
0000e7 81f9      	LDD  R31,Y+1
0000e8 940e 05a4 	CALL __ASRW8
0000ea 93e0 0090 	STS  144,R30
                 ; 0000 0029     UBRR0L = (unsigned char)(bps & 0x00ff);
0000ec 81e8      	LD   R30,Y
0000ed b9e9      	OUT  0x9,R30
                 ; 0000 002A }
                 _0x2060004:
0000ee 9622      	ADIW R28,2
0000ef 9508      	RET
                 ;
                 ;void timer2_init(void)
                 ; 0000 002D {
                 _timer2_init:
                 ; 0000 002E     //TIMER2
                 ; 0000 002F     TCCR2 = (1<<WGM21)|(1<<CS22)|(1<<CS20);// CTC모드, 1024분주
0000f0 e0ed      	LDI  R30,LOW(13)
0000f1 bde5      	OUT  0x25,R30
                 ; 0000 0030 
                 ; 0000 0031     OCR2 = 40;
0000f2 e2e8      	LDI  R30,LOW(40)
0000f3 bde3      	OUT  0x23,R30
                 ; 0000 0032     //TIMSK = (1<<OCIE2);
                 ; 0000 0033 }
0000f4 9508      	RET
                 ;void timer0_init(void)
                 ; 0000 0035 {
                 ; 0000 0036     TCCR0 = (1<<WGM01)|(1<<CS02)|(1<<CS01)|(1<<CS00); // CTC모드, 1024분주
                 ; 0000 0037     OCR0 = 40;
                 ; 0000 0038     TIMSK = (1<<OCIE2)|(1<<OCIE0);
                 ; 0000 0039 }
                 ;
                 ;void putch_USART1(char data)
                 ; 0000 003C {
                 ; 0000 003D     while(!(UCSR1A & (1<<UDRE1))); // UDRE flag is USART Data Register Empty
                 ;	data -> Y+0
                 ; 0000 003E     UDR1 = data;
                 ; 0000 003F }
                 ;
                 ;//USART 문자열 송신
                 ;void puts_USART1(char *str,char IDX)
                 ; 0000 0043 {
                 ; 0000 0044     unsigned char i = 0;
                 ; 0000 0045 
                 ; 0000 0046     for(i = 0;i<IDX-1;i++)
                 ;	*str -> Y+2
                 ;	IDX -> Y+1
                 ;	i -> R17
                 ; 0000 0047     {
                 ; 0000 0048         putch_USART1(*(str+i));
                 ; 0000 0049     }
                 ; 0000 004A 
                 ; 0000 004B     for(i = 0; i<IDX; i++)
                 ; 0000 004C     {
                 ; 0000 004D         *(str+i) = 0;
                 ; 0000 004E     }
                 ; 0000 004F }
                 ;
                 ;void putch_USART0(char data)
                 ; 0000 0052 {
                 _putch_USART0:
                 ; 0000 0053     while(!(UCSR0A & (1<<UDRE0))); // UDRE flag is USART Data Register Empty
                 ;	data -> Y+0
                 _0xC:
0000f5 9b5d      	SBIS 0xB,5
0000f6 cffe      	RJMP _0xC
                 ; 0000 0054     UDR0 = data;
0000f7 81e8      	LD   R30,Y
0000f8 b9ec      	OUT  0xC,R30
                 ; 0000 0055 }
0000f9 9621      	ADIW R28,1
0000fa 9508      	RET
                 ;
                 ;void puts_USART0(char *str,char IDX)
                 ; 0000 0058 {
                 ; 0000 0059     //PACKET_BUFF[PACKET_BUFF_IDX] = 0;
                 ; 0000 005A     unsigned char i = 0;
                 ; 0000 005B     for(i = 0;i<IDX-1;i++)
                 ;	*str -> Y+2
                 ;	IDX -> Y+1
                 ;	i -> R17
                 ; 0000 005C     {
                 ; 0000 005D         putch_USART1(*(str+i));
                 ; 0000 005E     }
                 ; 0000 005F 
                 ; 0000 0060     for(i = 0; i<IDX; i++)
                 ; 0000 0061     {
                 ; 0000 0062         *(str+i) = 0;
                 ; 0000 0063     }
                 ; 0000 0064 }
                 ;
                 ;unsigned short CRC16(unsigned char *puchMsg, int usDataLen)
                 ; 0000 0067 {
                 _CRC16:
                 ; 0000 0068     int i;
                 ; 0000 0069     unsigned short crc, flag;
                 ; 0000 006A     crc = 0xffff;
0000fb 940e 05c0 	CALL __SAVELOCR6
                 ;	*puchMsg -> Y+8
                 ;	usDataLen -> Y+6
                 ;	i -> R16,R17
                 ;	crc -> R18,R19
                 ;	flag -> R20,R21
                +
0000fd ef2f     +LDI R18 , LOW ( - 1 )
0000fe ef3f     +LDI R19 , HIGH ( - 1 )
                 	__GETWRN 18,19,-1
                 ; 0000 006B 
                 ; 0000 006C     while(usDataLen--){
                 _0x15:
0000ff 81ee      	LDD  R30,Y+6
000100 81ff      	LDD  R31,Y+6+1
000101 9731      	SBIW R30,1
000102 83ee      	STD  Y+6,R30
000103 83ff      	STD  Y+6+1,R31
000104 9631      	ADIW R30,1
000105 f0f9      	BREQ _0x17
                 ; 0000 006D         crc ^= *puchMsg++;
000106 85a8      	LDD  R26,Y+8
000107 85b9      	LDD  R27,Y+8+1
000108 91ed      	LD   R30,X+
000109 87a8      	STD  Y+8,R26
00010a 87b9      	STD  Y+8+1,R27
00010b e0f0      	LDI  R31,0
                +
00010c 272e     +EOR R18 , R30
00010d 273f     +EOR R19 , R31
                 	__EORWRR 18,19,30,31
                 ; 0000 006E 
                 ; 0000 006F         for (i=0; i<8; i++){
                +
00010e e000     +LDI R16 , LOW ( 0 )
00010f e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x19:
                +
000110 3008     +CPI R16 , LOW ( 8 )
000111 e0e0     +LDI R30 , HIGH ( 8 )
000112 071e     +CPC R17 , R30
                 	__CPWRN 16,17,8
000113 f484      	BRGE _0x1A
                 ; 0000 0070             flag = crc & 0x0001;
000114 01f9      	MOVW R30,R18
000115 70e1      	ANDI R30,LOW(0x1)
000116 70f0      	ANDI R31,HIGH(0x1)
000117 01af      	MOVW R20,R30
                 ; 0000 0071             crc >>= 1;
000118 9536      	LSR  R19
000119 9527      	ROR  R18
                 ; 0000 0072             if(flag) crc ^= POLYNORMIAL;
00011a 2e04      	MOV  R0,R20
00011b 2a05      	OR   R0,R21
00011c f021      	BREQ _0x1B
00011d e0e1      	LDI  R30,LOW(40961)
00011e eaf0      	LDI  R31,HIGH(40961)
                +
00011f 272e     +EOR R18 , R30
000120 273f     +EOR R19 , R31
                 	__EORWRR 18,19,30,31
                 ; 0000 0073         }
                 _0x1B:
                +
000121 5f0f     +SUBI R16 , LOW ( - 1 )
000122 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000123 cfec      	RJMP _0x19
                 _0x1A:
                 ; 0000 0074     }
000124 cfda      	RJMP _0x15
                 _0x17:
                 ; 0000 0075     return crc;
000125 01f9      	MOVW R30,R18
000126 940e 05c7 	CALL __LOADLOCR6
000128 962a      	ADIW R28,10
000129 9508      	RET
                 ; 0000 0076 }
                 ;
                 ;int RTU_WriteOperate0(char device_address,int starting_address,int data)
                 ; 0000 0079 {
                 _RTU_WriteOperate0:
                 ; 0000 007A     char protocol[8];
                 ; 0000 007B     unsigned short crc16;
                 ; 0000 007C     int i=0;
                 ; 0000 007D     //PACKET_BUFF_IDX = 0;
                 ; 0000 007E 
                 ; 0000 007F     protocol[0]=device_address;
00012a 9728      	SBIW R28,8
00012b 940e 05c2 	CALL __SAVELOCR4
                 ;	device_address -> Y+16
                 ;	starting_address -> Y+14
                 ;	data -> Y+12
                 ;	protocol -> Y+4
                 ;	crc16 -> R16,R17
                 ;	i -> R18,R19
                +
00012d e020     +LDI R18 , LOW ( 0 )
00012e e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
00012f 89e8      	LDD  R30,Y+16
000130 83ec      	STD  Y+4,R30
                 ; 0000 0080     protocol[1]=0x06;
000131 e0e6      	LDI  R30,LOW(6)
000132 83ed      	STD  Y+5,R30
                 ; 0000 0081     protocol[2]=((starting_address>>8)  & 0x00ff);
000133 85ee      	LDD  R30,Y+14
000134 85ff      	LDD  R31,Y+14+1
000135 940e 05a4 	CALL __ASRW8
000137 83ee      	STD  Y+6,R30
                 ; 0000 0082     protocol[3]=((starting_address)     & 0x00ff);
000138 85ee      	LDD  R30,Y+14
000139 83ef      	STD  Y+7,R30
                 ; 0000 0083     protocol[4]=((data>>8)              & 0x00ff);
00013a 85ec      	LDD  R30,Y+12
00013b 85fd      	LDD  R31,Y+12+1
00013c 940e 05a4 	CALL __ASRW8
00013e 87e8      	STD  Y+8,R30
                 ; 0000 0084     protocol[5]=((data)                 & 0x00ff);
00013f 85ec      	LDD  R30,Y+12
000140 87e9      	STD  Y+9,R30
                 ; 0000 0085     protocol[6]=0;
000141 e0e0      	LDI  R30,LOW(0)
000142 87ea      	STD  Y+10,R30
                 ; 0000 0086     protocol[7]=0;
000143 87eb      	STD  Y+11,R30
                 ; 0000 0087 
                 ; 0000 0088     crc16 = CRC16(protocol, 6);
000144 01fe      	MOVW R30,R28
000145 9634      	ADIW R30,4
000146 93fa      	ST   -Y,R31
000147 93ea      	ST   -Y,R30
000148 e0e6      	LDI  R30,LOW(6)
000149 e0f0      	LDI  R31,HIGH(6)
00014a 93fa      	ST   -Y,R31
00014b 93ea      	ST   -Y,R30
00014c dfae      	RCALL _CRC16
00014d 018f      	MOVW R16,R30
                 ; 0000 0089 
                 ; 0000 008A     protocol[6] = (unsigned char)((crc16>>0) & 0x00ff);
00014e 01f8      	MOVW R30,R16
00014f 87ea      	STD  Y+10,R30
                 ; 0000 008B     protocol[7] = (unsigned char)((crc16>>8) & 0x00ff);
                +
000150 871b     +STD Y + 11 , R17
                 	__PUTBSR 17,11
                 ; 0000 008C 
                 ; 0000 008D 
                 ; 0000 008E     for(i=0;i<8;i++)
                +
000151 e020     +LDI R18 , LOW ( 0 )
000152 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x1D:
                +
000153 3028     +CPI R18 , LOW ( 8 )
000154 e0e0     +LDI R30 , HIGH ( 8 )
000155 073e     +CPC R19 , R30
                 	__CPWRN 18,19,8
000156 f454      	BRGE _0x1E
                 ; 0000 008F     {
                 ; 0000 0090         putch_USART0(*(protocol+i));
000157 01de      	MOVW R26,R28
000158 9614      	ADIW R26,4
000159 0fa2      	ADD  R26,R18
00015a 1fb3      	ADC  R27,R19
00015b 91ec      	LD   R30,X
00015c 93ea      	ST   -Y,R30
00015d df97      	RCALL _putch_USART0
                 ; 0000 0091     }
                +
00015e 5f2f     +SUBI R18 , LOW ( - 1 )
00015f 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000160 cff2      	RJMP _0x1D
                 _0x1E:
                 ; 0000 0092 }
000161 940e 05c9 	CALL __LOADLOCR4
000163 9661      	ADIW R28,17
000164 9508      	RET
                 ;
                 ;int RTU_WriteOperate1(char device_address,int starting_address,int data)
                 ; 0000 0095 {
                 ; 0000 0096     char protocol[8];
                 ; 0000 0097     unsigned short crc16;
                 ; 0000 0098     int i=0;
                 ; 0000 0099    // PACKET_BUFF_IDX = 0;
                 ; 0000 009A 
                 ; 0000 009B     protocol[0]=device_address;
                 ;	device_address -> Y+16
                 ;	starting_address -> Y+14
                 ;	data -> Y+12
                 ;	protocol -> Y+4
                 ;	crc16 -> R16,R17
                 ;	i -> R18,R19
                 ; 0000 009C     protocol[1]=0x06;
                 ; 0000 009D     protocol[2]=((starting_address>>8)  & 0x00ff);
                 ; 0000 009E     protocol[3]=((starting_address)     & 0x00ff);
                 ; 0000 009F     protocol[4]=((data>>8)              & 0x00ff);
                 ; 0000 00A0     protocol[5]=((data)                 & 0x00ff);
                 ; 0000 00A1     protocol[6]=0;
                 ; 0000 00A2     protocol[7]=0;
                 ; 0000 00A3 
                 ; 0000 00A4     crc16 = CRC16(protocol, 6);
                 ; 0000 00A5 
                 ; 0000 00A6     protocol[6] = (unsigned char)((crc16>>0) & 0x00ff);
                 ; 0000 00A7     protocol[7] = (unsigned char)((crc16>>8) & 0x00ff);
                 ; 0000 00A8 
                 ; 0000 00A9 
                 ; 0000 00AA     for(i=0;i<8;i++)
                 ; 0000 00AB     {
                 ; 0000 00AC         putch_USART1(*(protocol+i));
                 ; 0000 00AD     }
                 ; 0000 00AE }
                 ;
                 ;int RTU_ReedOperate0(char device_address,int starting_address,int data)
                 ; 0000 00B1 {
                 ; 0000 00B2     char protocol[8];
                 ; 0000 00B3     unsigned short crc16;
                 ; 0000 00B4     int i=0;
                 ; 0000 00B5     //PACKET_BUFF_IDX = 0;
                 ; 0000 00B6 
                 ; 0000 00B7     protocol[0]=device_address;
                 ;	device_address -> Y+16
                 ;	starting_address -> Y+14
                 ;	data -> Y+12
                 ;	protocol -> Y+4
                 ;	crc16 -> R16,R17
                 ;	i -> R18,R19
                 ; 0000 00B8     protocol[1]=0x03;
                 ; 0000 00B9     protocol[2]=((starting_address>>8)  & 0x00ff);
                 ; 0000 00BA     protocol[3]=((starting_address)     & 0x00ff);
                 ; 0000 00BB     protocol[4]=((data>>8)              & 0x00ff);
                 ; 0000 00BC     protocol[5]=((data)                 & 0x00ff);
                 ; 0000 00BD     protocol[6]=0;
                 ; 0000 00BE     protocol[7]=0;
                 ; 0000 00BF 
                 ; 0000 00C0     crc16 = CRC16(protocol, 6);
                 ; 0000 00C1 
                 ; 0000 00C2     protocol[6] = (unsigned char)((crc16>>0) & 0x00ff);
                 ; 0000 00C3     protocol[7] = (unsigned char)((crc16>>8) & 0x00ff);
                 ; 0000 00C4 
                 ; 0000 00C5 
                 ; 0000 00C6     for(i=0;i<8;i++)
                 ; 0000 00C7     {
                 ; 0000 00C8         putch_USART0(*(protocol+i));
                 ; 0000 00C9     }
                 ; 0000 00CA }
                 ;
                 ;// interrupt [USART0_RXC] void usart0_rxc(void)
                 ;// {
                 ;//     unsigned char i = 0;
                 ;
                 ;//     i = UDR0;
                 ;//     if(i == '<'){
                 ;//         PACKET_BUFF_IDX = 0;
                 ;//         PACKET_BUFF[PACKET_BUFF_IDX] = i;
                 ;//         PACKET_BUFF_IDX++;
                 ;//     }
                 ;//     else if(i == '>'){
                 ;//         PACKET_BUFF[PACKET_BUFF_IDX] = i;
                 ;//         PACKET_BUFF_IDX+=2;
                 ;//     }
                 ;//     else{
                 ;//         PACKET_BUFF[PACKET_BUFF_IDX] = i;
                 ;//         PACKET_BUFF_IDX++;
                 ;//     }
                 ;// }
                 ;
                 ;interrupt [USART0_RXC] void usart0_rxc(void)
                 ; 0000 00E1 {
                 _usart0_rxc:
000165 93aa      	ST   -Y,R26
000166 93ba      	ST   -Y,R27
000167 93ea      	ST   -Y,R30
000168 b7ef      	IN   R30,SREG
000169 93ea      	ST   -Y,R30
                 ; 0000 00E2     if(((TCNT2 < CHARACTER3_5) && (TIMER2_OVERFLOW == 0)) || PACKET_BUFF_IDX == 0)
00016a b5e4      	IN   R30,0x24
00016b 31e9      	CPI  R30,LOW(0x19)
00016c f418      	BRSH _0x26
00016d e0e0      	LDI  R30,LOW(0)
00016e 15e5      	CP   R30,R5
00016f f019      	BREQ _0x28
                 _0x26:
000170 e0e0      	LDI  R30,LOW(0)
000171 15e4      	CP   R30,R4
000172 f409      	BRNE _0x25
                 _0x28:
                 ; 0000 00E3     {
                 ; 0000 00E4         PACKET_BUFF[PACKET_BUFF_IDX] = UDR0;
000173 c001      	RJMP _0x46
                 ; 0000 00E5         PACKET_BUFF_IDX++;
                 ; 0000 00E6         TCNT2 = 0;
                 ; 0000 00E7         TIMER2_OVERFLOW = 0;
                 ; 0000 00E8         //PORTB.1 = ~PORTB.1;
                 ; 0000 00E9     }
                 ; 0000 00EA     else {
                 _0x25:
                 ; 0000 00EB         PACKET_BUFF_IDX = 0;
000174 2444      	CLR  R4
                 ; 0000 00EC         PACKET_BUFF[PACKET_BUFF_IDX] = UDR0;
                 _0x46:
000175 2da4      	MOV  R26,R4
000176 e0b0      	LDI  R27,0
000177 50a0      	SUBI R26,LOW(-_PACKET_BUFF)
000178 4fbb      	SBCI R27,HIGH(-_PACKET_BUFF)
000179 b1ec      	IN   R30,0xC
00017a 93ec      	ST   X,R30
                 ; 0000 00ED         PACKET_BUFF_IDX++;
00017b 9443      	INC  R4
                 ; 0000 00EE         TCNT2 = 0;
00017c e0e0      	LDI  R30,LOW(0)
00017d bde4      	OUT  0x24,R30
                 ; 0000 00EF         //PORTB.1 = ~PORTB.1;
                 ; 0000 00F0         TIMER2_OVERFLOW = 0;
00017e 2455      	CLR  R5
                 ; 0000 00F1     }
                 ; 0000 00F2 }
00017f 91e9      	LD   R30,Y+
000180 bfef      	OUT  SREG,R30
000181 91e9      	LD   R30,Y+
000182 91b9      	LD   R27,Y+
000183 91a9      	LD   R26,Y+
000184 9518      	RETI
                 ;
                 ;interrupt [USART1_RXC] void usart1_rxc(void)
                 ; 0000 00F5 {
                 _usart1_rxc:
000185 93ea      	ST   -Y,R30
000186 93fa      	ST   -Y,R31
000187 b7ef      	IN   R30,SREG
000188 93ea      	ST   -Y,R30
                 ; 0000 00F6     unsigned char i = 0;
                 ; 0000 00F7 
                 ; 0000 00F8     i = UDR1;
000189 931a      	ST   -Y,R17
                 ;	i -> R17
00018a e010      	LDI  R17,0
00018b 9110 009c 	LDS  R17,156
                 ; 0000 00F9     if(i == '<'){
00018d 331c      	CPI  R17,60
00018e f411      	BRNE _0x2B
                 ; 0000 00FA         VELOCITY_BUFF_IDX = 0;
00018f 2466      	CLR  R6
                 ; 0000 00FB         VELOCITY_BUFF[VELOCITY_BUFF_IDX] = i;
000190 c007      	RJMP _0x47
                 ; 0000 00FC         VELOCITY_BUFF_IDX++;
                 ; 0000 00FD     }
                 ; 0000 00FE     else if(i == '>'){
                 _0x2B:
000191 331e      	CPI  R17,62
000192 f429      	BRNE _0x2D
                 ; 0000 00FF         VELOCITY_BUFF[VELOCITY_BUFF_IDX] = i;
000193 2de6      	MOV  R30,R6
000194 940e 040e 	CALL SUBOPT_0x0
                 ; 0000 0100         VELOCITY_BUFF_IDX+=2;
000196 9463      	INC  R6
000197 c003      	RJMP _0x48
                 ; 0000 0101     }
                 ; 0000 0102     else{
                 _0x2D:
                 ; 0000 0103         VELOCITY_BUFF[VELOCITY_BUFF_IDX] = i;
                 _0x47:
000198 2de6      	MOV  R30,R6
000199 940e 040e 	CALL SUBOPT_0x0
                 ; 0000 0104         VELOCITY_BUFF_IDX++;
                 _0x48:
00019b 9463      	INC  R6
                 ; 0000 0105     }
                 ; 0000 0106 }
00019c 9119      	LD   R17,Y+
00019d 91e9      	LD   R30,Y+
00019e bfef      	OUT  SREG,R30
00019f 91f9      	LD   R31,Y+
0001a0 91e9      	LD   R30,Y+
0001a1 9518      	RETI
                 ;
                 ;// interrupt [USART1_RXC] void usart1_rxc(void)
                 ;// {
                 ;//     if(((TCNT0 < CHARACTER3_5) && (TIMER2_OVERFLOW == 0)) || VELOCITY_BUFF_IDX == 0)
                 ;//     {
                 ;//         VELOCITY_BUFF[VELOCITY_BUFF_IDX] = UDR1;
                 ;//         TCNT0 = 0;
                 ;//         //PORTB.1 = ~PORTB.1;
                 ;//     }
                 ;//     else {
                 ;//         VELOCITY_BUFF_IDX = 0;
                 ;//         VELOCITY_BUFF[VELOCITY_BUFF_IDX] = UDR0;
                 ;//         VELOCITY_BUFF_IDX++;
                 ;//         TCNT0 = 0;
                 ;//         //PORTB.1 = ~PORTB.1;
                 ;//     }
                 ;//}
                 ;
                 ;interrupt [TIM2_COMP] void timer2_comp(void)
                 ; 0000 011A {
                 _timer2_comp:
0001a2 93ea      	ST   -Y,R30
0001a3 b7ef      	IN   R30,SREG
                 ; 0000 011B     TIMER2_OVERFLOW++;
0001a4 9453      	INC  R5
                 ; 0000 011C }
0001a5 c003      	RJMP _0x4A
                 ;
                 ;interrupt [TIM0_COMP] void timer0_comp(void)
                 ; 0000 011F {
                 _timer0_comp:
0001a6 93ea      	ST   -Y,R30
0001a7 b7ef      	IN   R30,SREG
                 ; 0000 0120     TIMER0_OVERFLOW++;
0001a8 9473      	INC  R7
                 ; 0000 0121 }
                 _0x4A:
0001a9 bfef      	OUT  SREG,R30
0001aa 91e9      	LD   R30,Y+
0001ab 9518      	RETI
                 ;
                 ;void main(void)
                 ; 0000 0124 {
                 _main:
                 ; 0000 0125     float velocity_R = 0;
                 ; 0000 0126     float velocity_L = 0 ;
                 ; 0000 0127     unsigned char BUFF[100] = {0,};
                 ; 0000 0128 
                 ; 0000 0129     usart1_init(bps_115200);
0001ac 97ef      	SBIW R28,63
0001ad 97ad      	SBIW R28,45
0001ae e68c      	LDI  R24,108
0001af e0a0      	LDI  R26,LOW(0)
0001b0 e0b0      	LDI  R27,HIGH(0)
0001b1 e9ee      	LDI  R30,LOW(_0x2F*2)
0001b2 e0f0      	LDI  R31,HIGH(_0x2F*2)
0001b3 940e 05ce 	CALL __INITLOCB
                 ;	velocity_R -> Y+104
                 ;	velocity_L -> Y+100
                 ;	BUFF -> Y+0
0001b5 e0e7      	LDI  R30,LOW(7)
0001b6 e0f0      	LDI  R31,HIGH(7)
0001b7 93fa      	ST   -Y,R31
0001b8 93ea      	ST   -Y,R30
0001b9 df08      	RCALL _usart1_init
                 ; 0000 012A     usart0_init(bps_115200);
0001ba e0e7      	LDI  R30,LOW(7)
0001bb e0f0      	LDI  R31,HIGH(7)
0001bc 93fa      	ST   -Y,R31
0001bd 93ea      	ST   -Y,R30
0001be df1b      	RCALL _usart0_init
                 ; 0000 012B     timer2_init();
0001bf df30      	RCALL _timer2_init
                 ; 0000 012C     SREG |= 0x80;
0001c0 9478      	BSET 7
                 ; 0000 012D 
                 ; 0000 012E     DDRB.1 = 1;
0001c1 9ab9      	SBI  0x17,1
                 ; 0000 012F 
                 ; 0000 0130     delay_ms(5000);
0001c2 e8e8      	LDI  R30,LOW(5000)
0001c3 e1f3      	LDI  R31,HIGH(5000)
0001c4 940e 0413 	CALL SUBOPT_0x1
                 ; 0000 0131     while(1)
                 _0x32:
                 ; 0000 0132     {
                 ; 0000 0133         sscanf(VELOCITY_BUFF,"<%d,%d>", &velocity_R, &velocity_L);
0001c6 e6e4      	LDI  R30,LOW(_VELOCITY_BUFF)
0001c7 e0f5      	LDI  R31,HIGH(_VELOCITY_BUFF)
0001c8 93fa      	ST   -Y,R31
0001c9 93ea      	ST   -Y,R30
                +
0001ca e0ee     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0001cb e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0001cc 93fa      	ST   -Y,R31
0001cd 93ea      	ST   -Y,R30
0001ce 940e 0417 	CALL SUBOPT_0x2
0001d0 940e 0417 	CALL SUBOPT_0x2
0001d2 e088      	LDI  R24,8
0001d3 940e 03c1 	CALL _sscanf
0001d5 962c      	ADIW R28,12
                 ; 0000 0134 
                 ; 0000 0135         //sscanf(PACKET_BUFF,"<%d,%d>", &velocity_R, &velocity_L);
                 ; 0000 0136 
                 ; 0000 0137         //sprintf(BUFF,"<%d,%d>", velocity_R, velocity_L);
                 ; 0000 0138 
                 ; 0000 0139         //puts_USART1(BUFF,20);
                 ; 0000 013A         delay_ms(200);
0001d6 ece8      	LDI  R30,LOW(200)
0001d7 e0f0      	LDI  R31,HIGH(200)
0001d8 940e 0413 	CALL SUBOPT_0x1
                 ; 0000 013B         if(velocity_R != 0 && velocity_L != 0)
0001da 940e 041f 	CALL SUBOPT_0x3
0001dc f019      	BREQ _0x36
0001dd 940e 042a 	CALL SUBOPT_0x4
0001df f409      	BRNE _0x37
                 _0x36:
0001e0 c06b      	RJMP _0x35
                 _0x37:
                 ; 0000 013C         {
                 ; 0000 013D             if(velocity_R >0 && velocity_L>0)
0001e1 940e 041f 	CALL SUBOPT_0x3
0001e3 f41c      	BRGE _0x39
0001e4 940e 042a 	CALL SUBOPT_0x4
0001e6 f00c      	BRLT _0x3A
                 _0x39:
0001e7 c006      	RJMP _0x38
                 _0x3A:
                 ; 0000 013E             {
                 ; 0000 013F                 velocity_R = velocity_R + 300;
0001e8 940e 0435 	CALL SUBOPT_0x5
0001ea 940e 0442 	CALL SUBOPT_0x6
                 ; 0000 0140                 velocity_L = velocity_L + 300;
0001ec 940e 0458 	CALL SUBOPT_0x7
                 ; 0000 0141             }
                 ; 0000 0142 
                 ; 0000 0143             if(velocity_R <0 && velocity_L>0)
                 _0x38:
                +
0001ee 01de     +MOVW R26 , R28
0001ef 59a5     +SUBI R26 , LOW ( - 107 )
0001f0 4fbf     +SBCI R27 , HIGH ( - 107 )
0001f1 91ac     +LD R26 , X
                 	__GETB2SX 107
0001f2 23aa      	TST  R26
0001f3 f41a      	BRPL _0x3C
0001f4 940e 042a 	CALL SUBOPT_0x4
0001f6 f00c      	BRLT _0x3D
                 _0x3C:
0001f7 c006      	RJMP _0x3B
                 _0x3D:
                 ; 0000 0144             {
                 ; 0000 0145                 velocity_R = velocity_R - 300;
0001f8 940e 0435 	CALL SUBOPT_0x5
0001fa 940e 0462 	CALL SUBOPT_0x8
                 ; 0000 0146                 velocity_L = velocity_L + 300;
0001fc 940e 0458 	CALL SUBOPT_0x7
                 ; 0000 0147             }
                 ; 0000 0148 
                 ; 0000 0149             if(velocity_R <0 && velocity_L<0)
                 _0x3B:
                +
0001fe 01de     +MOVW R26 , R28
0001ff 59a5     +SUBI R26 , LOW ( - 107 )
000200 4fbf     +SBCI R27 , HIGH ( - 107 )
000201 91ac     +LD R26 , X
                 	__GETB2SX 107
000202 23aa      	TST  R26
000203 f432      	BRPL _0x3F
                +
000204 01de     +MOVW R26 , R28
000205 59a9     +SUBI R26 , LOW ( - 103 )
000206 4fbf     +SBCI R27 , HIGH ( - 103 )
000207 91ac     +LD R26 , X
                 	__GETB2SX 103
000208 23aa      	TST  R26
000209 f00a      	BRMI _0x40
                 _0x3F:
00020a c006      	RJMP _0x3E
                 _0x40:
                 ; 0000 014A             {
                 ; 0000 014B                 velocity_R = velocity_R - 300;
00020b 940e 0435 	CALL SUBOPT_0x5
00020d 940e 0462 	CALL SUBOPT_0x8
                 ; 0000 014C                 velocity_L = velocity_L - 300;
00020f 940e 0478 	CALL SUBOPT_0x9
                 ; 0000 014D             }
                 ; 0000 014E 
                 ; 0000 014F             if(velocity_R >0 && velocity_L<0)
                 _0x3E:
000211 940e 041f 	CALL SUBOPT_0x3
000213 f434      	BRGE _0x42
                +
000214 01de     +MOVW R26 , R28
000215 59a9     +SUBI R26 , LOW ( - 103 )
000216 4fbf     +SBCI R27 , HIGH ( - 103 )
000217 91ac     +LD R26 , X
                 	__GETB2SX 103
000218 23aa      	TST  R26
000219 f00a      	BRMI _0x43
                 _0x42:
00021a c006      	RJMP _0x41
                 _0x43:
                 ; 0000 0150             {
                 ; 0000 0151                 velocity_R = velocity_R + 300;
00021b 940e 0435 	CALL SUBOPT_0x5
00021d 940e 0442 	CALL SUBOPT_0x6
                 ; 0000 0152                 velocity_L = velocity_L - 300;
00021f 940e 0478 	CALL SUBOPT_0x9
                 ; 0000 0153             }
                 ; 0000 0154             RTU_WriteOperate0(R,(unsigned int)121,(int)(velocity_R));
                 _0x41:
000221 e0e1      	LDI  R30,LOW(1)
000222 93ea      	ST   -Y,R30
000223 e7e9      	LDI  R30,LOW(121)
000224 e0f0      	LDI  R31,HIGH(121)
000225 93fa      	ST   -Y,R31
000226 93ea      	ST   -Y,R30
                +
000227 01fe     +MOVW R30 , R28
000228 59e5     +SUBI R30 , LOW ( - 107 )
000229 4fff     +SBCI R31 , HIGH ( - 107 )
00022a 9001     +LD R0 , Z +
00022b 9011     +LD R1 , Z +
00022c 9161     +LD R22 , Z +
00022d 8170     +LD R23 , Z
00022e 01f0     +MOVW R30 , R0
                 	__GETD1SX 107
00022f 940e 0482 	CALL SUBOPT_0xA
                 ; 0000 0155             delay_ms(50);
                 ; 0000 0156 
                 ; 0000 0157             RTU_WriteOperate0(L,(unsigned int)121,(int)(velocity_L));
000231 e0e2      	LDI  R30,LOW(2)
000232 93ea      	ST   -Y,R30
000233 e7e9      	LDI  R30,LOW(121)
000234 e0f0      	LDI  R31,HIGH(121)
000235 93fa      	ST   -Y,R31
000236 93ea      	ST   -Y,R30
                +
000237 01fe     +MOVW R30 , R28
000238 59e9     +SUBI R30 , LOW ( - 103 )
000239 4fff     +SBCI R31 , HIGH ( - 103 )
00023a 9001     +LD R0 , Z +
00023b 9011     +LD R1 , Z +
00023c 9161     +LD R22 , Z +
00023d 8170     +LD R23 , Z
00023e 01f0     +MOVW R30 , R0
                 	__GETD1SX 103
00023f 940e 0482 	CALL SUBOPT_0xA
                 ; 0000 0158             delay_ms(50);
                 ; 0000 0159 
                 ; 0000 015A             RTU_WriteOperate0(R,(unsigned int)120,(int)(1));
000241 940e 048b 	CALL SUBOPT_0xB
000243 e0e1      	LDI  R30,LOW(1)
000244 e0f0      	LDI  R31,HIGH(1)
000245 940e 0492 	CALL SUBOPT_0xC
                 ; 0000 015B             delay_ms(50);
                 ; 0000 015C 
                 ; 0000 015D             RTU_WriteOperate0(L,(unsigned int)120,(int)(1));
000247 940e 0499 	CALL SUBOPT_0xD
000249 e0e1      	LDI  R30,LOW(1)
00024a e0f0      	LDI  R31,HIGH(1)
00024b c00a      	RJMP _0x49
                 ; 0000 015E             delay_ms(50);
                 ; 0000 015F         }
                 ; 0000 0160         else
                 _0x35:
                 ; 0000 0161         {
                 ; 0000 0162             RTU_WriteOperate0(R,(unsigned int)120,(int)(2));
00024c 940e 048b 	CALL SUBOPT_0xB
00024e e0e2      	LDI  R30,LOW(2)
00024f e0f0      	LDI  R31,HIGH(2)
000250 940e 0492 	CALL SUBOPT_0xC
                 ; 0000 0163             delay_ms(50);
                 ; 0000 0164 
                 ; 0000 0165             RTU_WriteOperate0(L,(unsigned int)120,(int)(2));
000252 940e 0499 	CALL SUBOPT_0xD
000254 e0e2      	LDI  R30,LOW(2)
000255 e0f0      	LDI  R31,HIGH(2)
                 _0x49:
000256 93fa      	ST   -Y,R31
000257 93ea      	ST   -Y,R30
000258 ded1      	RCALL _RTU_WriteOperate0
                 ; 0000 0166             delay_ms(50);
000259 e3e2      	LDI  R30,LOW(50)
00025a e0f0      	LDI  R31,HIGH(50)
00025b 940e 0413 	CALL SUBOPT_0x1
                 ; 0000 0167         }
                 ; 0000 0168 
                 ; 0000 0169     }
00025d cf68      	RJMP _0x32
                 ; 0000 016A }
                 _0x45:
00025e cfff      	RJMP _0x45
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _get_buff_G100:
00025f 931a      	ST   -Y,R17
000260 81a9      	LDD  R26,Y+1
000261 81ba      	LDD  R27,Y+1+1
000262 e0e0      	LDI  R30,LOW(0)
000263 93ec      	ST   X,R30
000264 81ab      	LDD  R26,Y+3
000265 81bc      	LDD  R27,Y+3+1
000266 91ec      	LD   R30,X
000267 2f1e      	MOV  R17,R30
000268 30e0      	CPI  R30,0
000269 f019      	BREQ _0x200007A
00026a e0e0      	LDI  R30,LOW(0)
00026b 93ec      	ST   X,R30
00026c c019      	RJMP _0x200007B
                 _0x200007A:
00026d 81a9      	LDD  R26,Y+1
00026e 81ba      	LDD  R27,Y+1+1
00026f 9611      	ADIW R26,1
000270 940e 05b1 	CALL __GETW1P
000272 9730      	SBIW R30,0
000273 f089      	BREQ _0x200007C
000274 81e9      	LDD  R30,Y+1
000275 81fa      	LDD  R31,Y+1+1
000276 81a1      	LDD  R26,Z+1
000277 81b2      	LDD  R27,Z+2
000278 91ec      	LD   R30,X
000279 2f1e      	MOV  R17,R30
00027a 30e0      	CPI  R30,0
00027b f041      	BREQ _0x200007D
00027c 81a9      	LDD  R26,Y+1
00027d 81ba      	LDD  R27,Y+1+1
00027e 9611      	ADIW R26,1
00027f 91ed      	LD   R30,X+
000280 91fd      	LD   R31,X+
000281 9631      	ADIW R30,1
000282 93fe      	ST   -X,R31
000283 93ee      	ST   -X,R30
                 _0x200007D:
000284 c001      	RJMP _0x200007E
                 _0x200007C:
000285 e010      	LDI  R17,LOW(0)
                 _0x200007E:
                 _0x200007B:
000286 2fe1      	MOV  R30,R17
000287 8118      	LDD  R17,Y+0
000288 9625      	ADIW R28,5
000289 9508      	RET
                 __scanf_G100:
00028a 9725      	SBIW R28,5
00028b 940e 05c0 	CALL __SAVELOCR6
00028d e0e0      	LDI  R30,LOW(0)
00028e e0f0      	LDI  R31,HIGH(0)
00028f 87e8      	STD  Y+8,R30
000290 87f9      	STD  Y+8+1,R31
000291 2f4e      	MOV  R20,R30
                 _0x200007F:
000292 89e9      	LDD  R30,Y+17
000293 89fa      	LDD  R31,Y+17+1
000294 9631      	ADIW R30,1
000295 8be9      	STD  Y+17,R30
000296 8bfa      	STD  Y+17+1,R31
000297 9731      	SBIW R30,1
000298 91e4      	LPM  R30,Z
000299 2f3e      	MOV  R19,R30
00029a 30e0      	CPI  R30,0
00029b f411      	BRNE PC+3
00029c 940c 03bb 	JMP _0x2000081
00029e 940e 04a0 	CALL SUBOPT_0xE
0002a0 f0c1      	BREQ _0x2000082
                 _0x2000083:
0002a1 b7ed      	IN   R30,SPL
0002a2 b7fe      	IN   R31,SPH
0002a3 93fa      	ST   -Y,R31
0002a4 93ea      	ST   -Y,R30
0002a5 934f      	PUSH R20
0002a6 940e 04a5 	CALL SUBOPT_0xF
0002a8 914f      	POP  R20
0002a9 2f3e      	MOV  R19,R30
0002aa 30e0      	CPI  R30,0
0002ab f019      	BREQ _0x2000086
0002ac 940e 04a0 	CALL SUBOPT_0xE
0002ae f409      	BRNE _0x2000087
                 _0x2000086:
0002af c007      	RJMP _0x2000085
                 _0x2000087:
0002b0 940e 04ad 	CALL SUBOPT_0x10
0002b2 f41c      	BRGE _0x2000088
0002b3 efef      	LDI  R30,LOW(65535)
0002b4 efff      	LDI  R31,HIGH(65535)
0002b5 c107      	RJMP _0x2060002
                 _0x2000088:
0002b6 cfea      	RJMP _0x2000083
                 _0x2000085:
0002b7 2f43      	MOV  R20,R19
0002b8 c101      	RJMP _0x2000089
                 _0x2000082:
0002b9 3235      	CPI  R19,37
0002ba f011      	BREQ PC+3
0002bb 940c 03a2 	JMP _0x200008A
0002bd e050      	LDI  R21,LOW(0)
                 _0x200008B:
0002be 89e9      	LDD  R30,Y+17
0002bf 89fa      	LDD  R31,Y+17+1
0002c0 9135      	LPM  R19,Z+
0002c1 8be9      	STD  Y+17,R30
0002c2 8bfa      	STD  Y+17+1,R31
0002c3 3330      	CPI  R19,48
0002c4 f010      	BRLO _0x200008F
0002c5 333a      	CPI  R19,58
0002c6 f008      	BRLO _0x200008E
                 _0x200008F:
0002c7 c007      	RJMP _0x200008D
                 _0x200008E:
0002c8 e0aa      	LDI  R26,LOW(10)
0002c9 9f5a      	MUL  R21,R26
0002ca 2d50      	MOV  R21,R0
0002cb 2fe3      	MOV  R30,R19
0002cc 53e0      	SUBI R30,LOW(48)
0002cd 0f5e      	ADD  R21,R30
0002ce cfef      	RJMP _0x200008B
                 _0x200008D:
0002cf 3030      	CPI  R19,0
0002d0 f409      	BRNE _0x2000091
0002d1 c0e9      	RJMP _0x2000081
                 _0x2000091:
                 _0x2000092:
0002d2 b7ed      	IN   R30,SPL
0002d3 b7fe      	IN   R31,SPH
0002d4 93fa      	ST   -Y,R31
0002d5 93ea      	ST   -Y,R30
0002d6 934f      	PUSH R20
0002d7 940e 04a5 	CALL SUBOPT_0xF
0002d9 914f      	POP  R20
0002da 2f2e      	MOV  R18,R30
0002db 93ea      	ST   -Y,R30
0002dc 940e 03f6 	CALL _isspace
0002de 30e0      	CPI  R30,0
0002df f039      	BREQ _0x2000094
0002e0 940e 04ad 	CALL SUBOPT_0x10
0002e2 f41c      	BRGE _0x2000095
0002e3 efef      	LDI  R30,LOW(65535)
0002e4 efff      	LDI  R31,HIGH(65535)
0002e5 c0d7      	RJMP _0x2060002
                 _0x2000095:
0002e6 cfeb      	RJMP _0x2000092
                 _0x2000094:
0002e7 3020      	CPI  R18,0
0002e8 f409      	BRNE _0x2000096
0002e9 c0c8      	RJMP _0x2000097
                 _0x2000096:
0002ea 2f42      	MOV  R20,R18
0002eb 3050      	CPI  R21,0
0002ec f409      	BRNE _0x2000098
0002ed ef5f      	LDI  R21,LOW(255)
                 _0x2000098:
0002ee 2fe3      	MOV  R30,R19
0002ef 36e3      	CPI  R30,LOW(0x63)
0002f0 f499      	BRNE _0x200009C
0002f1 940e 04b2 	CALL SUBOPT_0x11
0002f3 b7ed      	IN   R30,SPL
0002f4 b7fe      	IN   R31,SPH
0002f5 93fa      	ST   -Y,R31
0002f6 93ea      	ST   -Y,R30
0002f7 934f      	PUSH R20
0002f8 940e 04a5 	CALL SUBOPT_0xF
0002fa 914f      	POP  R20
0002fb 01d8      	MOVW R26,R16
0002fc 93ec      	ST   X,R30
0002fd 940e 04ad 	CALL SUBOPT_0x10
0002ff f41c      	BRGE _0x200009D
000300 efef      	LDI  R30,LOW(65535)
000301 efff      	LDI  R31,HIGH(65535)
000302 c0ba      	RJMP _0x2060002
                 _0x200009D:
000303 c098      	RJMP _0x200009B
                 _0x200009C:
000304 37e3      	CPI  R30,LOW(0x73)
000305 f541      	BRNE _0x20000A6
000306 940e 04b2 	CALL SUBOPT_0x11
                 _0x200009F:
000308 2fe5      	MOV  R30,R21
000309 5051      	SUBI R21,1
00030a 30e0      	CPI  R30,0
00030b f0f1      	BREQ _0x20000A1
00030c b7ed      	IN   R30,SPL
00030d b7fe      	IN   R31,SPH
00030e 93fa      	ST   -Y,R31
00030f 93ea      	ST   -Y,R30
000310 934f      	PUSH R20
000311 940e 04a5 	CALL SUBOPT_0xF
000313 914f      	POP  R20
000314 2f3e      	MOV  R19,R30
000315 30e0      	CPI  R30,0
000316 f019      	BREQ _0x20000A3
000317 940e 04a0 	CALL SUBOPT_0xE
000319 f039      	BREQ _0x20000A2
                 _0x20000A3:
00031a 940e 04ad 	CALL SUBOPT_0x10
00031c f41c      	BRGE _0x20000A5
00031d efef      	LDI  R30,LOW(65535)
00031e efff      	LDI  R31,HIGH(65535)
00031f c09d      	RJMP _0x2060002
                 _0x20000A5:
000320 c009      	RJMP _0x20000A1
                 _0x20000A2:
000321 931f      	PUSH R17
000322 930f      	PUSH R16
                +
000323 5f0f     +SUBI R16 , LOW ( - 1 )
000324 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000325 2fe3      	MOV  R30,R19
000326 91af      	POP  R26
000327 91bf      	POP  R27
000328 93ec      	ST   X,R30
000329 cfde      	RJMP _0x200009F
                 _0x20000A1:
00032a 01d8      	MOVW R26,R16
00032b e0e0      	LDI  R30,LOW(0)
00032c 93ec      	ST   X,R30
00032d c06e      	RJMP _0x200009B
                 _0x20000A6:
00032e e0e1      	LDI  R30,LOW(1)
00032f 87ea      	STD  Y+10,R30
000330 2fe3      	MOV  R30,R19
000331 36e4      	CPI  R30,LOW(0x64)
000332 f011      	BREQ _0x20000AB
000333 36e9      	CPI  R30,LOW(0x69)
000334 f419      	BRNE _0x20000AC
                 _0x20000AB:
000335 e0e0      	LDI  R30,LOW(0)
000336 87ea      	STD  Y+10,R30
000337 c002      	RJMP _0x20000AD
                 _0x20000AC:
000338 37e5      	CPI  R30,LOW(0x75)
000339 f411      	BRNE _0x20000AE
                 _0x20000AD:
00033a e02a      	LDI  R18,LOW(10)
00033b c008      	RJMP _0x20000A9
                 _0x20000AE:
00033c 37e8      	CPI  R30,LOW(0x78)
00033d f411      	BRNE _0x20000AF
00033e e120      	LDI  R18,LOW(16)
00033f c004      	RJMP _0x20000A9
                 _0x20000AF:
000340 32e5      	CPI  R30,LOW(0x25)
000341 f409      	BRNE _0x20000B2
000342 c05f      	RJMP _0x20000B1
                 _0x20000B2:
000343 c077      	RJMP _0x2060003
                 _0x20000A9:
000344 e0e0      	LDI  R30,LOW(0)
000345 83ee      	STD  Y+6,R30
000346 83ef      	STD  Y+6+1,R30
                 _0x20000B3:
000347 2fe5      	MOV  R30,R21
000348 5051      	SUBI R21,1
000349 30e0      	CPI  R30,0
00034a f411      	BRNE PC+3
00034b 940c 038f 	JMP _0x20000B5
00034d b7ed      	IN   R30,SPL
00034e b7fe      	IN   R31,SPH
00034f 93fa      	ST   -Y,R31
000350 93ea      	ST   -Y,R30
000351 934f      	PUSH R20
000352 940e 04a5 	CALL SUBOPT_0xF
000354 914f      	POP  R20
000355 2f3e      	MOV  R19,R30
000356 32e1      	CPI  R30,LOW(0x21)
000357 f438      	BRSH _0x20000B6
000358 940e 04ad 	CALL SUBOPT_0x10
00035a f41c      	BRGE _0x20000B7
00035b efef      	LDI  R30,LOW(65535)
00035c efff      	LDI  R31,HIGH(65535)
00035d c05f      	RJMP _0x2060002
                 _0x20000B7:
00035e c017      	RJMP _0x20000B8
                 _0x20000B6:
00035f 85ea      	LDD  R30,Y+10
000360 30e0      	CPI  R30,0
000361 f439      	BRNE _0x20000B9
000362 323d      	CPI  R19,45
000363 f419      	BRNE _0x20000BA
000364 efef      	LDI  R30,LOW(255)
000365 87ea      	STD  Y+10,R30
000366 cfe0      	RJMP _0x20000B3
                 _0x20000BA:
000367 e0e1      	LDI  R30,LOW(1)
000368 87ea      	STD  Y+10,R30
                 _0x20000B9:
000369 3120      	CPI  R18,16
00036a f431      	BRNE _0x20000BC
00036b 933a      	ST   -Y,R19
00036c 940e 0400 	CALL _isxdigit
00036e 30e0      	CPI  R30,0
00036f f031      	BREQ _0x20000B8
000370 c007      	RJMP _0x20000BE
                 _0x20000BC:
000371 933a      	ST   -Y,R19
000372 940e 03ee 	CALL _isdigit
000374 30e0      	CPI  R30,0
000375 f411      	BRNE _0x20000BF
                 _0x20000B8:
000376 2f43      	MOV  R20,R19
000377 c017      	RJMP _0x20000B5
                 _0x20000BF:
                 _0x20000BE:
000378 3631      	CPI  R19,97
000379 f010      	BRLO _0x20000C0
00037a 5537      	SUBI R19,LOW(87)
00037b c005      	RJMP _0x20000C1
                 _0x20000C0:
00037c 3431      	CPI  R19,65
00037d f010      	BRLO _0x20000C2
00037e 5337      	SUBI R19,LOW(55)
00037f c001      	RJMP _0x20000C3
                 _0x20000C2:
000380 5330      	SUBI R19,LOW(48)
                 _0x20000C3:
                 _0x20000C1:
000381 2fe2      	MOV  R30,R18
000382 81ae      	LDD  R26,Y+6
000383 81bf      	LDD  R27,Y+6+1
000384 e0f0      	LDI  R31,0
000385 940e 05a9 	CALL __MULW12U
000387 01df      	MOVW R26,R30
000388 2fe3      	MOV  R30,R19
000389 e0f0      	LDI  R31,0
00038a 0fea      	ADD  R30,R26
00038b 1ffb      	ADC  R31,R27
00038c 83ee      	STD  Y+6,R30
00038d 83ff      	STD  Y+6+1,R31
00038e cfb8      	RJMP _0x20000B3
                 _0x20000B5:
00038f 940e 04b2 	CALL SUBOPT_0x11
000391 85ea      	LDD  R30,Y+10
000392 81ae      	LDD  R26,Y+6
000393 81bf      	LDD  R27,Y+6+1
000394 e0f0      	LDI  R31,0
000395 fde7      	SBRC R30,7
000396 efff      	SER  R31
000397 940e 05a9 	CALL __MULW12U
000399 01d8      	MOVW R26,R16
00039a 93ed      	ST   X+,R30
00039b 93fc      	ST   X,R31
                 _0x200009B:
00039c 85e8      	LDD  R30,Y+8
00039d 85f9      	LDD  R31,Y+8+1
00039e 9631      	ADIW R30,1
00039f 87e8      	STD  Y+8,R30
0003a0 87f9      	STD  Y+8+1,R31
0003a1 c018      	RJMP _0x20000C4
                 _0x200008A:
                 _0x20000B1:
0003a2 b7ed      	IN   R30,SPL
0003a3 b7fe      	IN   R31,SPH
0003a4 93fa      	ST   -Y,R31
0003a5 93ea      	ST   -Y,R30
0003a6 934f      	PUSH R20
0003a7 940e 04a5 	CALL SUBOPT_0xF
0003a9 914f      	POP  R20
0003aa 17e3      	CP   R30,R19
0003ab f071      	BREQ _0x20000C5
0003ac 940e 04ad 	CALL SUBOPT_0x10
0003ae f41c      	BRGE _0x20000C6
0003af efef      	LDI  R30,LOW(65535)
0003b0 efff      	LDI  R31,HIGH(65535)
0003b1 c00b      	RJMP _0x2060002
                 _0x20000C6:
                 _0x2000097:
0003b2 85e8      	LDD  R30,Y+8
0003b3 85f9      	LDD  R31,Y+8+1
0003b4 9730      	SBIW R30,0
0003b5 f419      	BRNE _0x20000C7
0003b6 efef      	LDI  R30,LOW(65535)
0003b7 efff      	LDI  R31,HIGH(65535)
0003b8 c004      	RJMP _0x2060002
                 _0x20000C7:
0003b9 c001      	RJMP _0x2000081
                 _0x20000C5:
                 _0x20000C4:
                 _0x2000089:
0003ba ced7      	RJMP _0x200007F
                 _0x2000081:
                 _0x2060003:
0003bb 85e8      	LDD  R30,Y+8
0003bc 85f9      	LDD  R31,Y+8+1
                 _0x2060002:
0003bd 940e 05c7 	CALL __LOADLOCR6
0003bf 9663      	ADIW R28,19
0003c0 9508      	RET
                 _sscanf:
0003c1 92ff      	PUSH R15
0003c2 2ef8      	MOV  R15,R24
0003c3 9723      	SBIW R28,3
0003c4 931a      	ST   -Y,R17
0003c5 930a      	ST   -Y,R16
0003c6 940e 04bd 	CALL SUBOPT_0x12
0003c8 9730      	SBIW R30,0
0003c9 f419      	BRNE _0x20000C8
0003ca efef      	LDI  R30,LOW(65535)
0003cb efff      	LDI  R31,HIGH(65535)
0003cc c01c      	RJMP _0x2060001
                 _0x20000C8:
0003cd 01de      	MOVW R26,R28
0003ce 9611      	ADIW R26,1
0003cf 940e 0598 	CALL __ADDW2R15
0003d1 018d      	MOVW R16,R26
0003d2 940e 04bd 	CALL SUBOPT_0x12
0003d4 83eb      	STD  Y+3,R30
0003d5 83fc      	STD  Y+3+1,R31
0003d6 01de      	MOVW R26,R28
0003d7 9615      	ADIW R26,5
0003d8 940e 0598 	CALL __ADDW2R15
0003da 940e 05b1 	CALL __GETW1P
0003dc 93fa      	ST   -Y,R31
0003dd 93ea      	ST   -Y,R30
0003de 931a      	ST   -Y,R17
0003df 930a      	ST   -Y,R16
0003e0 e5ef      	LDI  R30,LOW(_get_buff_G100)
0003e1 e0f2      	LDI  R31,HIGH(_get_buff_G100)
0003e2 93fa      	ST   -Y,R31
0003e3 93ea      	ST   -Y,R30
0003e4 01fe      	MOVW R30,R28
0003e5 9638      	ADIW R30,8
0003e6 93fa      	ST   -Y,R31
0003e7 93ea      	ST   -Y,R30
0003e8 dea1      	RCALL __scanf_G100
                 _0x2060001:
0003e9 8119      	LDD  R17,Y+1
0003ea 8108      	LDD  R16,Y+0
0003eb 9625      	ADIW R28,5
0003ec 90ff      	POP  R15
0003ed 9508      	RET
                 
                 	.CSEG
                 _isdigit:
0003ee e0e1          ldi  r30,1
0003ef 91f9          ld   r31,y+
0003f0 33f0          cpi  r31,'0'
0003f1 f010          brlo isdigit0
0003f2 33fa          cpi  r31,'9'+1
0003f3 f008          brlo isdigit1
                 isdigit0:
0003f4 27ee          clr  r30
                 isdigit1:
0003f5 9508          ret
                 _isspace:
0003f6 e0e1          ldi  r30,1
0003f7 91f9          ld   r31,y+
0003f8 32f0          cpi  r31,' '
0003f9 f029          breq isspace1
0003fa 30f9          cpi  r31,9
0003fb f010          brlo isspace0
0003fc 30fe          cpi  r31,13+1
0003fd f008          brlo isspace1
                 isspace0:
0003fe 27ee          clr  r30
                 isspace1:
0003ff 9508          ret
                 _isxdigit:
000400 e0e1          ldi  r30,1
000401 91f9          ld   r31,y+
000402 53f0          subi r31,0x30
000403 f040          brcs isxdigit0
000404 30fa          cpi  r31,10
000405 f038          brcs isxdigit1
000406 75ff          andi r31,0x5f
000407 50f7          subi r31,7
000408 30fa          cpi  r31,10
000409 f010          brcs isxdigit0
00040a 31f0          cpi  r31,16
00040b f008          brcs isxdigit1
                 isxdigit0:
00040c 27ee          clr  r30
                 isxdigit1:
00040d 9508          ret
                 
                 	.CSEG
                 
                 	.DSEG
                 _PACKET_BUFF:
000500           	.BYTE 0x64
                 _VELOCITY_BUFF:
000564           	.BYTE 0x14
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00040e e0f0      	LDI  R31,0
00040f 59ec      	SUBI R30,LOW(-_VELOCITY_BUFF)
000410 4ffa      	SBCI R31,HIGH(-_VELOCITY_BUFF)
000411 8310      	ST   Z,R17
000412 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1:
000413 93fa      	ST   -Y,R31
000414 93ea      	ST   -Y,R30
000415 940c 04c4 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2:
000417 01fe      	MOVW R30,R28
000418 59e4      	SUBI R30,LOW(-(108))
000419 4fff      	SBCI R31,HIGH(-(108))
00041a 2766      	CLR  R22
00041b 2777      	CLR  R23
00041c 940e 05b5 	CALL __PUTPARD1
00041e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x3:
                +
00041f 01de     +MOVW R26 , R28
000420 59a8     +SUBI R26 , LOW ( - 104 )
000421 4fbf     +SBCI R27 , HIGH ( - 104 )
000422 900d     +LD R0 , X +
000423 901d     +LD R1 , X +
000424 918d     +LD R24 , X +
000425 919c     +LD R25 , X
000426 01d0     +MOVW R26 , R0
                 	__GETD2SX 104
000427 940e 05ba 	CALL __CPD02
000429 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x4:
                +
00042a 01de     +MOVW R26 , R28
00042b 59ac     +SUBI R26 , LOW ( - 100 )
00042c 4fbf     +SBCI R27 , HIGH ( - 100 )
00042d 900d     +LD R0 , X +
00042e 901d     +LD R1 , X +
00042f 918d     +LD R24 , X +
000430 919c     +LD R25 , X
000431 01d0     +MOVW R26 , R0
                 	__GETD2SX 100
000432 940e 05ba 	CALL __CPD02
000434 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x5:
                +
000435 01fe     +MOVW R30 , R28
000436 59e8     +SUBI R30 , LOW ( - 104 )
000437 4fff     +SBCI R31 , HIGH ( - 104 )
000438 9001     +LD R0 , Z +
000439 9011     +LD R1 , Z +
00043a 9161     +LD R22 , Z +
00043b 8170     +LD R23 , Z
00043c 01f0     +MOVW R30 , R0
                 	__GETD1SX 104
                +
00043d e0a0     +LDI R26 , LOW ( 0x43960000 )
00043e e0b0     +LDI R27 , HIGH ( 0x43960000 )
00043f e986     +LDI R24 , BYTE3 ( 0x43960000 )
000440 e493     +LDI R25 , BYTE4 ( 0x43960000 )
                 	__GETD2N 0x43960000
000441 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:16 WORDS
                 SUBOPT_0x6:
000442 940e 0548 	CALL __ADDF12
                +
000444 01de     +MOVW R26 , R28
000445 59a8     +SUBI R26 , LOW ( - 104 )
000446 4fbf     +SBCI R27 , HIGH ( - 104 )
000447 93ed     +ST X + , R30
000448 93fd     +ST X + , R31
000449 936d     +ST X + , R22
00044a 937c     +ST X , R23
                 	__PUTD1SX 104
                +
00044b 01fe     +MOVW R30 , R28
00044c 59ec     +SUBI R30 , LOW ( - 100 )
00044d 4fff     +SBCI R31 , HIGH ( - 100 )
00044e 9001     +LD R0 , Z +
00044f 9011     +LD R1 , Z +
000450 9161     +LD R22 , Z +
000451 8170     +LD R23 , Z
000452 01f0     +MOVW R30 , R0
                 	__GETD1SX 100
                +
000453 e0a0     +LDI R26 , LOW ( 0x43960000 )
000454 e0b0     +LDI R27 , HIGH ( 0x43960000 )
000455 e986     +LDI R24 , BYTE3 ( 0x43960000 )
000456 e493     +LDI R25 , BYTE4 ( 0x43960000 )
                 	__GETD2N 0x43960000
000457 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x7:
000458 940e 0548 	CALL __ADDF12
                +
00045a 01de     +MOVW R26 , R28
00045b 59ac     +SUBI R26 , LOW ( - 100 )
00045c 4fbf     +SBCI R27 , HIGH ( - 100 )
00045d 93ed     +ST X + , R30
00045e 93fd     +ST X + , R31
00045f 936d     +ST X + , R22
000460 937c     +ST X , R23
                 	__PUTD1SX 100
000461 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:16 WORDS
                 SUBOPT_0x8:
000462 940e 0541 	CALL __SUBF12
                +
000464 01de     +MOVW R26 , R28
000465 59a8     +SUBI R26 , LOW ( - 104 )
000466 4fbf     +SBCI R27 , HIGH ( - 104 )
000467 93ed     +ST X + , R30
000468 93fd     +ST X + , R31
000469 936d     +ST X + , R22
00046a 937c     +ST X , R23
                 	__PUTD1SX 104
                +
00046b 01fe     +MOVW R30 , R28
00046c 59ec     +SUBI R30 , LOW ( - 100 )
00046d 4fff     +SBCI R31 , HIGH ( - 100 )
00046e 9001     +LD R0 , Z +
00046f 9011     +LD R1 , Z +
000470 9161     +LD R22 , Z +
000471 8170     +LD R23 , Z
000472 01f0     +MOVW R30 , R0
                 	__GETD1SX 100
                +
000473 e0a0     +LDI R26 , LOW ( 0x43960000 )
000474 e0b0     +LDI R27 , HIGH ( 0x43960000 )
000475 e986     +LDI R24 , BYTE3 ( 0x43960000 )
000476 e493     +LDI R25 , BYTE4 ( 0x43960000 )
                 	__GETD2N 0x43960000
000477 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x9:
000478 940e 0541 	CALL __SUBF12
                +
00047a 01de     +MOVW R26 , R28
00047b 59ac     +SUBI R26 , LOW ( - 100 )
00047c 4fbf     +SBCI R27 , HIGH ( - 100 )
00047d 93ed     +ST X + , R30
00047e 93fd     +ST X + , R31
00047f 936d     +ST X + , R22
000480 937c     +ST X , R23
                 	__PUTD1SX 100
000481 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xA:
000482 940e 04f5 	CALL __CFD1
000484 93fa      	ST   -Y,R31
000485 93ea      	ST   -Y,R30
000486 940e 012a 	CALL _RTU_WriteOperate0
000488 e3e2      	LDI  R30,LOW(50)
000489 e0f0      	LDI  R31,HIGH(50)
00048a cf88      	RJMP SUBOPT_0x1
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
00048b e0e1      	LDI  R30,LOW(1)
00048c 93ea      	ST   -Y,R30
00048d e7e8      	LDI  R30,LOW(120)
00048e e0f0      	LDI  R31,HIGH(120)
00048f 93fa      	ST   -Y,R31
000490 93ea      	ST   -Y,R30
000491 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xC:
000492 93fa      	ST   -Y,R31
000493 93ea      	ST   -Y,R30
000494 940e 012a 	CALL _RTU_WriteOperate0
000496 e3e2      	LDI  R30,LOW(50)
000497 e0f0      	LDI  R31,HIGH(50)
000498 cf7a      	RJMP SUBOPT_0x1
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xD:
000499 e0e2      	LDI  R30,LOW(2)
00049a 93ea      	ST   -Y,R30
00049b e7e8      	LDI  R30,LOW(120)
00049c e0f0      	LDI  R31,HIGH(120)
00049d 93fa      	ST   -Y,R31
00049e 93ea      	ST   -Y,R30
00049f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
0004a0 933a      	ST   -Y,R19
0004a1 940e 03f6 	CALL _isspace
0004a3 30e0      	CPI  R30,0
0004a4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0xF:
0004a5 85ed      	LDD  R30,Y+13
0004a6 85fe      	LDD  R31,Y+13+1
0004a7 93fa      	ST   -Y,R31
0004a8 93ea      	ST   -Y,R30
0004a9 89e9      	LDD  R30,Y+17
0004aa 89fa      	LDD  R31,Y+17+1
0004ab 9509      	ICALL
0004ac 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x10:
0004ad 85ab      	LDD  R26,Y+11
0004ae 85bc      	LDD  R27,Y+11+1
0004af 91ac      	LD   R26,X
0004b0 30a0      	CPI  R26,0
0004b1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x11:
0004b2 85ef      	LDD  R30,Y+15
0004b3 89f8      	LDD  R31,Y+15+1
0004b4 9734      	SBIW R30,4
0004b5 87ef      	STD  Y+15,R30
0004b6 8bf8      	STD  Y+15+1,R31
0004b7 85af      	LDD  R26,Y+15
0004b8 89b8      	LDD  R27,Y+15+1
0004b9 9614      	ADIW R26,4
0004ba 910d      	LD   R16,X+
0004bb 911c      	LD   R17,X
0004bc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x12:
0004bd 01de      	MOVW R26,R28
0004be 9617      	ADIW R26,7
0004bf 940e 0598 	CALL __ADDW2R15
0004c1 940e 05b1 	CALL __GETW1P
0004c3 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0004c4 91e9      	ld   r30,y+
0004c5 91f9      	ld   r31,y+
0004c6 9630      	adiw r30,0
0004c7 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0004c8 e686     +LDI R24 , LOW ( 0xE66 )
0004c9 e09e     +LDI R25 , HIGH ( 0xE66 )
                +__DELAY_USW_LOOP :
0004ca 9701     +SBIW R24 , 1
0004cb f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xE66
0004cc 95a8      	wdr
0004cd 9731      	sbiw r30,1
0004ce f7c9      	brne __delay_ms0
                 __delay_ms1:
0004cf 9508      	ret
                 
                 __REPACK:
0004d0 e850      	LDI  R21,0x80
0004d1 2757      	EOR  R21,R23
0004d2 f411      	BRNE __REPACK0
0004d3 935f      	PUSH R21
0004d4 c0b1      	RJMP __ZERORES
                 __REPACK0:
0004d5 3f5f      	CPI  R21,0xFF
0004d6 f031      	BREQ __REPACK1
0004d7 0f66      	LSL  R22
0004d8 0c00      	LSL  R0
0004d9 9557      	ROR  R21
0004da 9567      	ROR  R22
0004db 2f75      	MOV  R23,R21
0004dc 9508      	RET
                 __REPACK1:
0004dd 935f      	PUSH R21
0004de 2000      	TST  R0
0004df f00a      	BRMI __REPACK2
0004e0 c0b1      	RJMP __MAXRES
                 __REPACK2:
0004e1 c0aa      	RJMP __MINRES
                 
                 __UNPACK:
0004e2 e850      	LDI  R21,0x80
0004e3 2e19      	MOV  R1,R25
0004e4 2215      	AND  R1,R21
0004e5 0f88      	LSL  R24
0004e6 1f99      	ROL  R25
0004e7 2795      	EOR  R25,R21
0004e8 0f55      	LSL  R21
0004e9 9587      	ROR  R24
                 
                 __UNPACK1:
0004ea e850      	LDI  R21,0x80
0004eb 2e07      	MOV  R0,R23
0004ec 2205      	AND  R0,R21
0004ed 0f66      	LSL  R22
0004ee 1f77      	ROL  R23
0004ef 2775      	EOR  R23,R21
0004f0 0f55      	LSL  R21
0004f1 9567      	ROR  R22
0004f2 9508      	RET
                 
                 __CFD1U:
0004f3 9468      	SET
0004f4 c001      	RJMP __CFD1U0
                 __CFD1:
0004f5 94e8      	CLT
                 __CFD1U0:
0004f6 935f      	PUSH R21
0004f7 dff2      	RCALL __UNPACK1
0004f8 3870      	CPI  R23,0x80
0004f9 f018      	BRLO __CFD10
0004fa 3f7f      	CPI  R23,0xFF
0004fb f408      	BRCC __CFD10
0004fc c089      	RJMP __ZERORES
                 __CFD10:
0004fd e156      	LDI  R21,22
0004fe 1b57      	SUB  R21,R23
0004ff f4aa      	BRPL __CFD11
000500 9551      	NEG  R21
000501 3058      	CPI  R21,8
000502 f40e      	BRTC __CFD19
000503 3059      	CPI  R21,9
                 __CFD19:
000504 f030      	BRLO __CFD17
000505 efef      	SER  R30
000506 efff      	SER  R31
000507 ef6f      	SER  R22
000508 e77f      	LDI  R23,0x7F
000509 f977      	BLD  R23,7
00050a c01a      	RJMP __CFD15
                 __CFD17:
00050b 2777      	CLR  R23
00050c 2355      	TST  R21
00050d f0b9      	BREQ __CFD15
                 __CFD18:
00050e 0fee      	LSL  R30
00050f 1fff      	ROL  R31
000510 1f66      	ROL  R22
000511 1f77      	ROL  R23
000512 955a      	DEC  R21
000513 f7d1      	BRNE __CFD18
000514 c010      	RJMP __CFD15
                 __CFD11:
000515 2777      	CLR  R23
                 __CFD12:
000516 3058      	CPI  R21,8
000517 f028      	BRLO __CFD13
000518 2fef      	MOV  R30,R31
000519 2ff6      	MOV  R31,R22
00051a 2f67      	MOV  R22,R23
00051b 5058      	SUBI R21,8
00051c cff9      	RJMP __CFD12
                 __CFD13:
00051d 2355      	TST  R21
00051e f031      	BREQ __CFD15
                 __CFD14:
00051f 9576      	LSR  R23
000520 9567      	ROR  R22
000521 95f7      	ROR  R31
000522 95e7      	ROR  R30
000523 955a      	DEC  R21
000524 f7d1      	BRNE __CFD14
                 __CFD15:
000525 2000      	TST  R0
000526 f40a      	BRPL __CFD16
000527 d074      	RCALL __ANEGD1
                 __CFD16:
000528 915f      	POP  R21
000529 9508      	RET
                 
                 __SWAPACC:
00052a 934f      	PUSH R20
00052b 01af      	MOVW R20,R30
00052c 01fd      	MOVW R30,R26
00052d 01da      	MOVW R26,R20
00052e 01ab      	MOVW R20,R22
00052f 01bc      	MOVW R22,R24
000530 01ca      	MOVW R24,R20
000531 2d40      	MOV  R20,R0
000532 2c01      	MOV  R0,R1
000533 2e14      	MOV  R1,R20
000534 914f      	POP  R20
000535 9508      	RET
                 
                 __UADD12:
000536 0fea      	ADD  R30,R26
000537 1ffb      	ADC  R31,R27
000538 1f68      	ADC  R22,R24
000539 9508      	RET
                 
                 __NEGMAN1:
00053a 95e0      	COM  R30
00053b 95f0      	COM  R31
00053c 9560      	COM  R22
00053d 5fef      	SUBI R30,-1
00053e 4fff      	SBCI R31,-1
00053f 4f6f      	SBCI R22,-1
000540 9508      	RET
                 
                 __SUBF12:
000541 935f      	PUSH R21
000542 df9f      	RCALL __UNPACK
000543 3890      	CPI  R25,0x80
000544 f171      	BREQ __ADDF129
000545 e850      	LDI  R21,0x80
000546 2615      	EOR  R1,R21
                 
000547 c004      	RJMP __ADDF120
                 
                 __ADDF12:
000548 935f      	PUSH R21
000549 df98      	RCALL __UNPACK
00054a 3890      	CPI  R25,0x80
00054b f139      	BREQ __ADDF129
                 
                 __ADDF120:
00054c 3870      	CPI  R23,0x80
00054d f121      	BREQ __ADDF128
                 __ADDF121:
00054e 2f57      	MOV  R21,R23
00054f 1b59      	SUB  R21,R25
000550 f12b      	BRVS __ADDF1211
000551 f412      	BRPL __ADDF122
000552 dfd7      	RCALL __SWAPACC
000553 cffa      	RJMP __ADDF121
                 __ADDF122:
000554 3158      	CPI  R21,24
000555 f018      	BRLO __ADDF123
000556 27aa      	CLR  R26
000557 27bb      	CLR  R27
000558 2788      	CLR  R24
                 __ADDF123:
000559 3058      	CPI  R21,8
00055a f028      	BRLO __ADDF124
00055b 2fab      	MOV  R26,R27
00055c 2fb8      	MOV  R27,R24
00055d 2788      	CLR  R24
00055e 5058      	SUBI R21,8
00055f cff9      	RJMP __ADDF123
                 __ADDF124:
000560 2355      	TST  R21
000561 f029      	BREQ __ADDF126
                 __ADDF125:
000562 9586      	LSR  R24
000563 95b7      	ROR  R27
000564 95a7      	ROR  R26
000565 955a      	DEC  R21
000566 f7d9      	BRNE __ADDF125
                 __ADDF126:
000567 2d50      	MOV  R21,R0
000568 2551      	EOR  R21,R1
000569 f072      	BRMI __ADDF127
00056a dfcb      	RCALL __UADD12
00056b f438      	BRCC __ADDF129
00056c 9567      	ROR  R22
00056d 95f7      	ROR  R31
00056e 95e7      	ROR  R30
00056f 9573      	INC  R23
000570 f413      	BRVC __ADDF129
000571 c020      	RJMP __MAXRES
                 __ADDF128:
000572 dfb7      	RCALL __SWAPACC
                 __ADDF129:
000573 df5c      	RCALL __REPACK
000574 915f      	POP  R21
000575 9508      	RET
                 __ADDF1211:
000576 f7d8      	BRCC __ADDF128
000577 cffb      	RJMP __ADDF129
                 __ADDF127:
000578 1bea      	SUB  R30,R26
000579 0bfb      	SBC  R31,R27
00057a 0b68      	SBC  R22,R24
00057b f051      	BREQ __ZERORES
00057c f410      	BRCC __ADDF1210
00057d 9400      	COM  R0
00057e dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
00057f 2366      	TST  R22
000580 f392      	BRMI __ADDF129
000581 0fee      	LSL  R30
000582 1fff      	ROL  R31
000583 1f66      	ROL  R22
000584 957a      	DEC  R23
000585 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
000586 27ee      	CLR  R30
000587 27ff      	CLR  R31
000588 2766      	CLR  R22
000589 2777      	CLR  R23
00058a 915f      	POP  R21
00058b 9508      	RET
                 
                 __MINRES:
00058c efef      	SER  R30
00058d efff      	SER  R31
00058e e76f      	LDI  R22,0x7F
00058f ef7f      	SER  R23
000590 915f      	POP  R21
000591 9508      	RET
                 
                 __MAXRES:
000592 efef      	SER  R30
000593 efff      	SER  R31
000594 e76f      	LDI  R22,0x7F
000595 e77f      	LDI  R23,0x7F
000596 915f      	POP  R21
000597 9508      	RET
                 
                 __ADDW2R15:
000598 2400      	CLR  R0
000599 0daf      	ADD  R26,R15
00059a 1db0      	ADC  R27,R0
00059b 9508      	RET
                 
                 __ANEGD1:
00059c 95f0      	COM  R31
00059d 9560      	COM  R22
00059e 9570      	COM  R23
00059f 95e1      	NEG  R30
0005a0 4fff      	SBCI R31,-1
0005a1 4f6f      	SBCI R22,-1
0005a2 4f7f      	SBCI R23,-1
0005a3 9508      	RET
                 
                 __ASRW8:
0005a4 2fef      	MOV  R30,R31
0005a5 27ff      	CLR  R31
0005a6 fde7      	SBRC R30,7
0005a7 efff      	SER  R31
0005a8 9508      	RET
                 
                 __MULW12U:
0005a9 9ffa      	MUL  R31,R26
0005aa 2df0      	MOV  R31,R0
0005ab 9feb      	MUL  R30,R27
0005ac 0df0      	ADD  R31,R0
0005ad 9fea      	MUL  R30,R26
0005ae 2de0      	MOV  R30,R0
0005af 0df1      	ADD  R31,R1
0005b0 9508      	RET
                 
                 __GETW1P:
0005b1 91ed      	LD   R30,X+
0005b2 91fc      	LD   R31,X
0005b3 9711      	SBIW R26,1
0005b4 9508      	RET
                 
                 __PUTPARD1:
0005b5 937a      	ST   -Y,R23
0005b6 936a      	ST   -Y,R22
0005b7 93fa      	ST   -Y,R31
0005b8 93ea      	ST   -Y,R30
0005b9 9508      	RET
                 
                 __CPD02:
0005ba 2400      	CLR  R0
0005bb 160a      	CP   R0,R26
0005bc 060b      	CPC  R0,R27
0005bd 0608      	CPC  R0,R24
0005be 0609      	CPC  R0,R25
0005bf 9508      	RET
                 
                 __SAVELOCR6:
0005c0 935a      	ST   -Y,R21
                 __SAVELOCR5:
0005c1 934a      	ST   -Y,R20
                 __SAVELOCR4:
0005c2 933a      	ST   -Y,R19
                 __SAVELOCR3:
0005c3 932a      	ST   -Y,R18
                 __SAVELOCR2:
0005c4 931a      	ST   -Y,R17
0005c5 930a      	ST   -Y,R16
0005c6 9508      	RET
                 
                 __LOADLOCR6:
0005c7 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0005c8 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0005c9 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0005ca 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0005cb 8119      	LDD  R17,Y+1
0005cc 8108      	LD   R16,Y
0005cd 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
0005ce 0fac      	ADD  R26,R28
0005cf 1fbd      	ADC  R27,R29
                 __INITLOC0:
0005d0 9005      	LPM  R0,Z+
0005d1 920d      	ST   X+,R0
0005d2 958a      	DEC  R24
0005d3 f7e1      	BRNE __INITLOC0
0005d4 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :  42 r1 :  15 r2 :   0 r3 :   0 r4 :   4 r5 :   3 r6 :   5 r7 :   1 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  17 r17:  25 r18:  20 r19:  37 r20:  28 r21:  58 r22:  36 r23:  35 
r24:  30 r25:  15 r26:  88 r27:  45 r28:  37 r29:   2 r30: 333 r31: 153 
x  :  53 y  : 193 z  :  33 
Registers used: 26 out of 35 (74.3%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   6 add   :   8 
adiw  :  22 and   :   2 andi  :   5 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   4 brcs  :   4 break :   0 breq  :  28 
brge  :  10 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  13 
brlt  :   2 brmi  :   5 brne  :  32 brpl  :   5 brsh  :   2 brtc  :   1 
brts  :   0 brvc  :   2 brvs  :   1 bset  :   1 bst   :   0 call  :  87 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  23 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   7 
cp    :   4 cpc   :   5 cpi   :  55 cpse  :   0 dec   :   6 des   :   0 
elpm  :   0 eor   :   9 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   1 
ijmp  :   0 in    :  18 inc   :   6 jmp   :  40 ld    :  63 ldd   :  59 
ldi   : 152 lds   :   3 lpm   :  11 lsl   :   8 lsr   :   3 mov   :  42 
movw  :  48 mul   :   4 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 
or    :   1 ori   :   0 out   :  18 pop   :  15 push  :  15 rcall :  16 
ret   :  48 reti  :   3 rjmp  :  70 rol   :   7 ror   :  13 sbc   :   2 
sbci  :  26 sbi   :   1 sbic  :   0 sbis  :   1 sbiw  :  17 sbr   :   0 
sbrc  :   2 sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 
ser   :  10 ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    : 113 std   :  34 sts   :  10 sub   :   3 subi  :  32 
swap  :   0 tst   :  10 wdr   :   1 
Instructions used: 70 out of 117 (59.8%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000baa   2840    146   2986  131072   2.3%
[.dseg] 0x000100 0x000578      0    120    120    4351   2.8%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 4 warnings
=======

AVRASM ver. 2.1.30  C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm Mon Jan 13 14:06:37 2020

C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1061): warning: Register r5 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1062): warning: Register r4 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1063): warning: Register r7 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1064): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega128
                 ;Program type             : Application
                 ;Clock frequency          : 14.745600 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 1024 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : No
                 ;global 'const' stored in FLASH: Yes
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4351
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _TIMER2_OVERFLOW=R5
                 	.DEF _PACKET_BUFF_IDX=R4
                 	.DEF _TIMER0_OVERFLOW=R7
                 	.DEF _VELOCITY_BUFF_IDX=R6
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0063 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0165 	JMP  _timer2_comp
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0169 	JMP  _timer0_comp
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0139 	JMP  _usart0_rxc
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 014c 	JMP  _usart1_rxc
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x2D:
00004f 0000
000050 0000
000051 0000
000052 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000053 0000
000054 0000
000055 0000
000056 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000057 0000
000058 0000      	.DB  0x0,0x0,0x0,0x0
                 _0x47:
000059 0000
00005a 0000      	.DB  0x0,0x0,0x0,0x0
                 _0x0:
00005b 253c
00005c 2c64
00005d 6425
00005e 003e      	.DB  0x3C,0x25,0x64,0x2C,0x25,0x64,0x3E,0x0
                 
                 __GLOBAL_INI_TBL:
00005f 0004      	.DW  0x04
000060 0004      	.DW  0x04
000061 00b2      	.DW  _0x47*2
                 
                 _0xFFFFFFFF:
000062 0000      	.DW  0
                 
                 __RESET:
000063 94f8      	CLI
000064 27ee      	CLR  R30
000065 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000066 e0f1      	LDI  R31,1
000067 bff5      	OUT  MCUCR,R31
000068 bfe5      	OUT  MCUCR,R30
000069 93e0 006c 	STS  XMCRB,R30
                 
                 ;DISABLE WATCHDOG
00006b e1f8      	LDI  R31,0x18
00006c bdf1      	OUT  WDTCR,R31
00006d bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
00006e e08d      	LDI  R24,(14-2)+1
00006f e0a2      	LDI  R26,2
000070 27bb      	CLR  R27
                 __CLEAR_REG:
000071 93ed      	ST   X+,R30
000072 958a      	DEC  R24
000073 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000074 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000075 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000076 e0a0      	LDI  R26,LOW(__SRAM_START)
000077 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000078 93ed      	ST   X+,R30
000079 9701      	SBIW R24,1
00007a f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00007b ebee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00007c e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00007d 9185      	LPM  R24,Z+
00007e 9195      	LPM  R25,Z+
00007f 9700      	SBIW R24,0
000080 f061      	BREQ __GLOBAL_INI_END
000081 91a5      	LPM  R26,Z+
000082 91b5      	LPM  R27,Z+
000083 9005      	LPM  R0,Z+
000084 9015      	LPM  R1,Z+
000085 01bf      	MOVW R22,R30
000086 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000087 9005      	LPM  R0,Z+
000088 920d      	ST   X+,R0
000089 9701      	SBIW R24,1
00008a f7e1      	BRNE __GLOBAL_INI_LOOP
00008b 01fb      	MOVW R30,R22
00008c cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
00008d bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00008e efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00008f bfed      	OUT  SPL,R30
000090 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000091 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000092 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000093 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000094 940c 016f 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdio.h>
                 ;#include <delay.h>
                 ;
                 ;#define bps_115200 0x0007
                 ;
                 ;#define POLYNORMIAL 0xA001
                 ;
                 ;#define CHARACTER3_5 25
                 ;
                 ;#define R 0x01
                 ;#define L 0x02
                 ;
                 ;unsigned char TIMER2_OVERFLOW = 0;
                 ;unsigned char PACKET_BUFF[100] = {0,};
                 ;unsigned char PACKET_BUFF_IDX = 0;
                 ;
                 ;unsigned char TIMER0_OVERFLOW = 0;
                 ;unsigned char VELOCITY_BUFF[20] = {0,};
                 ;unsigned char VELOCITY_BUFF_IDX = 0;
                 ;
                 ;void usart1_init(int bps)
                 ; 0000 0017 {
                 
                 	.CSEG
                 _usart1_init:
                 ; 0000 0018     UCSR1A = 0x00;
                 ;	bps -> Y+0
000096 e0e0      	LDI  R30,LOW(0)
000097 93e0 009b 	STS  155,R30
                 ; 0000 0019     UCSR1B = (1<<RXEN1)|(1<<TXEN1)|(1<<RXCIE1); // RXCIE1 bit is recevie interrupt allow
000099 e9e8      	LDI  R30,LOW(152)
00009a 93e0 009a 	STS  154,R30
                 ; 0000 001A     UCSR1C = (1<<UCSZ11)|(1<<UCSZ10);
00009c e0e6      	LDI  R30,LOW(6)
00009d 93e0 009d 	STS  157,R30
                 ; 0000 001B     UCSR1C &= ~(1<<UMSEL1);
00009f 91e0 009d 	LDS  R30,157
0000a1 7bef      	ANDI R30,0xBF
0000a2 93e0 009d 	STS  157,R30
                 ; 0000 001C 
                 ; 0000 001D     UBRR1H = (unsigned char)((bps>>8)  & 0x00ff);
0000a4 81e8      	LD   R30,Y
0000a5 81f9      	LDD  R31,Y+1
0000a6 940e 040b 	CALL __ASRW8
0000a8 93e0 0098 	STS  152,R30
                 ; 0000 001E     UBRR1L = (unsigned char)(bps & 0x00ff);
0000aa 81e8      	LD   R30,Y
0000ab 93e0 0099 	STS  153,R30
                 ; 0000 001F }
0000ad c014      	RJMP _0x2060004
                 ;
                 ;void usart0_init(int bps)
                 ; 0000 0022 {
                 _usart0_init:
                 ; 0000 0023     UCSR0A = 0x00;
                 ;	bps -> Y+0
0000ae e0e0      	LDI  R30,LOW(0)
0000af b9eb      	OUT  0xB,R30
                 ; 0000 0024     UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0); // RXCIE1 bit is recevie interrupt allow
0000b0 e9e8      	LDI  R30,LOW(152)
0000b1 b9ea      	OUT  0xA,R30
                 ; 0000 0025     UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
0000b2 e0e6      	LDI  R30,LOW(6)
0000b3 93e0 0095 	STS  149,R30
                 ; 0000 0026     UCSR0C &= ~(1<<UMSEL0);
0000b5 91e0 0095 	LDS  R30,149
0000b7 7bef      	ANDI R30,0xBF
0000b8 93e0 0095 	STS  149,R30
                 ; 0000 0027 
                 ; 0000 0028     UBRR0H = (unsigned char)((bps>>8)  & 0x00ff);
0000ba 81e8      	LD   R30,Y
0000bb 81f9      	LDD  R31,Y+1
0000bc 940e 040b 	CALL __ASRW8
0000be 93e0 0090 	STS  144,R30
                 ; 0000 0029     UBRR0L = (unsigned char)(bps & 0x00ff);
0000c0 81e8      	LD   R30,Y
0000c1 b9e9      	OUT  0x9,R30
                 ; 0000 002A }
                 _0x2060004:
0000c2 9622      	ADIW R28,2
0000c3 9508      	RET
                 ;
                 ;void timer2_init(void)
                 ; 0000 002D {
                 _timer2_init:
                 ; 0000 002E     //TIMER2
                 ; 0000 002F     TCCR2 = (1<<WGM21)|(1<<CS22)|(1<<CS20);// CTC모드, 1024분주
0000c4 e0ed      	LDI  R30,LOW(13)
0000c5 bde5      	OUT  0x25,R30
                 ; 0000 0030 
                 ; 0000 0031     OCR2 = 40;
0000c6 e2e8      	LDI  R30,LOW(40)
0000c7 bde3      	OUT  0x23,R30
                 ; 0000 0032     //TIMSK = (1<<OCIE2);
                 ; 0000 0033 }
0000c8 9508      	RET
                 ;void timer0_init(void)
                 ; 0000 0035 {
                 ; 0000 0036     TCCR0 = (1<<WGM01)|(1<<CS02)|(1<<CS01)|(1<<CS00); // CTC모드, 1024분주
                 ; 0000 0037     OCR0 = 40;
                 ; 0000 0038     TIMSK = (1<<OCIE2)|(1<<OCIE0);
                 ; 0000 0039 }
                 ;
                 ;void putch_USART1(char data)
                 ; 0000 003C {
                 ; 0000 003D     while(!(UCSR1A & (1<<UDRE1))); // UDRE flag is USART Data Register Empty
                 ;	data -> Y+0
                 ; 0000 003E     UDR1 = data;
                 ; 0000 003F }
                 ;
                 ;//USART 문자열 송신
                 ;void puts_USART1(char *str,char IDX)
                 ; 0000 0043 {
                 ; 0000 0044     unsigned char i = 0;
                 ; 0000 0045 
                 ; 0000 0046     for(i = 0;i<IDX-1;i++)
                 ;	*str -> Y+2
                 ;	IDX -> Y+1
                 ;	i -> R17
                 ; 0000 0047     {
                 ; 0000 0048         putch_USART1(*(str+i));
                 ; 0000 0049     }
                 ; 0000 004A 
                 ; 0000 004B     for(i = 0; i<IDX; i++)
                 ; 0000 004C     {
                 ; 0000 004D         *(str+i) = 0;
                 ; 0000 004E     }
                 ; 0000 004F }
                 ;
                 ;void putch_USART0(char data)
                 ; 0000 0052 {
                 _putch_USART0:
                 ; 0000 0053     while(!(UCSR0A & (1<<UDRE0))); // UDRE flag is USART Data Register Empty
                 ;	data -> Y+0
                 _0xC:
0000c9 9b5d      	SBIS 0xB,5
0000ca cffe      	RJMP _0xC
                 ; 0000 0054     UDR0 = data;
0000cb 81e8      	LD   R30,Y
0000cc b9ec      	OUT  0xC,R30
                 ; 0000 0055 }
0000cd 9621      	ADIW R28,1
0000ce 9508      	RET
                 ;
                 ;void puts_USART0(char *str,char IDX)
                 ; 0000 0058 {
                 ; 0000 0059     //PACKET_BUFF[PACKET_BUFF_IDX] = 0;
                 ; 0000 005A     unsigned char i = 0;
                 ; 0000 005B     for(i = 0;i<IDX-1;i++)
                 ;	*str -> Y+2
                 ;	IDX -> Y+1
                 ;	i -> R17
                 ; 0000 005C     {
                 ; 0000 005D         putch_USART1(*(str+i));
                 ; 0000 005E     }
                 ; 0000 005F 
                 ; 0000 0060     for(i = 0; i<IDX; i++)
                 ; 0000 0061     {
                 ; 0000 0062         *(str+i) = 0;
                 ; 0000 0063     }
                 ; 0000 0064 }
                 ;
                 ;unsigned short CRC16(unsigned char *puchMsg, int usDataLen)
                 ; 0000 0067 {
                 _CRC16:
                 ; 0000 0068     int i;
                 ; 0000 0069     unsigned short crc, flag;
                 ; 0000 006A     crc = 0xffff;
0000cf 940e 0423 	CALL __SAVELOCR6
                 ;	*puchMsg -> Y+8
                 ;	usDataLen -> Y+6
                 ;	i -> R16,R17
                 ;	crc -> R18,R19
                 ;	flag -> R20,R21
                +
0000d1 ef2f     +LDI R18 , LOW ( - 1 )
0000d2 ef3f     +LDI R19 , HIGH ( - 1 )
                 	__GETWRN 18,19,-1
                 ; 0000 006B 
                 ; 0000 006C     while(usDataLen--){
                 _0x15:
0000d3 81ee      	LDD  R30,Y+6
0000d4 81ff      	LDD  R31,Y+6+1
0000d5 9731      	SBIW R30,1
0000d6 83ee      	STD  Y+6,R30
0000d7 83ff      	STD  Y+6+1,R31
0000d8 9631      	ADIW R30,1
0000d9 f0f9      	BREQ _0x17
                 ; 0000 006D         crc ^= *puchMsg++;
0000da 85a8      	LDD  R26,Y+8
0000db 85b9      	LDD  R27,Y+8+1
0000dc 91ed      	LD   R30,X+
0000dd 87a8      	STD  Y+8,R26
0000de 87b9      	STD  Y+8+1,R27
0000df e0f0      	LDI  R31,0
                +
0000e0 272e     +EOR R18 , R30
0000e1 273f     +EOR R19 , R31
                 	__EORWRR 18,19,30,31
                 ; 0000 006E 
                 ; 0000 006F         for (i=0; i<8; i++){
                +
0000e2 e000     +LDI R16 , LOW ( 0 )
0000e3 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x19:
                +
0000e4 3008     +CPI R16 , LOW ( 8 )
0000e5 e0e0     +LDI R30 , HIGH ( 8 )
0000e6 071e     +CPC R17 , R30
                 	__CPWRN 16,17,8
0000e7 f484      	BRGE _0x1A
                 ; 0000 0070             flag = crc & 0x0001;
0000e8 01f9      	MOVW R30,R18
0000e9 70e1      	ANDI R30,LOW(0x1)
0000ea 70f0      	ANDI R31,HIGH(0x1)
0000eb 01af      	MOVW R20,R30
                 ; 0000 0071             crc >>= 1;
0000ec 9536      	LSR  R19
0000ed 9527      	ROR  R18
                 ; 0000 0072             if(flag) crc ^= POLYNORMIAL;
0000ee 2e04      	MOV  R0,R20
0000ef 2a05      	OR   R0,R21
0000f0 f021      	BREQ _0x1B
0000f1 e0e1      	LDI  R30,LOW(40961)
0000f2 eaf0      	LDI  R31,HIGH(40961)
                +
0000f3 272e     +EOR R18 , R30
0000f4 273f     +EOR R19 , R31
                 	__EORWRR 18,19,30,31
                 ; 0000 0073         }
                 _0x1B:
                +
0000f5 5f0f     +SUBI R16 , LOW ( - 1 )
0000f6 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0000f7 cfec      	RJMP _0x19
                 _0x1A:
                 ; 0000 0074     }
0000f8 cfda      	RJMP _0x15
                 _0x17:
                 ; 0000 0075     return crc;
0000f9 01f9      	MOVW R30,R18
0000fa 940e 042a 	CALL __LOADLOCR6
0000fc 962a      	ADIW R28,10
0000fd 9508      	RET
                 ; 0000 0076 }
                 ;
                 ;int RTU_WriteOperate0(char device_address,int starting_address,int data)
                 ; 0000 0079 {
                 _RTU_WriteOperate0:
                 ; 0000 007A     char protocol[8];
                 ; 0000 007B     unsigned short crc16;
                 ; 0000 007C     int i=0;
                 ; 0000 007D     //PACKET_BUFF_IDX = 0;
                 ; 0000 007E 
                 ; 0000 007F     protocol[0]=device_address;
0000fe 9728      	SBIW R28,8
0000ff 940e 0425 	CALL __SAVELOCR4
                 ;	device_address -> Y+16
                 ;	starting_address -> Y+14
                 ;	data -> Y+12
                 ;	protocol -> Y+4
                 ;	crc16 -> R16,R17
                 ;	i -> R18,R19
                +
000101 e020     +LDI R18 , LOW ( 0 )
000102 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
000103 89e8      	LDD  R30,Y+16
000104 83ec      	STD  Y+4,R30
                 ; 0000 0080     protocol[1]=0x06;
000105 e0e6      	LDI  R30,LOW(6)
000106 83ed      	STD  Y+5,R30
                 ; 0000 0081     protocol[2]=((starting_address>>8)  & 0x00ff);
000107 85ee      	LDD  R30,Y+14
000108 85ff      	LDD  R31,Y+14+1
000109 940e 040b 	CALL __ASRW8
00010b 83ee      	STD  Y+6,R30
                 ; 0000 0082     protocol[3]=((starting_address)     & 0x00ff);
00010c 85ee      	LDD  R30,Y+14
00010d 83ef      	STD  Y+7,R30
                 ; 0000 0083     protocol[4]=((data>>8)              & 0x00ff);
00010e 85ec      	LDD  R30,Y+12
00010f 85fd      	LDD  R31,Y+12+1
000110 940e 040b 	CALL __ASRW8
000112 87e8      	STD  Y+8,R30
                 ; 0000 0084     protocol[5]=((data)                 & 0x00ff);
000113 85ec      	LDD  R30,Y+12
000114 87e9      	STD  Y+9,R30
                 ; 0000 0085     protocol[6]=0;
000115 e0e0      	LDI  R30,LOW(0)
000116 87ea      	STD  Y+10,R30
                 ; 0000 0086     protocol[7]=0;
000117 87eb      	STD  Y+11,R30
                 ; 0000 0087 
                 ; 0000 0088     crc16 = CRC16(protocol, 6);
000118 01fe      	MOVW R30,R28
000119 9634      	ADIW R30,4
00011a 93fa      	ST   -Y,R31
00011b 93ea      	ST   -Y,R30
00011c e0e6      	LDI  R30,LOW(6)
00011d e0f0      	LDI  R31,HIGH(6)
00011e 93fa      	ST   -Y,R31
00011f 93ea      	ST   -Y,R30
000120 dfae      	RCALL _CRC16
000121 018f      	MOVW R16,R30
                 ; 0000 0089 
                 ; 0000 008A     protocol[6] = (unsigned char)((crc16>>0) & 0x00ff);
000122 01f8      	MOVW R30,R16
000123 87ea      	STD  Y+10,R30
                 ; 0000 008B     protocol[7] = (unsigned char)((crc16>>8) & 0x00ff);
                +
000124 871b     +STD Y + 11 , R17
                 	__PUTBSR 17,11
                 ; 0000 008C 
                 ; 0000 008D 
                 ; 0000 008E     for(i=0;i<8;i++)
                +
000125 e020     +LDI R18 , LOW ( 0 )
000126 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x1D:
                +
000127 3028     +CPI R18 , LOW ( 8 )
000128 e0e0     +LDI R30 , HIGH ( 8 )
000129 073e     +CPC R19 , R30
                 	__CPWRN 18,19,8
00012a f454      	BRGE _0x1E
                 ; 0000 008F     {
                 ; 0000 0090         putch_USART0(*(protocol+i));
00012b 01de      	MOVW R26,R28
00012c 9614      	ADIW R26,4
00012d 0fa2      	ADD  R26,R18
00012e 1fb3      	ADC  R27,R19
00012f 91ec      	LD   R30,X
000130 93ea      	ST   -Y,R30
000131 df97      	RCALL _putch_USART0
                 ; 0000 0091     }
                +
000132 5f2f     +SUBI R18 , LOW ( - 1 )
000133 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000134 cff2      	RJMP _0x1D
                 _0x1E:
                 ; 0000 0092 }
000135 940e 042c 	CALL __LOADLOCR4
000137 9661      	ADIW R28,17
000138 9508      	RET
                 ;
                 ;int RTU_WriteOperate1(char device_address,int starting_address,int data)
                 ; 0000 0095 {
                 ; 0000 0096     char protocol[8];
                 ; 0000 0097     unsigned short crc16;
                 ; 0000 0098     int i=0;
                 ; 0000 0099    // PACKET_BUFF_IDX = 0;
                 ; 0000 009A 
                 ; 0000 009B     protocol[0]=device_address;
                 ;	device_address -> Y+16
                 ;	starting_address -> Y+14
                 ;	data -> Y+12
                 ;	protocol -> Y+4
                 ;	crc16 -> R16,R17
                 ;	i -> R18,R19
                 ; 0000 009C     protocol[1]=0x06;
                 ; 0000 009D     protocol[2]=((starting_address>>8)  & 0x00ff);
                 ; 0000 009E     protocol[3]=((starting_address)     & 0x00ff);
                 ; 0000 009F     protocol[4]=((data>>8)              & 0x00ff);
                 ; 0000 00A0     protocol[5]=((data)                 & 0x00ff);
                 ; 0000 00A1     protocol[6]=0;
                 ; 0000 00A2     protocol[7]=0;
                 ; 0000 00A3 
                 ; 0000 00A4     crc16 = CRC16(protocol, 6);
                 ; 0000 00A5 
                 ; 0000 00A6     protocol[6] = (unsigned char)((crc16>>0) & 0x00ff);
                 ; 0000 00A7     protocol[7] = (unsigned char)((crc16>>8) & 0x00ff);
                 ; 0000 00A8 
                 ; 0000 00A9 
                 ; 0000 00AA     for(i=0;i<8;i++)
                 ; 0000 00AB     {
                 ; 0000 00AC         putch_USART1(*(protocol+i));
                 ; 0000 00AD     }
                 ; 0000 00AE }
                 ;
                 ;int RTU_ReedOperate0(char device_address,int starting_address,int data)
                 ; 0000 00B1 {
                 ; 0000 00B2     char protocol[8];
                 ; 0000 00B3     unsigned short crc16;
                 ; 0000 00B4     int i=0;
                 ; 0000 00B5     //PACKET_BUFF_IDX = 0;
                 ; 0000 00B6 
                 ; 0000 00B7     protocol[0]=device_address;
                 ;	device_address -> Y+16
                 ;	starting_address -> Y+14
                 ;	data -> Y+12
                 ;	protocol -> Y+4
                 ;	crc16 -> R16,R17
                 ;	i -> R18,R19
                 ; 0000 00B8     protocol[1]=0x03;
                 ; 0000 00B9     protocol[2]=((starting_address>>8)  & 0x00ff);
                 ; 0000 00BA     protocol[3]=((starting_address)     & 0x00ff);
                 ; 0000 00BB     protocol[4]=((data>>8)              & 0x00ff);
                 ; 0000 00BC     protocol[5]=((data)                 & 0x00ff);
                 ; 0000 00BD     protocol[6]=0;
                 ; 0000 00BE     protocol[7]=0;
                 ; 0000 00BF 
                 ; 0000 00C0     crc16 = CRC16(protocol, 6);
                 ; 0000 00C1 
                 ; 0000 00C2     protocol[6] = (unsigned char)((crc16>>0) & 0x00ff);
                 ; 0000 00C3     protocol[7] = (unsigned char)((crc16>>8) & 0x00ff);
                 ; 0000 00C4 
                 ; 0000 00C5 
                 ; 0000 00C6     for(i=0;i<8;i++)
                 ; 0000 00C7     {
                 ; 0000 00C8         putch_USART0(*(protocol+i));
                 ; 0000 00C9     }
                 ; 0000 00CA }
                 ;
                 ;interrupt [USART0_RXC] void usart0_rxc(void)
                 ; 0000 00CD {
                 _usart0_rxc:
000139 940e 03ae 	CALL SUBOPT_0x0
                 ; 0000 00CE     unsigned char i = 0;
                 ; 0000 00CF 
                 ; 0000 00D0     i = UDR0;
                 ;	i -> R17
00013b b11c      	IN   R17,12
                 ; 0000 00D1     if(i == '<'){
00013c 331c      	CPI  R17,60
00013d f411      	BRNE _0x25
                 ; 0000 00D2         PACKET_BUFF_IDX = 0;
00013e 2444      	CLR  R4
                 ; 0000 00D3         PACKET_BUFF[PACKET_BUFF_IDX] = i;
00013f c007      	RJMP _0x41
                 ; 0000 00D4         PACKET_BUFF_IDX++;
                 ; 0000 00D5     }
                 ; 0000 00D6     else if(i == '>'){
                 _0x25:
000140 331e      	CPI  R17,62
000141 f429      	BRNE _0x27
                 ; 0000 00D7         PACKET_BUFF[PACKET_BUFF_IDX] = i;
000142 2de4      	MOV  R30,R4
000143 940e 03b5 	CALL SUBOPT_0x1
                 ; 0000 00D8         PACKET_BUFF_IDX+=2;
000145 9443      	INC  R4
000146 c003      	RJMP _0x42
                 ; 0000 00D9     }
                 ; 0000 00DA     else{
                 _0x27:
                 ; 0000 00DB         PACKET_BUFF[PACKET_BUFF_IDX] = i;
                 _0x41:
000147 2de4      	MOV  R30,R4
000148 940e 03b5 	CALL SUBOPT_0x1
                 ; 0000 00DC         PACKET_BUFF_IDX++;
                 _0x42:
00014a 9443      	INC  R4
                 ; 0000 00DD     }
                 ; 0000 00DE }
00014b c013      	RJMP _0x46
                 ;
                 ;// interrupt [USART0_RXC] void usart0_rxc(void)
                 ;// {
                 ;//     if(((TCNT2 < CHARACTER3_5) && (TIMER2_OVERFLOW == 0)) || PACKET_BUFF_IDX == 0)
                 ;//     {
                 ;//         PACKET_BUFF[PACKET_BUFF_IDX] = UDR0;
                 ;//         PACKET_BUFF_IDX++;
                 ;//         TCNT2 = 0;
                 ;//         TIMER2_OVERFLOW = 0;
                 ;//         //PORTB.1 = ~PORTB.1;
                 ;//     }
                 ;//     else {
                 ;//         PACKET_BUFF_IDX = 0;
                 ;//         PACKET_BUFF[PACKET_BUFF_IDX] = UDR0;
                 ;//         PACKET_BUFF_IDX++;
                 ;//         TCNT2 = 0;
                 ;//         //PORTB.1 = ~PORTB.1;
                 ;//         TIMER2_OVERFLOW = 0;
                 ;
                 ;//     }
                 ;// }
                 ;
                 ;interrupt [USART1_RXC] void usart1_rxc(void)
                 ; 0000 00F6 {
                 _usart1_rxc:
00014c 940e 03ae 	CALL SUBOPT_0x0
                 ; 0000 00F7     unsigned char i = 0;
                 ; 0000 00F8 
                 ; 0000 00F9     i = UDR1;
                 ;	i -> R17
00014e 9110 009c 	LDS  R17,156
                 ; 0000 00FA     if(i == '<'){
000150 331c      	CPI  R17,60
000151 f411      	BRNE _0x29
                 ; 0000 00FB         VELOCITY_BUFF_IDX = 0;
000152 2466      	CLR  R6
                 ; 0000 00FC         VELOCITY_BUFF[VELOCITY_BUFF_IDX] = i;
000153 c007      	RJMP _0x43
                 ; 0000 00FD         VELOCITY_BUFF_IDX++;
                 ; 0000 00FE     }
                 ; 0000 00FF     else if(i == '>'){
                 _0x29:
000154 331e      	CPI  R17,62
000155 f429      	BRNE _0x2B
                 ; 0000 0100         VELOCITY_BUFF[VELOCITY_BUFF_IDX] = i;
000156 2de6      	MOV  R30,R6
000157 940e 03ba 	CALL SUBOPT_0x2
                 ; 0000 0101         VELOCITY_BUFF_IDX+=2;
000159 9463      	INC  R6
00015a c003      	RJMP _0x44
                 ; 0000 0102     }
                 ; 0000 0103     else{
                 _0x2B:
                 ; 0000 0104         VELOCITY_BUFF[VELOCITY_BUFF_IDX] = i;
                 _0x43:
00015b 2de6      	MOV  R30,R6
00015c 940e 03ba 	CALL SUBOPT_0x2
                 ; 0000 0105         VELOCITY_BUFF_IDX++;
                 _0x44:
00015e 9463      	INC  R6
                 ; 0000 0106     }
                 ; 0000 0107 }
                 _0x46:
00015f 9119      	LD   R17,Y+
000160 91e9      	LD   R30,Y+
000161 bfef      	OUT  SREG,R30
000162 91f9      	LD   R31,Y+
000163 91e9      	LD   R30,Y+
000164 9518      	RETI
                 ;
                 ;// interrupt [USART1_RXC] void usart1_rxc(void)
                 ;// {
                 ;//     if(((TCNT0 < CHARACTER3_5) && (TIMER2_OVERFLOW == 0)) || VELOCITY_BUFF_IDX == 0)
                 ;//     {
                 ;//         VELOCITY_BUFF[VELOCITY_BUFF_IDX] = UDR1;
                 ;//         TCNT0 = 0;
                 ;//         //PORTB.1 = ~PORTB.1;
                 ;//     }
                 ;//     else {
                 ;//         VELOCITY_BUFF_IDX = 0;
                 ;//         VELOCITY_BUFF[VELOCITY_BUFF_IDX] = UDR0;
                 ;//         VELOCITY_BUFF_IDX++;
                 ;//         TCNT0 = 0;
                 ;//         //PORTB.1 = ~PORTB.1;
                 ;//     }
                 ;// }
                 ;
                 ;interrupt [TIM2_COMP] void timer2_comp(void)
                 ; 0000 011B {
                 _timer2_comp:
000165 93ea      	ST   -Y,R30
000166 b7ef      	IN   R30,SREG
                 ; 0000 011C     TIMER2_OVERFLOW++;
000167 9453      	INC  R5
                 ; 0000 011D }
000168 c003      	RJMP _0x45
                 ;
                 ;interrupt [TIM0_COMP] void timer0_comp(void)
                 ; 0000 0120 {
                 _timer0_comp:
000169 93ea      	ST   -Y,R30
00016a b7ef      	IN   R30,SREG
                 ; 0000 0121     TIMER0_OVERFLOW++;
00016b 9473      	INC  R7
                 ; 0000 0122 }
                 _0x45:
00016c bfef      	OUT  SREG,R30
00016d 91e9      	LD   R30,Y+
00016e 9518      	RETI
                 ;
                 ;void main(void)
                 ; 0000 0125 {
                 _main:
                 ; 0000 0126     int velocity_R = 0;
                 ; 0000 0127     int velocity_L = 0;
                 ; 0000 0128     unsigned char BUFF[20] = {0,};
                 ; 0000 0129 
                 ; 0000 012A     usart1_init(bps_115200);
00016f 9764      	SBIW R28,20
000170 e184      	LDI  R24,20
000171 e0a0      	LDI  R26,LOW(0)
000172 e0b0      	LDI  R27,HIGH(0)
000173 e9ee      	LDI  R30,LOW(_0x2D*2)
000174 e0f0      	LDI  R31,HIGH(_0x2D*2)
000175 940e 0431 	CALL __INITLOCB
                 ;	velocity_R -> R16,R17
                 ;	velocity_L -> R18,R19
                 ;	BUFF -> Y+0
                +
000177 e000     +LDI R16 , LOW ( 0 )
000178 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
000179 e020     +LDI R18 , LOW ( 0 )
00017a e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
00017b e0e7      	LDI  R30,LOW(7)
00017c e0f0      	LDI  R31,HIGH(7)
00017d 93fa      	ST   -Y,R31
00017e 93ea      	ST   -Y,R30
00017f df16      	RCALL _usart1_init
                 ; 0000 012B     usart0_init(bps_115200);
000180 e0e7      	LDI  R30,LOW(7)
000181 e0f0      	LDI  R31,HIGH(7)
000182 93fa      	ST   -Y,R31
000183 93ea      	ST   -Y,R30
000184 df29      	RCALL _usart0_init
                 ; 0000 012C     timer2_init();
000185 df3e      	RCALL _timer2_init
                 ; 0000 012D     SREG |= 0x80;
000186 9478      	BSET 7
                 ; 0000 012E 
                 ; 0000 012F     //DDRB.1 = 1;
                 ; 0000 0130 
                 ; 0000 0131     delay_ms(5000);
000187 e8e8      	LDI  R30,LOW(5000)
000188 e1f3      	LDI  R31,HIGH(5000)
000189 940e 03bf 	CALL SUBOPT_0x3
                 ; 0000 0132     while(1)
                 _0x2E:
                 ; 0000 0133     {
                 ; 0000 0134         //sscanf(VELOCITY_BUFF,"%d,%d", &velocity_R, &velocity_L);
                 ; 0000 0135 
                 ; 0000 0136         sscanf(VELOCITY_BUFF,"<%d,%d>", &velocity_R, &velocity_L);
00018b e6e4      	LDI  R30,LOW(_VELOCITY_BUFF)
00018c e0f5      	LDI  R31,HIGH(_VELOCITY_BUFF)
00018d 93fa      	ST   -Y,R31
00018e 93ea      	ST   -Y,R30
                +
00018f ebe6     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
000190 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
000191 93fa      	ST   -Y,R31
000192 93ea      	ST   -Y,R30
000193 b7ed      	IN   R30,SPL
000194 b7fe      	IN   R31,SPH
000195 9731      	SBIW R30,1
000196 940e 041c 	CALL __PUTPARD1L
000198 931f      	PUSH R17
000199 930f      	PUSH R16
00019a b7ed      	IN   R30,SPL
00019b b7fe      	IN   R31,SPH
00019c 9731      	SBIW R30,1
00019d 940e 041c 	CALL __PUTPARD1L
00019f 933f      	PUSH R19
0001a0 932f      	PUSH R18
0001a1 e088      	LDI  R24,8
0001a2 940e 0361 	CALL _sscanf
0001a4 962c      	ADIW R28,12
0001a5 912f      	POP  R18
0001a6 913f      	POP  R19
0001a7 910f      	POP  R16
0001a8 911f      	POP  R17
                 ; 0000 0137 
                 ; 0000 0138         if(velocity_R != 0 && velocity_L != 0)
0001a9 2400      	CLR  R0
0001aa 1600      	CP   R0,R16
0001ab 0601      	CPC  R0,R17
0001ac f021      	BREQ _0x32
0001ad 2400      	CLR  R0
0001ae 1602      	CP   R0,R18
0001af 0603      	CPC  R0,R19
0001b0 f409      	BRNE _0x33
                 _0x32:
0001b1 c030      	RJMP _0x31
                 _0x33:
                 ; 0000 0139         {
                 ; 0000 013A             if(velocity_R >0 && velocity_L>0)
0001b2 2400      	CLR  R0
0001b3 1600      	CP   R0,R16
0001b4 0601      	CPC  R0,R17
0001b5 f424      	BRGE _0x35
0001b6 2400      	CLR  R0
0001b7 1602      	CP   R0,R18
0001b8 0603      	CPC  R0,R19
0001b9 f00c      	BRLT _0x36
                 _0x35:
0001ba c004      	RJMP _0x34
                 _0x36:
                 ; 0000 013B             {
                 ; 0000 013C                 velocity_R = velocity_R + 300;
                +
0001bb 5d04     +SUBI R16 , LOW ( - 300 )
0001bc 4f1e     +SBCI R17 , HIGH ( - 300 )
                 	__ADDWRN 16,17,300
                 ; 0000 013D                 velocity_L = velocity_L + 300;
                +
0001bd 5d24     +SUBI R18 , LOW ( - 300 )
0001be 4f3e     +SBCI R19 , HIGH ( - 300 )
                 	__ADDWRN 18,19,300
                 ; 0000 013E             }
                 ; 0000 013F 
                 ; 0000 0140             if(velocity_R <0 && velocity_L>0)
                 _0x34:
0001bf 2311      	TST  R17
0001c0 f422      	BRPL _0x38
0001c1 2400      	CLR  R0
0001c2 1602      	CP   R0,R18
0001c3 0603      	CPC  R0,R19
0001c4 f00c      	BRLT _0x39
                 _0x38:
0001c5 c008      	RJMP _0x37
                 _0x39:
                 ; 0000 0141             {
                 ; 0000 0142                 velocity_R = velocity_R - 300;
                +
0001c6 520c     +SUBI R16 , LOW ( 300 )
0001c7 4011     +SBCI R17 , HIGH ( 300 )
                 	__SUBWRN 16,17,300
                 ; 0000 0143                 velocity_L = -velocity_L + 300;
0001c8 01f9      	MOVW R30,R18
0001c9 940e 0407 	CALL __ANEGW1
0001cb 5de4      	SUBI R30,LOW(-300)
0001cc 4ffe      	SBCI R31,HIGH(-300)
0001cd 019f      	MOVW R18,R30
                 ; 0000 0144             }
                 ; 0000 0145 
                 ; 0000 0146             if(velocity_R <0 && velocity_L<0)
                 _0x37:
0001ce 2311      	TST  R17
0001cf f412      	BRPL _0x3B
0001d0 2333      	TST  R19
0001d1 f00a      	BRMI _0x3C
                 _0x3B:
0001d2 c004      	RJMP _0x3A
                 _0x3C:
                 ; 0000 0147             {
                 ; 0000 0148                 velocity_R = velocity_R - 300;
                +
0001d3 520c     +SUBI R16 , LOW ( 300 )
0001d4 4011     +SBCI R17 , HIGH ( 300 )
                 	__SUBWRN 16,17,300
                 ; 0000 0149                 velocity_L = velocity_L - 300;
                +
0001d5 522c     +SUBI R18 , LOW ( 300 )
0001d6 4031     +SBCI R19 , HIGH ( 300 )
                 	__SUBWRN 18,19,300
                 ; 0000 014A             }
                 ; 0000 014B 
                 ; 0000 014C             if(velocity_R >0 && velocity_L<0)
                 _0x3A:
0001d7 2400      	CLR  R0
0001d8 1600      	CP   R0,R16
0001d9 0601      	CPC  R0,R17
0001da f414      	BRGE _0x3E
0001db 2333      	TST  R19
0001dc f00a      	BRMI _0x3F
                 _0x3E:
0001dd c004      	RJMP _0x3D
                 _0x3F:
                 ; 0000 014D             {
                 ; 0000 014E                 velocity_R = velocity_R + 300;
                +
0001de 5d04     +SUBI R16 , LOW ( - 300 )
0001df 4f1e     +SBCI R17 , HIGH ( - 300 )
                 	__ADDWRN 16,17,300
                 ; 0000 014F                 velocity_L = velocity_L - 300;
                +
0001e0 522c     +SUBI R18 , LOW ( 300 )
0001e1 4031     +SBCI R19 , HIGH ( 300 )
                 	__SUBWRN 18,19,300
                 ; 0000 0150             }
                 ; 0000 0151 
                 ; 0000 0152         }
                 _0x3D:
                 ; 0000 0153         // sprintf(BUFF,"<%d,%d>", velocity_R, velocity_L);
                 ; 0000 0154 
                 ; 0000 0155         // puts_USART1(BUFF,VELOCITY_BUFF_IDX);
                 ; 0000 0156         // delay_ms(200);
                 ; 0000 0157         RTU_WriteOperate0(R,(unsigned int)121,(int)(velocity_R));
                 _0x31:
0001e2 e0e1      	LDI  R30,LOW(1)
0001e3 93ea      	ST   -Y,R30
0001e4 e7e9      	LDI  R30,LOW(121)
0001e5 e0f0      	LDI  R31,HIGH(121)
0001e6 93fa      	ST   -Y,R31
0001e7 93ea      	ST   -Y,R30
0001e8 931a      	ST   -Y,R17
0001e9 930a      	ST   -Y,R16
0001ea 940e 03c3 	CALL SUBOPT_0x4
                 ; 0000 0158         delay_ms(5);
                 ; 0000 0159 
                 ; 0000 015A         RTU_WriteOperate0(L,(unsigned int)121,(int)-(velocity_L));
0001ec e0e2      	LDI  R30,LOW(2)
0001ed 93ea      	ST   -Y,R30
0001ee e7e9      	LDI  R30,LOW(121)
0001ef e0f0      	LDI  R31,HIGH(121)
0001f0 93fa      	ST   -Y,R31
0001f1 93ea      	ST   -Y,R30
0001f2 01f9      	MOVW R30,R18
0001f3 940e 0407 	CALL __ANEGW1
0001f5 940e 03c8 	CALL SUBOPT_0x5
                 ; 0000 015B         delay_ms(5);
                 ; 0000 015C 
                 ; 0000 015D         RTU_WriteOperate0(R,(unsigned int)120,(int)(1));
0001f7 e0e1      	LDI  R30,LOW(1)
0001f8 940e 03cb 	CALL SUBOPT_0x6
                 ; 0000 015E         delay_ms(5);
                 ; 0000 015F 
                 ; 0000 0160         RTU_WriteOperate0(L,(unsigned int)120,(int)(1));
0001fa e0e2      	LDI  R30,LOW(2)
0001fb 940e 03cb 	CALL SUBOPT_0x6
                 ; 0000 0161         delay_ms(5);
                 ; 0000 0162 
                 ; 0000 0163 ///////////////////////////멈추는거 일단제외////////////////////////
                 ; 0000 0164         // else
                 ; 0000 0165         // {
                 ; 0000 0166         //     RTU_WriteOperate0(R,(unsigned int)120,(int)(2));
                 ; 0000 0167         //     delay_ms(50);
                 ; 0000 0168 
                 ; 0000 0169         //     RTU_WriteOperate0(L,(unsigned int)120,(int)(2));
                 ; 0000 016A         //     delay_ms(50);
                 ; 0000 016B         // }
                 ; 0000 016C     }
0001fd cf8d      	RJMP _0x2E
                 ; 0000 016D }
                 _0x40:
0001fe cfff      	RJMP _0x40
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _get_buff_G100:
0001ff 931a      	ST   -Y,R17
000200 81a9      	LDD  R26,Y+1
000201 81ba      	LDD  R27,Y+1+1
000202 e0e0      	LDI  R30,LOW(0)
000203 93ec      	ST   X,R30
000204 81ab      	LDD  R26,Y+3
000205 81bc      	LDD  R27,Y+3+1
000206 91ec      	LD   R30,X
000207 2f1e      	MOV  R17,R30
000208 30e0      	CPI  R30,0
000209 f019      	BREQ _0x200007A
00020a e0e0      	LDI  R30,LOW(0)
00020b 93ec      	ST   X,R30
00020c c019      	RJMP _0x200007B
                 _0x200007A:
00020d 81a9      	LDD  R26,Y+1
00020e 81ba      	LDD  R27,Y+1+1
00020f 9611      	ADIW R26,1
000210 940e 0418 	CALL __GETW1P
000212 9730      	SBIW R30,0
000213 f089      	BREQ _0x200007C
000214 81e9      	LDD  R30,Y+1
000215 81fa      	LDD  R31,Y+1+1
000216 81a1      	LDD  R26,Z+1
000217 81b2      	LDD  R27,Z+2
000218 91ec      	LD   R30,X
000219 2f1e      	MOV  R17,R30
00021a 30e0      	CPI  R30,0
00021b f041      	BREQ _0x200007D
00021c 81a9      	LDD  R26,Y+1
00021d 81ba      	LDD  R27,Y+1+1
00021e 9611      	ADIW R26,1
00021f 91ed      	LD   R30,X+
000220 91fd      	LD   R31,X+
000221 9631      	ADIW R30,1
000222 93fe      	ST   -X,R31
000223 93ee      	ST   -X,R30
                 _0x200007D:
000224 c001      	RJMP _0x200007E
                 _0x200007C:
000225 e010      	LDI  R17,LOW(0)
                 _0x200007E:
                 _0x200007B:
000226 2fe1      	MOV  R30,R17
000227 8118      	LDD  R17,Y+0
000228 9625      	ADIW R28,5
000229 9508      	RET
                 __scanf_G100:
00022a 9725      	SBIW R28,5
00022b 940e 0423 	CALL __SAVELOCR6
00022d e0e0      	LDI  R30,LOW(0)
00022e e0f0      	LDI  R31,HIGH(0)
00022f 87e8      	STD  Y+8,R30
000230 87f9      	STD  Y+8+1,R31
000231 2f4e      	MOV  R20,R30
                 _0x200007F:
000232 89e9      	LDD  R30,Y+17
000233 89fa      	LDD  R31,Y+17+1
000234 9631      	ADIW R30,1
000235 8be9      	STD  Y+17,R30
000236 8bfa      	STD  Y+17+1,R31
000237 9731      	SBIW R30,1
000238 91e4      	LPM  R30,Z
000239 2f3e      	MOV  R19,R30
00023a 30e0      	CPI  R30,0
00023b f411      	BRNE PC+3
00023c 940c 035b 	JMP _0x2000081
00023e 940e 03d3 	CALL SUBOPT_0x7
000240 f0c1      	BREQ _0x2000082
                 _0x2000083:
000241 b7ed      	IN   R30,SPL
000242 b7fe      	IN   R31,SPH
000243 93fa      	ST   -Y,R31
000244 93ea      	ST   -Y,R30
000245 934f      	PUSH R20
000246 940e 03d8 	CALL SUBOPT_0x8
000248 914f      	POP  R20
000249 2f3e      	MOV  R19,R30
00024a 30e0      	CPI  R30,0
00024b f019      	BREQ _0x2000086
00024c 940e 03d3 	CALL SUBOPT_0x7
00024e f409      	BRNE _0x2000087
                 _0x2000086:
00024f c007      	RJMP _0x2000085
                 _0x2000087:
000250 940e 03e0 	CALL SUBOPT_0x9
000252 f41c      	BRGE _0x2000088
000253 efef      	LDI  R30,LOW(65535)
000254 efff      	LDI  R31,HIGH(65535)
000255 c107      	RJMP _0x2060002
                 _0x2000088:
000256 cfea      	RJMP _0x2000083
                 _0x2000085:
000257 2f43      	MOV  R20,R19
000258 c101      	RJMP _0x2000089
                 _0x2000082:
000259 3235      	CPI  R19,37
00025a f011      	BREQ PC+3
00025b 940c 0342 	JMP _0x200008A
00025d e050      	LDI  R21,LOW(0)
                 _0x200008B:
00025e 89e9      	LDD  R30,Y+17
00025f 89fa      	LDD  R31,Y+17+1
000260 9135      	LPM  R19,Z+
000261 8be9      	STD  Y+17,R30
000262 8bfa      	STD  Y+17+1,R31
000263 3330      	CPI  R19,48
000264 f010      	BRLO _0x200008F
000265 333a      	CPI  R19,58
000266 f008      	BRLO _0x200008E
                 _0x200008F:
000267 c007      	RJMP _0x200008D
                 _0x200008E:
000268 e0aa      	LDI  R26,LOW(10)
000269 9f5a      	MUL  R21,R26
00026a 2d50      	MOV  R21,R0
00026b 2fe3      	MOV  R30,R19
00026c 53e0      	SUBI R30,LOW(48)
00026d 0f5e      	ADD  R21,R30
00026e cfef      	RJMP _0x200008B
                 _0x200008D:
00026f 3030      	CPI  R19,0
000270 f409      	BRNE _0x2000091
000271 c0e9      	RJMP _0x2000081
                 _0x2000091:
                 _0x2000092:
000272 b7ed      	IN   R30,SPL
000273 b7fe      	IN   R31,SPH
000274 93fa      	ST   -Y,R31
000275 93ea      	ST   -Y,R30
000276 934f      	PUSH R20
000277 940e 03d8 	CALL SUBOPT_0x8
000279 914f      	POP  R20
00027a 2f2e      	MOV  R18,R30
00027b 93ea      	ST   -Y,R30
00027c 940e 0396 	CALL _isspace
00027e 30e0      	CPI  R30,0
00027f f039      	BREQ _0x2000094
000280 940e 03e0 	CALL SUBOPT_0x9
000282 f41c      	BRGE _0x2000095
000283 efef      	LDI  R30,LOW(65535)
000284 efff      	LDI  R31,HIGH(65535)
000285 c0d7      	RJMP _0x2060002
                 _0x2000095:
000286 cfeb      	RJMP _0x2000092
                 _0x2000094:
000287 3020      	CPI  R18,0
000288 f409      	BRNE _0x2000096
000289 c0c8      	RJMP _0x2000097
                 _0x2000096:
00028a 2f42      	MOV  R20,R18
00028b 3050      	CPI  R21,0
00028c f409      	BRNE _0x2000098
00028d ef5f      	LDI  R21,LOW(255)
                 _0x2000098:
00028e 2fe3      	MOV  R30,R19
00028f 36e3      	CPI  R30,LOW(0x63)
000290 f499      	BRNE _0x200009C
000291 940e 03e5 	CALL SUBOPT_0xA
000293 b7ed      	IN   R30,SPL
000294 b7fe      	IN   R31,SPH
000295 93fa      	ST   -Y,R31
000296 93ea      	ST   -Y,R30
000297 934f      	PUSH R20
000298 940e 03d8 	CALL SUBOPT_0x8
00029a 914f      	POP  R20
00029b 01d8      	MOVW R26,R16
00029c 93ec      	ST   X,R30
00029d 940e 03e0 	CALL SUBOPT_0x9
00029f f41c      	BRGE _0x200009D
0002a0 efef      	LDI  R30,LOW(65535)
0002a1 efff      	LDI  R31,HIGH(65535)
0002a2 c0ba      	RJMP _0x2060002
                 _0x200009D:
0002a3 c098      	RJMP _0x200009B
                 _0x200009C:
0002a4 37e3      	CPI  R30,LOW(0x73)
0002a5 f541      	BRNE _0x20000A6
0002a6 940e 03e5 	CALL SUBOPT_0xA
                 _0x200009F:
0002a8 2fe5      	MOV  R30,R21
0002a9 5051      	SUBI R21,1
0002aa 30e0      	CPI  R30,0
0002ab f0f1      	BREQ _0x20000A1
0002ac b7ed      	IN   R30,SPL
0002ad b7fe      	IN   R31,SPH
0002ae 93fa      	ST   -Y,R31
0002af 93ea      	ST   -Y,R30
0002b0 934f      	PUSH R20
0002b1 940e 03d8 	CALL SUBOPT_0x8
0002b3 914f      	POP  R20
0002b4 2f3e      	MOV  R19,R30
0002b5 30e0      	CPI  R30,0
0002b6 f019      	BREQ _0x20000A3
0002b7 940e 03d3 	CALL SUBOPT_0x7
0002b9 f039      	BREQ _0x20000A2
                 _0x20000A3:
0002ba 940e 03e0 	CALL SUBOPT_0x9
0002bc f41c      	BRGE _0x20000A5
0002bd efef      	LDI  R30,LOW(65535)
0002be efff      	LDI  R31,HIGH(65535)
0002bf c09d      	RJMP _0x2060002
                 _0x20000A5:
0002c0 c009      	RJMP _0x20000A1
                 _0x20000A2:
0002c1 931f      	PUSH R17
0002c2 930f      	PUSH R16
                +
0002c3 5f0f     +SUBI R16 , LOW ( - 1 )
0002c4 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0002c5 2fe3      	MOV  R30,R19
0002c6 91af      	POP  R26
0002c7 91bf      	POP  R27
0002c8 93ec      	ST   X,R30
0002c9 cfde      	RJMP _0x200009F
                 _0x20000A1:
0002ca 01d8      	MOVW R26,R16
0002cb e0e0      	LDI  R30,LOW(0)
0002cc 93ec      	ST   X,R30
0002cd c06e      	RJMP _0x200009B
                 _0x20000A6:
0002ce e0e1      	LDI  R30,LOW(1)
0002cf 87ea      	STD  Y+10,R30
0002d0 2fe3      	MOV  R30,R19
0002d1 36e4      	CPI  R30,LOW(0x64)
0002d2 f011      	BREQ _0x20000AB
0002d3 36e9      	CPI  R30,LOW(0x69)
0002d4 f419      	BRNE _0x20000AC
                 _0x20000AB:
0002d5 e0e0      	LDI  R30,LOW(0)
0002d6 87ea      	STD  Y+10,R30
0002d7 c002      	RJMP _0x20000AD
                 _0x20000AC:
0002d8 37e5      	CPI  R30,LOW(0x75)
0002d9 f411      	BRNE _0x20000AE
                 _0x20000AD:
0002da e02a      	LDI  R18,LOW(10)
0002db c008      	RJMP _0x20000A9
                 _0x20000AE:
0002dc 37e8      	CPI  R30,LOW(0x78)
0002dd f411      	BRNE _0x20000AF
0002de e120      	LDI  R18,LOW(16)
0002df c004      	RJMP _0x20000A9
                 _0x20000AF:
0002e0 32e5      	CPI  R30,LOW(0x25)
0002e1 f409      	BRNE _0x20000B2
0002e2 c05f      	RJMP _0x20000B1
                 _0x20000B2:
0002e3 c077      	RJMP _0x2060003
                 _0x20000A9:
0002e4 e0e0      	LDI  R30,LOW(0)
0002e5 83ee      	STD  Y+6,R30
0002e6 83ef      	STD  Y+6+1,R30
                 _0x20000B3:
0002e7 2fe5      	MOV  R30,R21
0002e8 5051      	SUBI R21,1
0002e9 30e0      	CPI  R30,0
0002ea f411      	BRNE PC+3
0002eb 940c 032f 	JMP _0x20000B5
0002ed b7ed      	IN   R30,SPL
0002ee b7fe      	IN   R31,SPH
0002ef 93fa      	ST   -Y,R31
0002f0 93ea      	ST   -Y,R30
0002f1 934f      	PUSH R20
0002f2 940e 03d8 	CALL SUBOPT_0x8
0002f4 914f      	POP  R20
0002f5 2f3e      	MOV  R19,R30
0002f6 32e1      	CPI  R30,LOW(0x21)
0002f7 f438      	BRSH _0x20000B6
0002f8 940e 03e0 	CALL SUBOPT_0x9
0002fa f41c      	BRGE _0x20000B7
0002fb efef      	LDI  R30,LOW(65535)
0002fc efff      	LDI  R31,HIGH(65535)
0002fd c05f      	RJMP _0x2060002
                 _0x20000B7:
0002fe c017      	RJMP _0x20000B8
                 _0x20000B6:
0002ff 85ea      	LDD  R30,Y+10
000300 30e0      	CPI  R30,0
000301 f439      	BRNE _0x20000B9
000302 323d      	CPI  R19,45
000303 f419      	BRNE _0x20000BA
000304 efef      	LDI  R30,LOW(255)
000305 87ea      	STD  Y+10,R30
000306 cfe0      	RJMP _0x20000B3
                 _0x20000BA:
000307 e0e1      	LDI  R30,LOW(1)
000308 87ea      	STD  Y+10,R30
                 _0x20000B9:
000309 3120      	CPI  R18,16
00030a f431      	BRNE _0x20000BC
00030b 933a      	ST   -Y,R19
00030c 940e 03a0 	CALL _isxdigit
00030e 30e0      	CPI  R30,0
00030f f031      	BREQ _0x20000B8
000310 c007      	RJMP _0x20000BE
                 _0x20000BC:
000311 933a      	ST   -Y,R19
000312 940e 038e 	CALL _isdigit
000314 30e0      	CPI  R30,0
000315 f411      	BRNE _0x20000BF
                 _0x20000B8:
000316 2f43      	MOV  R20,R19
000317 c017      	RJMP _0x20000B5
                 _0x20000BF:
                 _0x20000BE:
000318 3631      	CPI  R19,97
000319 f010      	BRLO _0x20000C0
00031a 5537      	SUBI R19,LOW(87)
00031b c005      	RJMP _0x20000C1
                 _0x20000C0:
00031c 3431      	CPI  R19,65
00031d f010      	BRLO _0x20000C2
00031e 5337      	SUBI R19,LOW(55)
00031f c001      	RJMP _0x20000C3
                 _0x20000C2:
000320 5330      	SUBI R19,LOW(48)
                 _0x20000C3:
                 _0x20000C1:
000321 2fe2      	MOV  R30,R18
000322 81ae      	LDD  R26,Y+6
000323 81bf      	LDD  R27,Y+6+1
000324 e0f0      	LDI  R31,0
000325 940e 0410 	CALL __MULW12U
000327 01df      	MOVW R26,R30
000328 2fe3      	MOV  R30,R19
000329 e0f0      	LDI  R31,0
00032a 0fea      	ADD  R30,R26
00032b 1ffb      	ADC  R31,R27
00032c 83ee      	STD  Y+6,R30
00032d 83ff      	STD  Y+6+1,R31
00032e cfb8      	RJMP _0x20000B3
                 _0x20000B5:
00032f 940e 03e5 	CALL SUBOPT_0xA
000331 85ea      	LDD  R30,Y+10
000332 81ae      	LDD  R26,Y+6
000333 81bf      	LDD  R27,Y+6+1
000334 e0f0      	LDI  R31,0
000335 fde7      	SBRC R30,7
000336 efff      	SER  R31
000337 940e 0410 	CALL __MULW12U
000339 01d8      	MOVW R26,R16
00033a 93ed      	ST   X+,R30
00033b 93fc      	ST   X,R31
                 _0x200009B:
00033c 85e8      	LDD  R30,Y+8
00033d 85f9      	LDD  R31,Y+8+1
00033e 9631      	ADIW R30,1
00033f 87e8      	STD  Y+8,R30
000340 87f9      	STD  Y+8+1,R31
000341 c018      	RJMP _0x20000C4
                 _0x200008A:
                 _0x20000B1:
000342 b7ed      	IN   R30,SPL
000343 b7fe      	IN   R31,SPH
000344 93fa      	ST   -Y,R31
000345 93ea      	ST   -Y,R30
000346 934f      	PUSH R20
000347 940e 03d8 	CALL SUBOPT_0x8
000349 914f      	POP  R20
00034a 17e3      	CP   R30,R19
00034b f071      	BREQ _0x20000C5
00034c 940e 03e0 	CALL SUBOPT_0x9
00034e f41c      	BRGE _0x20000C6
00034f efef      	LDI  R30,LOW(65535)
000350 efff      	LDI  R31,HIGH(65535)
000351 c00b      	RJMP _0x2060002
                 _0x20000C6:
                 _0x2000097:
000352 85e8      	LDD  R30,Y+8
000353 85f9      	LDD  R31,Y+8+1
000354 9730      	SBIW R30,0
000355 f419      	BRNE _0x20000C7
000356 efef      	LDI  R30,LOW(65535)
000357 efff      	LDI  R31,HIGH(65535)
000358 c004      	RJMP _0x2060002
                 _0x20000C7:
000359 c001      	RJMP _0x2000081
                 _0x20000C5:
                 _0x20000C4:
                 _0x2000089:
00035a ced7      	RJMP _0x200007F
                 _0x2000081:
                 _0x2060003:
00035b 85e8      	LDD  R30,Y+8
00035c 85f9      	LDD  R31,Y+8+1
                 _0x2060002:
00035d 940e 042a 	CALL __LOADLOCR6
00035f 9663      	ADIW R28,19
000360 9508      	RET
                 _sscanf:
000361 92ff      	PUSH R15
000362 2ef8      	MOV  R15,R24
000363 9723      	SBIW R28,3
000364 931a      	ST   -Y,R17
000365 930a      	ST   -Y,R16
000366 940e 03f0 	CALL SUBOPT_0xB
000368 9730      	SBIW R30,0
000369 f419      	BRNE _0x20000C8
00036a efef      	LDI  R30,LOW(65535)
00036b efff      	LDI  R31,HIGH(65535)
00036c c01c      	RJMP _0x2060001
                 _0x20000C8:
00036d 01de      	MOVW R26,R28
00036e 9611      	ADIW R26,1
00036f 940e 0403 	CALL __ADDW2R15
000371 018d      	MOVW R16,R26
000372 940e 03f0 	CALL SUBOPT_0xB
000374 83eb      	STD  Y+3,R30
000375 83fc      	STD  Y+3+1,R31
000376 01de      	MOVW R26,R28
000377 9615      	ADIW R26,5
000378 940e 0403 	CALL __ADDW2R15
00037a 940e 0418 	CALL __GETW1P
00037c 93fa      	ST   -Y,R31
00037d 93ea      	ST   -Y,R30
00037e 931a      	ST   -Y,R17
00037f 930a      	ST   -Y,R16
000380 efef      	LDI  R30,LOW(_get_buff_G100)
000381 e0f1      	LDI  R31,HIGH(_get_buff_G100)
000382 93fa      	ST   -Y,R31
000383 93ea      	ST   -Y,R30
000384 01fe      	MOVW R30,R28
000385 9638      	ADIW R30,8
000386 93fa      	ST   -Y,R31
000387 93ea      	ST   -Y,R30
000388 dea1      	RCALL __scanf_G100
                 _0x2060001:
000389 8119      	LDD  R17,Y+1
00038a 8108      	LDD  R16,Y+0
00038b 9625      	ADIW R28,5
00038c 90ff      	POP  R15
00038d 9508      	RET
                 
                 	.CSEG
                 _isdigit:
00038e e0e1          ldi  r30,1
00038f 91f9          ld   r31,y+
000390 33f0          cpi  r31,'0'
000391 f010          brlo isdigit0
000392 33fa          cpi  r31,'9'+1
000393 f008          brlo isdigit1
                 isdigit0:
000394 27ee          clr  r30
                 isdigit1:
000395 9508          ret
                 _isspace:
000396 e0e1          ldi  r30,1
000397 91f9          ld   r31,y+
000398 32f0          cpi  r31,' '
000399 f029          breq isspace1
00039a 30f9          cpi  r31,9
00039b f010          brlo isspace0
00039c 30fe          cpi  r31,13+1
00039d f008          brlo isspace1
                 isspace0:
00039e 27ee          clr  r30
                 isspace1:
00039f 9508          ret
                 _isxdigit:
0003a0 e0e1          ldi  r30,1
0003a1 91f9          ld   r31,y+
0003a2 53f0          subi r31,0x30
0003a3 f040          brcs isxdigit0
0003a4 30fa          cpi  r31,10
0003a5 f038          brcs isxdigit1
0003a6 75ff          andi r31,0x5f
0003a7 50f7          subi r31,7
0003a8 30fa          cpi  r31,10
0003a9 f010          brcs isxdigit0
0003aa 31f0          cpi  r31,16
0003ab f008          brcs isxdigit1
                 isxdigit0:
0003ac 27ee          clr  r30
                 isxdigit1:
0003ad 9508          ret
                 
                 	.CSEG
                 
                 	.DSEG
                 _PACKET_BUFF:
000500           	.BYTE 0x64
                 _VELOCITY_BUFF:
000564           	.BYTE 0x14
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0003ae 93ea      	ST   -Y,R30
0003af 93fa      	ST   -Y,R31
0003b0 b7ef      	IN   R30,SREG
0003b1 93ea      	ST   -Y,R30
0003b2 931a      	ST   -Y,R17
0003b3 e010      	LDI  R17,0
0003b4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
0003b5 e0f0      	LDI  R31,0
0003b6 50e0      	SUBI R30,LOW(-_PACKET_BUFF)
0003b7 4ffb      	SBCI R31,HIGH(-_PACKET_BUFF)
0003b8 8310      	ST   Z,R17
0003b9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
0003ba e0f0      	LDI  R31,0
0003bb 59ec      	SUBI R30,LOW(-_VELOCITY_BUFF)
0003bc 4ffa      	SBCI R31,HIGH(-_VELOCITY_BUFF)
0003bd 8310      	ST   Z,R17
0003be 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3:
0003bf 93fa      	ST   -Y,R31
0003c0 93ea      	ST   -Y,R30
0003c1 940c 03f7 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x4:
0003c3 940e 00fe 	CALL _RTU_WriteOperate0
0003c5 e0e5      	LDI  R30,LOW(5)
0003c6 e0f0      	LDI  R31,HIGH(5)
0003c7 cff7      	RJMP SUBOPT_0x3
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
0003c8 93fa      	ST   -Y,R31
0003c9 93ea      	ST   -Y,R30
0003ca cff8      	RJMP SUBOPT_0x4
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x6:
0003cb 93ea      	ST   -Y,R30
0003cc e7e8      	LDI  R30,LOW(120)
0003cd e0f0      	LDI  R31,HIGH(120)
0003ce 93fa      	ST   -Y,R31
0003cf 93ea      	ST   -Y,R30
0003d0 e0e1      	LDI  R30,LOW(1)
0003d1 e0f0      	LDI  R31,HIGH(1)
0003d2 cff5      	RJMP SUBOPT_0x5
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
0003d3 933a      	ST   -Y,R19
0003d4 940e 0396 	CALL _isspace
0003d6 30e0      	CPI  R30,0
0003d7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0x8:
0003d8 85ed      	LDD  R30,Y+13
0003d9 85fe      	LDD  R31,Y+13+1
0003da 93fa      	ST   -Y,R31
0003db 93ea      	ST   -Y,R30
0003dc 89e9      	LDD  R30,Y+17
0003dd 89fa      	LDD  R31,Y+17+1
0003de 9509      	ICALL
0003df 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x9:
0003e0 85ab      	LDD  R26,Y+11
0003e1 85bc      	LDD  R27,Y+11+1
0003e2 91ac      	LD   R26,X
0003e3 30a0      	CPI  R26,0
0003e4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xA:
0003e5 85ef      	LDD  R30,Y+15
0003e6 89f8      	LDD  R31,Y+15+1
0003e7 9734      	SBIW R30,4
0003e8 87ef      	STD  Y+15,R30
0003e9 8bf8      	STD  Y+15+1,R31
0003ea 85af      	LDD  R26,Y+15
0003eb 89b8      	LDD  R27,Y+15+1
0003ec 9614      	ADIW R26,4
0003ed 910d      	LD   R16,X+
0003ee 911c      	LD   R17,X
0003ef 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
0003f0 01de      	MOVW R26,R28
0003f1 9617      	ADIW R26,7
0003f2 940e 0403 	CALL __ADDW2R15
0003f4 940e 0418 	CALL __GETW1P
0003f6 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0003f7 91e9      	ld   r30,y+
0003f8 91f9      	ld   r31,y+
0003f9 9630      	adiw r30,0
0003fa f039      	breq __delay_ms1
                 __delay_ms0:
                +
0003fb e686     +LDI R24 , LOW ( 0xE66 )
0003fc e09e     +LDI R25 , HIGH ( 0xE66 )
                +__DELAY_USW_LOOP :
0003fd 9701     +SBIW R24 , 1
0003fe f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xE66
0003ff 95a8      	wdr
000400 9731      	sbiw r30,1
000401 f7c9      	brne __delay_ms0
                 __delay_ms1:
000402 9508      	ret
                 
                 __ADDW2R15:
000403 2400      	CLR  R0
000404 0daf      	ADD  R26,R15
000405 1db0      	ADC  R27,R0
000406 9508      	RET
                 
                 __ANEGW1:
000407 95f1      	NEG  R31
000408 95e1      	NEG  R30
000409 40f0      	SBCI R31,0
00040a 9508      	RET
                 
                 __ASRW8:
00040b 2fef      	MOV  R30,R31
00040c 27ff      	CLR  R31
00040d fde7      	SBRC R30,7
00040e efff      	SER  R31
00040f 9508      	RET
                 
                 __MULW12U:
000410 9ffa      	MUL  R31,R26
000411 2df0      	MOV  R31,R0
000412 9feb      	MUL  R30,R27
000413 0df0      	ADD  R31,R0
000414 9fea      	MUL  R30,R26
000415 2de0      	MOV  R30,R0
000416 0df1      	ADD  R31,R1
000417 9508      	RET
                 
                 __GETW1P:
000418 91ed      	LD   R30,X+
000419 91fc      	LD   R31,X
00041a 9711      	SBIW R26,1
00041b 9508      	RET
                 
                 __PUTPARD1L:
00041c e060      	LDI  R22,0
00041d e070      	LDI  R23,0
                 __PUTPARD1:
00041e 937a      	ST   -Y,R23
00041f 936a      	ST   -Y,R22
000420 93fa      	ST   -Y,R31
000421 93ea      	ST   -Y,R30
000422 9508      	RET
                 
                 __SAVELOCR6:
000423 935a      	ST   -Y,R21
                 __SAVELOCR5:
000424 934a      	ST   -Y,R20
                 __SAVELOCR4:
000425 933a      	ST   -Y,R19
                 __SAVELOCR3:
000426 932a      	ST   -Y,R18
                 __SAVELOCR2:
000427 931a      	ST   -Y,R17
000428 930a      	ST   -Y,R16
000429 9508      	RET
                 
                 __LOADLOCR6:
00042a 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00042b 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00042c 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00042d 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00042e 8119      	LDD  R17,Y+1
00042f 8108      	LD   R16,Y
000430 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
000431 0fac      	ADD  R26,R28
000432 1fbd      	ADC  R27,R29
                 __INITLOC0:
000433 9005      	LPM  R0,Z+
000434 920d      	ST   X+,R0
000435 958a      	DEC  R24
000436 f7e1      	BRNE __INITLOC0
000437 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :  32 r1 :   2 r2 :   0 r3 :   0 r4 :   5 r5 :   1 r6 :   5 r7 :   1 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  28 r17:  42 r18:  32 r19:  48 r20:  20 r21:  13 r22:   4 r23:   2 
r24:  14 r25:   3 r26:  43 r27:  21 r28:  20 r29:   2 r30: 281 r31: 124 
x  :  24 y  : 180 z  :  14 
Registers used: 26 out of 35 (74.3%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   4 add   :   7 
adiw  :  22 and   :   0 andi  :   5 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   4 break :   0 breq  :  19 
brge  :  10 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   2 brmi  :   2 brne  :  29 brpl  :   2 brsh  :   1 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   1 bst   :   0 call  :  60 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  15 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   7 cpc   :   8 cpi   :  45 cpse  :   0 dec   :   2 des   :   0 
elpm  :   0 eor   :   4 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   1 
ijmp  :   0 in    :  20 inc   :   6 jmp   :  40 ld    :  27 ldd   :  59 
ldi   : 120 lds   :   3 lpm   :  11 lsl   :   0 lsr   :   1 mov   :  30 
movw  :  22 mul   :   4 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 
or    :   1 ori   :   0 out   :  16 pop   :  13 push  :  13 rcall :   6 
ret   :  29 reti  :   2 rjmp  :  59 rol   :   0 ror   :   1 sbc   :   0 
sbci  :  14 sbi   :   0 sbic  :   0 sbis  :   1 sbiw  :  18 sbr   :   0 
sbrc  :   2 sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 
ser   :   2 ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :  88 std   :  34 sts   :  10 sub   :   0 subi  :  21 
swap  :   0 tst   :   4 wdr   :   1 
Instructions used: 56 out of 117 (47.9%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000870   2102     58   2160  131072   1.6%
[.dseg] 0x000100 0x000578      0    120    120    4351   2.8%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 4 warnings
>>>>>>> test
