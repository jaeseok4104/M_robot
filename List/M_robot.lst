
AVRASM ver. 2.1.30  C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm Mon Jan 13 15:20:43 2020

C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1061): warning: Register r5 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1062): warning: Register r4 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1063): warning: Register r7 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1064): warning: Register r6 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1065): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega128
                 ;Program type             : Application
                 ;Clock frequency          : 14.745600 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 1024 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : No
                 ;global 'const' stored in FLASH: Yes
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4351
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _TIMER2_OVERFLOW=R5
                 	.DEF _PACKET_BUFF_IDX=R4
                 	.DEF _TIMER0_OVERFLOW=R7
                 	.DEF _VELOCITY_BUFF_IDX=R6
                 	.DEF _CHECK_GETS=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0090 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 01a4 	JMP  _timer2_comp
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 01a8 	JMP  _timer0_comp
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0166 	JMP  _usart0_rxc
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0186 	JMP  _usart1_rxc
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x2F:
00004f 0000
000050 0000
000051 0000
000052 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000053 0000
000054 0000
000055 0000
000056 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000057 0000
000058 0000
000059 0000
00005a 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00005b 0000
00005c 0000
00005d 0000
00005e 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00005f 0000
000060 0000
000061 0000
000062 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000063 0000
000064 0000
000065 0000
000066 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000067 0000
000068 0000
000069 0000
00006a 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00006b 0000
00006c 0000
00006d 0000
00006e 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00006f 0000
000070 0000
000071 0000
000072 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000073 0000
000074 0000
000075 0000
000076 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000077 0000
000078 0000
000079 0000
00007a 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00007b 0000
00007c 0000
00007d 0000
00007e 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00007f 0000
000080 0000
000081 0000
000082 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000083 0000
000084 0000      	.DB  0x0,0x0,0x0,0x0
                 _0x37:
000085 0000
000086 0000
000087 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0
                 _0x0:
000088 253c
000089 2c64
00008a 6425
00008b 003e      	.DB  0x3C,0x25,0x64,0x2C,0x25,0x64,0x3E,0x0
                 
                 __GLOBAL_INI_TBL:
00008c 0006      	.DW  0x06
00008d 0004      	.DW  0x04
00008e 010a      	.DW  _0x37*2
                 
                 _0xFFFFFFFF:
00008f 0000      	.DW  0
                 
                 __RESET:
000090 94f8      	CLI
000091 27ee      	CLR  R30
000092 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000093 e0f1      	LDI  R31,1
000094 bff5      	OUT  MCUCR,R31
000095 bfe5      	OUT  MCUCR,R30
000096 93e0 006c 	STS  XMCRB,R30
                 
                 ;DISABLE WATCHDOG
000098 e1f8      	LDI  R31,0x18
000099 bdf1      	OUT  WDTCR,R31
00009a bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
00009b e08d      	LDI  R24,(14-2)+1
00009c e0a2      	LDI  R26,2
00009d 27bb      	CLR  R27
                 __CLEAR_REG:
00009e 93ed      	ST   X+,R30
00009f 958a      	DEC  R24
0000a0 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000a1 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000a2 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000a3 e0a0      	LDI  R26,LOW(__SRAM_START)
0000a4 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
0000a5 93ed      	ST   X+,R30
0000a6 9701      	SBIW R24,1
0000a7 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000a8 e1e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000a9 e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000aa 9185      	LPM  R24,Z+
0000ab 9195      	LPM  R25,Z+
0000ac 9700      	SBIW R24,0
0000ad f061      	BREQ __GLOBAL_INI_END
0000ae 91a5      	LPM  R26,Z+
0000af 91b5      	LPM  R27,Z+
0000b0 9005      	LPM  R0,Z+
0000b1 9015      	LPM  R1,Z+
0000b2 01bf      	MOVW R22,R30
0000b3 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000b4 9005      	LPM  R0,Z+
0000b5 920d      	ST   X+,R0
0000b6 9701      	SBIW R24,1
0000b7 f7e1      	BRNE __GLOBAL_INI_LOOP
0000b8 01fb      	MOVW R30,R22
0000b9 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
0000ba bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000bb efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000bc bfed      	OUT  SPL,R30
0000bd e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000be bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000bf e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000c0 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000c1 940c 01ae 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdio.h>
                 ;#include <delay.h>
                 ;
                 ;#define bps_115200 0x0007
                 ;
                 ;#define POLYNORMIAL 0xA001
                 ;
                 ;#define CHARACTER3_5 25
                 ;
                 ;#define R 0x01
                 ;#define L 0x02
                 ;
                 ;unsigned char TIMER2_OVERFLOW = 0;
                 ;unsigned char PACKET_BUFF[100] = {0,};
                 ;unsigned char PACKET_BUFF_IDX = 0;
                 ;
                 ;unsigned char TIMER0_OVERFLOW = 0;
                 ;unsigned char VELOCITY_BUFF[20] = {0,};
                 ;unsigned char VELOCITY_BUFF_IDX = 0;
                 ;unsigned char CHECK_GETS = 0;
                 ;
                 ;void usart1_init(int bps)
                 ; 0000 0018 {
                 
                 	.CSEG
                 _usart1_init:
                 ; 0000 0019     UCSR1A = 0x00;
                 ;	bps -> Y+0
0000c3 e0e0      	LDI  R30,LOW(0)
0000c4 93e0 009b 	STS  155,R30
                 ; 0000 001A     UCSR1B = (1<<RXEN1)|(1<<TXEN1)|(1<<RXCIE1); // RXCIE1 bit is recevie interrupt allow
0000c6 e9e8      	LDI  R30,LOW(152)
0000c7 93e0 009a 	STS  154,R30
                 ; 0000 001B     UCSR1C = (1<<UCSZ11)|(1<<UCSZ10);
0000c9 e0e6      	LDI  R30,LOW(6)
0000ca 93e0 009d 	STS  157,R30
                 ; 0000 001C     UCSR1C &= ~(1<<UMSEL1);
0000cc 91e0 009d 	LDS  R30,157
0000ce 7bef      	ANDI R30,0xBF
0000cf 93e0 009d 	STS  157,R30
                 ; 0000 001D 
                 ; 0000 001E     UBRR1H = (unsigned char)((bps>>8)  & 0x00ff);
0000d1 81e8      	LD   R30,Y
0000d2 81f9      	LDD  R31,Y+1
0000d3 940e 0464 	CALL __ASRW8
0000d5 93e0 0098 	STS  152,R30
                 ; 0000 001F     UBRR1L = (unsigned char)(bps & 0x00ff);
0000d7 81e8      	LD   R30,Y
0000d8 93e0 0099 	STS  153,R30
                 ; 0000 0020 }
0000da c014      	RJMP _0x2060004
                 ;
                 ;void usart0_init(int bps)
                 ; 0000 0023 {
                 _usart0_init:
                 ; 0000 0024     UCSR0A = 0x00;
                 ;	bps -> Y+0
0000db e0e0      	LDI  R30,LOW(0)
0000dc b9eb      	OUT  0xB,R30
                 ; 0000 0025     UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0); // RXCIE1 bit is recevie interrupt allow
0000dd e9e8      	LDI  R30,LOW(152)
0000de b9ea      	OUT  0xA,R30
                 ; 0000 0026     UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
0000df e0e6      	LDI  R30,LOW(6)
0000e0 93e0 0095 	STS  149,R30
                 ; 0000 0027     UCSR0C &= ~(1<<UMSEL0);
0000e2 91e0 0095 	LDS  R30,149
0000e4 7bef      	ANDI R30,0xBF
0000e5 93e0 0095 	STS  149,R30
                 ; 0000 0028 
                 ; 0000 0029     UBRR0H = (unsigned char)((bps>>8)  & 0x00ff);
0000e7 81e8      	LD   R30,Y
0000e8 81f9      	LDD  R31,Y+1
0000e9 940e 0464 	CALL __ASRW8
0000eb 93e0 0090 	STS  144,R30
                 ; 0000 002A     UBRR0L = (unsigned char)(bps & 0x00ff);
0000ed 81e8      	LD   R30,Y
0000ee b9e9      	OUT  0x9,R30
                 ; 0000 002B }
                 _0x2060004:
0000ef 9622      	ADIW R28,2
0000f0 9508      	RET
                 ;
                 ;void timer2_init(void)
                 ; 0000 002E {
                 _timer2_init:
                 ; 0000 002F     //TIMER2
                 ; 0000 0030     TCCR2 = (1<<WGM21)|(1<<CS22)|(1<<CS20);// CTC모드, 1024분주
0000f1 e0ed      	LDI  R30,LOW(13)
0000f2 bde5      	OUT  0x25,R30
                 ; 0000 0031 
                 ; 0000 0032     OCR2 = 40;
0000f3 e2e8      	LDI  R30,LOW(40)
0000f4 bde3      	OUT  0x23,R30
                 ; 0000 0033     //TIMSK = (1<<OCIE2);
                 ; 0000 0034 }
0000f5 9508      	RET
                 ;void timer0_init(void)
                 ; 0000 0036 {
                 ; 0000 0037     TCCR0 = (1<<WGM01)|(1<<CS02)|(1<<CS01)|(1<<CS00); // CTC모드, 1024분주
                 ; 0000 0038     OCR0 = 40;
                 ; 0000 0039     TIMSK = (1<<OCIE2)|(1<<OCIE0);
                 ; 0000 003A }
                 ;
                 ;void putch_USART1(char data)
                 ; 0000 003D {
                 ; 0000 003E     while(!(UCSR1A & (1<<UDRE1))); // UDRE flag is USART Data Register Empty
                 ;	data -> Y+0
                 ; 0000 003F     UDR1 = data;
                 ; 0000 0040 }
                 ;
                 ;//USART 문자열 송신
                 ;void puts_USART1(char *str,char IDX)
                 ; 0000 0044 {
                 ; 0000 0045     unsigned char i = 0;
                 ; 0000 0046 
                 ; 0000 0047     for(i = 0;i<IDX;i++)
                 ;	*str -> Y+2
                 ;	IDX -> Y+1
                 ;	i -> R17
                 ; 0000 0048     {
                 ; 0000 0049         putch_USART1(*(str+i));
                 ; 0000 004A     }
                 ; 0000 004B 
                 ; 0000 004C     for(i = 0; i<IDX; i++)
                 ; 0000 004D     {
                 ; 0000 004E         *(str+i) = 0;
                 ; 0000 004F     }
                 ; 0000 0050 }
                 ;
                 ;void putch_USART0(char data)
                 ; 0000 0053 {
                 _putch_USART0:
                 ; 0000 0054     while(!(UCSR0A & (1<<UDRE0))); // UDRE flag is USART Data Register Empty
                 ;	data -> Y+0
                 _0xC:
0000f6 9b5d      	SBIS 0xB,5
0000f7 cffe      	RJMP _0xC
                 ; 0000 0055     UDR0 = data;
0000f8 81e8      	LD   R30,Y
0000f9 b9ec      	OUT  0xC,R30
                 ; 0000 0056 }
0000fa 9621      	ADIW R28,1
0000fb 9508      	RET
                 ;
                 ;void puts_USART0(char *str,char IDX)
                 ; 0000 0059 {
                 ; 0000 005A     //PACKET_BUFF[PACKET_BUFF_IDX] = 0;
                 ; 0000 005B     unsigned char i = 0;
                 ; 0000 005C     for(i = 0;i<IDX-1;i++)
                 ;	*str -> Y+2
                 ;	IDX -> Y+1
                 ;	i -> R17
                 ; 0000 005D     {
                 ; 0000 005E         putch_USART1(*(str+i));
                 ; 0000 005F     }
                 ; 0000 0060 
                 ; 0000 0061     for(i = 0; i<IDX; i++)
                 ; 0000 0062     {
                 ; 0000 0063         *(str+i) = 0;
                 ; 0000 0064     }
                 ; 0000 0065 }
                 ;
                 ;unsigned short CRC16(unsigned char *puchMsg, int usDataLen)
                 ; 0000 0068 {
                 _CRC16:
                 ; 0000 0069     int i;
                 ; 0000 006A     unsigned short crc, flag;
                 ; 0000 006B     crc = 0xffff;
0000fc 940e 047a 	CALL __SAVELOCR6
                 ;	*puchMsg -> Y+8
                 ;	usDataLen -> Y+6
                 ;	i -> R16,R17
                 ;	crc -> R18,R19
                 ;	flag -> R20,R21
                +
0000fe ef2f     +LDI R18 , LOW ( - 1 )
0000ff ef3f     +LDI R19 , HIGH ( - 1 )
                 	__GETWRN 18,19,-1
                 ; 0000 006C 
                 ; 0000 006D     while(usDataLen--){
                 _0x15:
000100 81ee      	LDD  R30,Y+6
000101 81ff      	LDD  R31,Y+6+1
000102 9731      	SBIW R30,1
000103 83ee      	STD  Y+6,R30
000104 83ff      	STD  Y+6+1,R31
000105 9631      	ADIW R30,1
000106 f0f9      	BREQ _0x17
                 ; 0000 006E         crc ^= *puchMsg++;
000107 85a8      	LDD  R26,Y+8
000108 85b9      	LDD  R27,Y+8+1
000109 91ed      	LD   R30,X+
00010a 87a8      	STD  Y+8,R26
00010b 87b9      	STD  Y+8+1,R27
00010c e0f0      	LDI  R31,0
                +
00010d 272e     +EOR R18 , R30
00010e 273f     +EOR R19 , R31
                 	__EORWRR 18,19,30,31
                 ; 0000 006F 
                 ; 0000 0070         for (i=0; i<8; i++){
                +
00010f e000     +LDI R16 , LOW ( 0 )
000110 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x19:
                +
000111 3008     +CPI R16 , LOW ( 8 )
000112 e0e0     +LDI R30 , HIGH ( 8 )
000113 071e     +CPC R17 , R30
                 	__CPWRN 16,17,8
000114 f484      	BRGE _0x1A
                 ; 0000 0071             flag = crc & 0x0001;
000115 01f9      	MOVW R30,R18
000116 70e1      	ANDI R30,LOW(0x1)
000117 70f0      	ANDI R31,HIGH(0x1)
000118 01af      	MOVW R20,R30
                 ; 0000 0072             crc >>= 1;
000119 9536      	LSR  R19
00011a 9527      	ROR  R18
                 ; 0000 0073             if(flag) crc ^= POLYNORMIAL;
00011b 2e04      	MOV  R0,R20
00011c 2a05      	OR   R0,R21
00011d f021      	BREQ _0x1B
00011e e0e1      	LDI  R30,LOW(40961)
00011f eaf0      	LDI  R31,HIGH(40961)
                +
000120 272e     +EOR R18 , R30
000121 273f     +EOR R19 , R31
                 	__EORWRR 18,19,30,31
                 ; 0000 0074         }
                 _0x1B:
                +
000122 5f0f     +SUBI R16 , LOW ( - 1 )
000123 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000124 cfec      	RJMP _0x19
                 _0x1A:
                 ; 0000 0075     }
000125 cfda      	RJMP _0x15
                 _0x17:
                 ; 0000 0076     return crc;
000126 01f9      	MOVW R30,R18
000127 940e 0481 	CALL __LOADLOCR6
000129 962a      	ADIW R28,10
00012a 9508      	RET
                 ; 0000 0077 }
                 ;
                 ;int RTU_WriteOperate0(char device_address,int starting_address,int data)
                 ; 0000 007A {
                 _RTU_WriteOperate0:
                 ; 0000 007B     char protocol[8];
                 ; 0000 007C     unsigned short crc16;
                 ; 0000 007D     int i=0;
                 ; 0000 007E     //PACKET_BUFF_IDX = 0;
                 ; 0000 007F 
                 ; 0000 0080     protocol[0]=device_address;
00012b 9728      	SBIW R28,8
00012c 940e 047c 	CALL __SAVELOCR4
                 ;	device_address -> Y+16
                 ;	starting_address -> Y+14
                 ;	data -> Y+12
                 ;	protocol -> Y+4
                 ;	crc16 -> R16,R17
                 ;	i -> R18,R19
                +
00012e e020     +LDI R18 , LOW ( 0 )
00012f e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
000130 89e8      	LDD  R30,Y+16
000131 83ec      	STD  Y+4,R30
                 ; 0000 0081     protocol[1]=0x06;
000132 e0e6      	LDI  R30,LOW(6)
000133 83ed      	STD  Y+5,R30
                 ; 0000 0082     protocol[2]=((starting_address>>8)  & 0x00ff);
000134 85ee      	LDD  R30,Y+14
000135 85ff      	LDD  R31,Y+14+1
000136 940e 0464 	CALL __ASRW8
000138 83ee      	STD  Y+6,R30
                 ; 0000 0083     protocol[3]=((starting_address)     & 0x00ff);
000139 85ee      	LDD  R30,Y+14
00013a 83ef      	STD  Y+7,R30
                 ; 0000 0084     protocol[4]=((data>>8)              & 0x00ff);
00013b 85ec      	LDD  R30,Y+12
00013c 85fd      	LDD  R31,Y+12+1
00013d 940e 0464 	CALL __ASRW8
00013f 87e8      	STD  Y+8,R30
                 ; 0000 0085     protocol[5]=((data)                 & 0x00ff);
000140 85ec      	LDD  R30,Y+12
000141 87e9      	STD  Y+9,R30
                 ; 0000 0086     protocol[6]=0;
000142 e0e0      	LDI  R30,LOW(0)
000143 87ea      	STD  Y+10,R30
                 ; 0000 0087     protocol[7]=0;
000144 87eb      	STD  Y+11,R30
                 ; 0000 0088 
                 ; 0000 0089     crc16 = CRC16(protocol, 6);
000145 01fe      	MOVW R30,R28
000146 9634      	ADIW R30,4
000147 93fa      	ST   -Y,R31
000148 93ea      	ST   -Y,R30
000149 e0e6      	LDI  R30,LOW(6)
00014a e0f0      	LDI  R31,HIGH(6)
00014b 93fa      	ST   -Y,R31
00014c 93ea      	ST   -Y,R30
00014d dfae      	RCALL _CRC16
00014e 018f      	MOVW R16,R30
                 ; 0000 008A 
                 ; 0000 008B     protocol[6] = (unsigned char)((crc16>>0) & 0x00ff);
00014f 01f8      	MOVW R30,R16
000150 87ea      	STD  Y+10,R30
                 ; 0000 008C     protocol[7] = (unsigned char)((crc16>>8) & 0x00ff);
                +
000151 871b     +STD Y + 11 , R17
                 	__PUTBSR 17,11
                 ; 0000 008D 
                 ; 0000 008E 
                 ; 0000 008F     for(i=0;i<8;i++)
                +
000152 e020     +LDI R18 , LOW ( 0 )
000153 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x1D:
                +
000154 3028     +CPI R18 , LOW ( 8 )
000155 e0e0     +LDI R30 , HIGH ( 8 )
000156 073e     +CPC R19 , R30
                 	__CPWRN 18,19,8
000157 f454      	BRGE _0x1E
                 ; 0000 0090     {
                 ; 0000 0091         putch_USART0(*(protocol+i));
000158 01de      	MOVW R26,R28
000159 9614      	ADIW R26,4
00015a 0fa2      	ADD  R26,R18
00015b 1fb3      	ADC  R27,R19
00015c 91ec      	LD   R30,X
00015d 93ea      	ST   -Y,R30
00015e df97      	RCALL _putch_USART0
                 ; 0000 0092     }
                +
00015f 5f2f     +SUBI R18 , LOW ( - 1 )
000160 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000161 cff2      	RJMP _0x1D
                 _0x1E:
                 ; 0000 0093 }
000162 940e 0483 	CALL __LOADLOCR4
000164 9661      	ADIW R28,17
000165 9508      	RET
                 ;
                 ;int RTU_WriteOperate1(char device_address,int starting_address,int data)
                 ; 0000 0096 {
                 ; 0000 0097     char protocol[8];
                 ; 0000 0098     unsigned short crc16;
                 ; 0000 0099     int i=0;
                 ; 0000 009A    // PACKET_BUFF_IDX = 0;
                 ; 0000 009B 
                 ; 0000 009C     protocol[0]=device_address;
                 ;	device_address -> Y+16
                 ;	starting_address -> Y+14
                 ;	data -> Y+12
                 ;	protocol -> Y+4
                 ;	crc16 -> R16,R17
                 ;	i -> R18,R19
                 ; 0000 009D     protocol[1]=0x06;
                 ; 0000 009E     protocol[2]=((starting_address>>8)  & 0x00ff);
                 ; 0000 009F     protocol[3]=((starting_address)     & 0x00ff);
                 ; 0000 00A0     protocol[4]=((data>>8)              & 0x00ff);
                 ; 0000 00A1     protocol[5]=((data)                 & 0x00ff);
                 ; 0000 00A2     protocol[6]=0;
                 ; 0000 00A3     protocol[7]=0;
                 ; 0000 00A4 
                 ; 0000 00A5     crc16 = CRC16(protocol, 6);
                 ; 0000 00A6 
                 ; 0000 00A7     protocol[6] = (unsigned char)((crc16>>0) & 0x00ff);
                 ; 0000 00A8     protocol[7] = (unsigned char)((crc16>>8) & 0x00ff);
                 ; 0000 00A9 
                 ; 0000 00AA 
                 ; 0000 00AB     for(i=0;i<8;i++)
                 ; 0000 00AC     {
                 ; 0000 00AD         putch_USART1(*(protocol+i));
                 ; 0000 00AE     }
                 ; 0000 00AF }
                 ;
                 ;int RTU_ReedOperate0(char device_address,int starting_address,int data)
                 ; 0000 00B2 {
                 ; 0000 00B3     char protocol[8];
                 ; 0000 00B4     unsigned short crc16;
                 ; 0000 00B5     int i=0;
                 ; 0000 00B6     //PACKET_BUFF_IDX = 0;
                 ; 0000 00B7 
                 ; 0000 00B8     protocol[0]=device_address;
                 ;	device_address -> Y+16
                 ;	starting_address -> Y+14
                 ;	data -> Y+12
                 ;	protocol -> Y+4
                 ;	crc16 -> R16,R17
                 ;	i -> R18,R19
                 ; 0000 00B9     protocol[1]=0x03;
                 ; 0000 00BA     protocol[2]=((starting_address>>8)  & 0x00ff);
                 ; 0000 00BB     protocol[3]=((starting_address)     & 0x00ff);
                 ; 0000 00BC     protocol[4]=((data>>8)              & 0x00ff);
                 ; 0000 00BD     protocol[5]=((data)                 & 0x00ff);
                 ; 0000 00BE     protocol[6]=0;
                 ; 0000 00BF     protocol[7]=0;
                 ; 0000 00C0 
                 ; 0000 00C1     crc16 = CRC16(protocol, 6);
                 ; 0000 00C2 
                 ; 0000 00C3     protocol[6] = (unsigned char)((crc16>>0) & 0x00ff);
                 ; 0000 00C4     protocol[7] = (unsigned char)((crc16>>8) & 0x00ff);
                 ; 0000 00C5 
                 ; 0000 00C6 
                 ; 0000 00C7     for(i=0;i<8;i++)
                 ; 0000 00C8     {
                 ; 0000 00C9         putch_USART0(*(protocol+i));
                 ; 0000 00CA     }
                 ; 0000 00CB }
                 ;
                 ;// interrupt [USART0_RXC] void usart0_rxc(void)
                 ;// {
                 ;//     unsigned char i = 0;
                 ;
                 ;//     i = UDR0;
                 ;//     if(i == '<'){
                 ;//         PACKET_BUFF_IDX = 0;
                 ;//         PACKET_BUFF[PACKET_BUFF_IDX] = i;
                 ;//         PACKET_BUFF_IDX++;
                 ;//     }
                 ;//     else if(i == '>'){
                 ;//         PACKET_BUFF[PACKET_BUFF_IDX] = i;
                 ;//         PACKET_BUFF_IDX+=2;
                 ;//     }
                 ;//     else{
                 ;//         PACKET_BUFF[PACKET_BUFF_IDX] = i;
                 ;//         PACKET_BUFF_IDX++;
                 ;//     }
                 ;// }
                 ;
                 ;interrupt [USART0_RXC] void usart0_rxc(void)
                 ; 0000 00E2 {
                 _usart0_rxc:
000166 93aa      	ST   -Y,R26
000167 93ba      	ST   -Y,R27
000168 93ea      	ST   -Y,R30
000169 b7ef      	IN   R30,SREG
00016a 93ea      	ST   -Y,R30
                 ; 0000 00E3     if(((TCNT2 < CHARACTER3_5) && (TIMER2_OVERFLOW == 0)) || PACKET_BUFF_IDX == 0)
00016b b5e4      	IN   R30,0x24
00016c 31e9      	CPI  R30,LOW(0x19)
00016d f418      	BRSH _0x26
00016e e0e0      	LDI  R30,LOW(0)
00016f 15e5      	CP   R30,R5
000170 f019      	BREQ _0x28
                 _0x26:
000171 e0e0      	LDI  R30,LOW(0)
000172 15e4      	CP   R30,R4
000173 f409      	BRNE _0x25
                 _0x28:
                 ; 0000 00E4     {
                 ; 0000 00E5         PACKET_BUFF[PACKET_BUFF_IDX] = UDR0;
000174 c001      	RJMP _0x35
                 ; 0000 00E6         PACKET_BUFF_IDX++;
                 ; 0000 00E7         TCNT2 = 0;
                 ; 0000 00E8         TIMER2_OVERFLOW = 0;
                 ; 0000 00E9         //PORTB.1 = ~PORTB.1;
                 ; 0000 00EA     }
                 ; 0000 00EB     else {
                 _0x25:
                 ; 0000 00EC         PACKET_BUFF_IDX = 0;
000175 2444      	CLR  R4
                 ; 0000 00ED         PACKET_BUFF[PACKET_BUFF_IDX] = UDR0;
                 _0x35:
000176 2da4      	MOV  R26,R4
000177 e0b0      	LDI  R27,0
000178 50a0      	SUBI R26,LOW(-_PACKET_BUFF)
000179 4fbb      	SBCI R27,HIGH(-_PACKET_BUFF)
00017a b1ec      	IN   R30,0xC
00017b 93ec      	ST   X,R30
                 ; 0000 00EE         PACKET_BUFF_IDX++;
00017c 9443      	INC  R4
                 ; 0000 00EF         TCNT2 = 0;
00017d e0e0      	LDI  R30,LOW(0)
00017e bde4      	OUT  0x24,R30
                 ; 0000 00F0         //PORTB.1 = ~PORTB.1;
                 ; 0000 00F1         TIMER2_OVERFLOW = 0;
00017f 2455      	CLR  R5
                 ; 0000 00F2     }
                 ; 0000 00F3 }
000180 91e9      	LD   R30,Y+
000181 bfef      	OUT  SREG,R30
000182 91e9      	LD   R30,Y+
000183 91b9      	LD   R27,Y+
000184 91a9      	LD   R26,Y+
000185 9518      	RETI
                 ;
                 ;interrupt [USART1_RXC] void usart1_rxc(void)
                 ; 0000 00F6 {
                 _usart1_rxc:
000186 93ea      	ST   -Y,R30
000187 93fa      	ST   -Y,R31
000188 b7ef      	IN   R30,SREG
000189 93ea      	ST   -Y,R30
                 ; 0000 00F7     unsigned char i = 0;
                 ; 0000 00F8     i = UDR1;
00018a 931a      	ST   -Y,R17
                 ;	i -> R17
00018b e010      	LDI  R17,0
00018c 9110 009c 	LDS  R17,156
                 ; 0000 00F9     if(i == '<'){
00018e 331c      	CPI  R17,60
00018f f431      	BRNE _0x2B
                 ; 0000 00FA         VELOCITY_BUFF_IDX = 0;
000190 2466      	CLR  R6
                 ; 0000 00FB         VELOCITY_BUFF[VELOCITY_BUFF_IDX] = i;
000191 940e 03b2 	CALL SUBOPT_0x0
                 ; 0000 00FC         VELOCITY_BUFF_IDX++;
                 ; 0000 00FD         CHECK_GETS = 1;
000193 e0e1      	LDI  R30,LOW(1)
000194 2e9e      	MOV  R9,R30
                 ; 0000 00FE     }
                 ; 0000 00FF     else if(i == '>'){
000195 c008      	RJMP _0x2C
                 _0x2B:
000196 331e      	CPI  R17,62
000197 f421      	BRNE _0x2D
                 ; 0000 0100         VELOCITY_BUFF[VELOCITY_BUFF_IDX] = i;
000198 940e 03b2 	CALL SUBOPT_0x0
                 ; 0000 0101         VELOCITY_BUFF_IDX++;
                 ; 0000 0102         CHECK_GETS = 0;
00019a 2499      	CLR  R9
                 ; 0000 0103     }
                 ; 0000 0104     else{
00019b c002      	RJMP _0x2E
                 _0x2D:
                 ; 0000 0105         VELOCITY_BUFF[VELOCITY_BUFF_IDX] = i;
00019c 940e 03b2 	CALL SUBOPT_0x0
                 ; 0000 0106         VELOCITY_BUFF_IDX++;
                 ; 0000 0107     }
                 _0x2E:
                 _0x2C:
                 ; 0000 0108 }
00019e 9119      	LD   R17,Y+
00019f 91e9      	LD   R30,Y+
0001a0 bfef      	OUT  SREG,R30
0001a1 91f9      	LD   R31,Y+
0001a2 91e9      	LD   R30,Y+
0001a3 9518      	RETI
                 ;
                 ;// interrupt [USART1_RXC] void usart1_rxc(void)
                 ;// {
                 ;//     if(((TCNT0 < CHARACTER3_5) && (TIMER2_OVERFLOW == 0)) || VELOCITY_BUFF_IDX == 0)
                 ;//     {
                 ;//         VELOCITY_BUFF[VELOCITY_BUFF_IDX] = UDR1;
                 ;//         TCNT0 = 0;
                 ;//         //PORTB.1 = ~PORTB.1;
                 ;//     }
                 ;//     else {
                 ;//         VELOCITY_BUFF_IDX = 0;
                 ;//         VELOCITY_BUFF[VELOCITY_BUFF_IDX] = UDR0;
                 ;//         VELOCITY_BUFF_IDX++;
                 ;//         TCNT0 = 0;
                 ;//         //PORTB.1 = ~PORTB.1;
                 ;//         TIMER2_OVERFLOW = 0;
                 ;
                 ;//     }
                 ;// }
                 ;
                 ;// interrupt [USART1_RXC] void usart1_rxc(void)
                 ;// {
                 ;//     if(((TCNT0 < CHARACTER3_5) && (TIMER2_OVERFLOW == 0)) || VELOCITY_BUFF_IDX == 0)
                 ;//     {
                 ;//         VELOCITY_BUFF[VELOCITY_BUFF_IDX] = UDR1;
                 ;//         TCNT0 = 0;
                 ;//         //PORTB.1 = ~PORTB.1;
                 ;//     }
                 ;//     else {
                 ;//         VELOCITY_BUFF_IDX = 0;
                 ;//         VELOCITY_BUFF[VELOCITY_BUFF_IDX] = UDR0;
                 ;//         VELOCITY_BUFF_IDX++;
                 ;//         TCNT0 = 0;
                 ;//         //PORTB.1 = ~PORTB.1;
                 ;//     }
                 ;// }
                 ;
                 ;interrupt [TIM2_COMP] void timer2_comp(void)
                 ; 0000 012F {
                 _timer2_comp:
0001a4 93ea      	ST   -Y,R30
0001a5 b7ef      	IN   R30,SREG
                 ; 0000 0130     TIMER2_OVERFLOW++;
0001a6 9453      	INC  R5
                 ; 0000 0131 }
0001a7 c003      	RJMP _0x36
                 ;
                 ;interrupt [TIM0_COMP] void timer0_comp(void)
                 ; 0000 0134 {
                 _timer0_comp:
0001a8 93ea      	ST   -Y,R30
0001a9 b7ef      	IN   R30,SREG
                 ; 0000 0135     TIMER0_OVERFLOW++;
0001aa 9473      	INC  R7
                 ; 0000 0136 }
                 _0x36:
0001ab bfef      	OUT  SREG,R30
0001ac 91e9      	LD   R30,Y+
0001ad 9518      	RETI
                 ;
                 ;void main(void)
                 ; 0000 0139 {
                 _main:
                 ; 0000 013A     float velocity_R = 0;
                 ; 0000 013B     float velocity_L = 0 ;
                 ; 0000 013C     unsigned char BUFF[100] = {0,};
                 ; 0000 013D 
                 ; 0000 013E     usart1_init(bps_115200);
0001ae 97ef      	SBIW R28,63
0001af 97ad      	SBIW R28,45
0001b0 e68c      	LDI  R24,108
0001b1 e0a0      	LDI  R26,LOW(0)
0001b2 e0b0      	LDI  R27,HIGH(0)
0001b3 e9ee      	LDI  R30,LOW(_0x2F*2)
0001b4 e0f0      	LDI  R31,HIGH(_0x2F*2)
0001b5 940e 0488 	CALL __INITLOCB
                 ;	velocity_R -> Y+104
                 ;	velocity_L -> Y+100
                 ;	BUFF -> Y+0
0001b7 e0e7      	LDI  R30,LOW(7)
0001b8 e0f0      	LDI  R31,HIGH(7)
0001b9 93fa      	ST   -Y,R31
0001ba 93ea      	ST   -Y,R30
0001bb df07      	RCALL _usart1_init
                 ; 0000 013F     usart0_init(bps_115200);
0001bc e0e7      	LDI  R30,LOW(7)
0001bd e0f0      	LDI  R31,HIGH(7)
0001be 93fa      	ST   -Y,R31
0001bf 93ea      	ST   -Y,R30
0001c0 df1a      	RCALL _usart0_init
                 ; 0000 0140     timer2_init();
0001c1 df2f      	RCALL _timer2_init
                 ; 0000 0141     SREG |= 0x80;
0001c2 9478      	BSET 7
                 ; 0000 0142 
                 ; 0000 0143     //DDRB.1 = 1;
                 ; 0000 0144 
                 ; 0000 0145     delay_ms(5000);
0001c3 e8e8      	LDI  R30,LOW(5000)
0001c4 e1f3      	LDI  R31,HIGH(5000)
0001c5 940e 03b9 	CALL SUBOPT_0x1
                 ; 0000 0146     while(1)
                 _0x30:
                 ; 0000 0147     {
                 ; 0000 0148         if(CHECK_GETS == 0)
0001c7 2099      	TST  R9
0001c8 f5c1      	BRNE _0x33
                 ; 0000 0149         {
                 ; 0000 014A             sscanf(VELOCITY_BUFF,"<%d,%d>", &velocity_R, &velocity_L);
0001c9 e6e4      	LDI  R30,LOW(_VELOCITY_BUFF)
0001ca e0f5      	LDI  R31,HIGH(_VELOCITY_BUFF)
0001cb 93fa      	ST   -Y,R31
0001cc 93ea      	ST   -Y,R30
                +
0001cd e1e0     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0001ce e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0001cf 93fa      	ST   -Y,R31
0001d0 93ea      	ST   -Y,R30
0001d1 940e 03bd 	CALL SUBOPT_0x2
0001d3 940e 03bd 	CALL SUBOPT_0x2
0001d5 e088      	LDI  R24,8
0001d6 940e 0365 	CALL _sscanf
0001d8 962c      	ADIW R28,12
                 ; 0000 014B             //sprintf(BUFF,"<%d,%d>", velocity_R, velocity_L);
                 ; 0000 014C 
                 ; 0000 014D             // puts_USART1(BUFF,VELOCITY_BUFF_IDX);
                 ; 0000 014E             // delay_ms(50);
                 ; 0000 014F 
                 ; 0000 0150             RTU_WriteOperate0(R,(unsigned int)121,(int)(velocity_R));
0001d9 e0e1      	LDI  R30,LOW(1)
0001da 93ea      	ST   -Y,R30
0001db e7e9      	LDI  R30,LOW(121)
0001dc e0f0      	LDI  R31,HIGH(121)
0001dd 93fa      	ST   -Y,R31
0001de 93ea      	ST   -Y,R30
                +
0001df 01fe     +MOVW R30 , R28
0001e0 59e5     +SUBI R30 , LOW ( - 107 )
0001e1 4fff     +SBCI R31 , HIGH ( - 107 )
0001e2 9001     +LD R0 , Z +
0001e3 9011     +LD R1 , Z +
0001e4 9161     +LD R22 , Z +
0001e5 8170     +LD R23 , Z
0001e6 01f0     +MOVW R30 , R0
                 	__GETD1SX 107
0001e7 940e 03c5 	CALL SUBOPT_0x3
                 ; 0000 0151             delay_ms(5);
                 ; 0000 0152 
                 ; 0000 0153             RTU_WriteOperate0(L,(unsigned int)121,(int)-(velocity_L));
0001e9 e0e2      	LDI  R30,LOW(2)
0001ea 93ea      	ST   -Y,R30
0001eb e7e9      	LDI  R30,LOW(121)
0001ec e0f0      	LDI  R31,HIGH(121)
0001ed 93fa      	ST   -Y,R31
0001ee 93ea      	ST   -Y,R30
                +
0001ef 01fe     +MOVW R30 , R28
0001f0 59e9     +SUBI R30 , LOW ( - 103 )
0001f1 4fff     +SBCI R31 , HIGH ( - 103 )
0001f2 9001     +LD R0 , Z +
0001f3 9011     +LD R1 , Z +
0001f4 9161     +LD R22 , Z +
0001f5 8170     +LD R23 , Z
0001f6 01f0     +MOVW R30 , R0
                 	__GETD1SX 103
0001f7 940e 040c 	CALL __ANEGF1
0001f9 940e 03c5 	CALL SUBOPT_0x3
                 ; 0000 0154             delay_ms(5);
                 ; 0000 0155 
                 ; 0000 0156             RTU_WriteOperate0(R,(unsigned int)120,(int)(1));
0001fb e0e1      	LDI  R30,LOW(1)
0001fc 940e 03ce 	CALL SUBOPT_0x4
                 ; 0000 0157             delay_ms(5);
                 ; 0000 0158 
                 ; 0000 0159             RTU_WriteOperate0(L,(unsigned int)120,(int)(1));
0001fe e0e2      	LDI  R30,LOW(2)
0001ff 940e 03ce 	CALL SUBOPT_0x4
                 ; 0000 015A             delay_ms(5);
                 ; 0000 015B         }
                 ; 0000 015C 
                 ; 0000 015D ///////////////////////////멈추는거 일단제외////////////////////////
                 ; 0000 015E         // else
                 ; 0000 015F         // {
                 ; 0000 0160         //     RTU_WriteOperate0(R,(unsigned int)120,(int)(2));
                 ; 0000 0161         //     delay_ms(50);
                 ; 0000 0162 
                 ; 0000 0163         //     RTU_WriteOperate0(L,(unsigned int)120,(int)(2));
                 ; 0000 0164         //     delay_ms(50);
                 ; 0000 0165         // }
                 ; 0000 0166     }
                 _0x33:
000201 cfc5      	RJMP _0x30
                 ; 0000 0167 }
                 _0x34:
000202 cfff      	RJMP _0x34
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _get_buff_G100:
000203 931a      	ST   -Y,R17
000204 81a9      	LDD  R26,Y+1
000205 81ba      	LDD  R27,Y+1+1
000206 e0e0      	LDI  R30,LOW(0)
000207 93ec      	ST   X,R30
000208 81ab      	LDD  R26,Y+3
000209 81bc      	LDD  R27,Y+3+1
00020a 91ec      	LD   R30,X
00020b 2f1e      	MOV  R17,R30
00020c 30e0      	CPI  R30,0
00020d f019      	BREQ _0x200007A
00020e e0e0      	LDI  R30,LOW(0)
00020f 93ec      	ST   X,R30
000210 c019      	RJMP _0x200007B
                 _0x200007A:
000211 81a9      	LDD  R26,Y+1
000212 81ba      	LDD  R27,Y+1+1
000213 9611      	ADIW R26,1
000214 940e 0471 	CALL __GETW1P
000216 9730      	SBIW R30,0
000217 f089      	BREQ _0x200007C
000218 81e9      	LDD  R30,Y+1
000219 81fa      	LDD  R31,Y+1+1
00021a 81a1      	LDD  R26,Z+1
00021b 81b2      	LDD  R27,Z+2
00021c 91ec      	LD   R30,X
00021d 2f1e      	MOV  R17,R30
00021e 30e0      	CPI  R30,0
00021f f041      	BREQ _0x200007D
000220 81a9      	LDD  R26,Y+1
000221 81ba      	LDD  R27,Y+1+1
000222 9611      	ADIW R26,1
000223 91ed      	LD   R30,X+
000224 91fd      	LD   R31,X+
000225 9631      	ADIW R30,1
000226 93fe      	ST   -X,R31
000227 93ee      	ST   -X,R30
                 _0x200007D:
000228 c001      	RJMP _0x200007E
                 _0x200007C:
000229 e010      	LDI  R17,LOW(0)
                 _0x200007E:
                 _0x200007B:
00022a 2fe1      	MOV  R30,R17
00022b 8118      	LDD  R17,Y+0
00022c 9625      	ADIW R28,5
00022d 9508      	RET
                 __scanf_G100:
00022e 9725      	SBIW R28,5
00022f 940e 047a 	CALL __SAVELOCR6
000231 e0e0      	LDI  R30,LOW(0)
000232 e0f0      	LDI  R31,HIGH(0)
000233 87e8      	STD  Y+8,R30
000234 87f9      	STD  Y+8+1,R31
000235 2f4e      	MOV  R20,R30
                 _0x200007F:
000236 89e9      	LDD  R30,Y+17
000237 89fa      	LDD  R31,Y+17+1
000238 9631      	ADIW R30,1
000239 8be9      	STD  Y+17,R30
00023a 8bfa      	STD  Y+17+1,R31
00023b 9731      	SBIW R30,1
00023c 91e4      	LPM  R30,Z
00023d 2f3e      	MOV  R19,R30
00023e 30e0      	CPI  R30,0
00023f f411      	BRNE PC+3
000240 940c 035f 	JMP _0x2000081
000242 940e 03dc 	CALL SUBOPT_0x5
000244 f0c1      	BREQ _0x2000082
                 _0x2000083:
000245 b7ed      	IN   R30,SPL
000246 b7fe      	IN   R31,SPH
000247 93fa      	ST   -Y,R31
000248 93ea      	ST   -Y,R30
000249 934f      	PUSH R20
00024a 940e 03e1 	CALL SUBOPT_0x6
00024c 914f      	POP  R20
00024d 2f3e      	MOV  R19,R30
00024e 30e0      	CPI  R30,0
00024f f019      	BREQ _0x2000086
000250 940e 03dc 	CALL SUBOPT_0x5
000252 f409      	BRNE _0x2000087
                 _0x2000086:
000253 c007      	RJMP _0x2000085
                 _0x2000087:
000254 940e 03e9 	CALL SUBOPT_0x7
000256 f41c      	BRGE _0x2000088
000257 efef      	LDI  R30,LOW(65535)
000258 efff      	LDI  R31,HIGH(65535)
000259 c107      	RJMP _0x2060002
                 _0x2000088:
00025a cfea      	RJMP _0x2000083
                 _0x2000085:
00025b 2f43      	MOV  R20,R19
00025c c101      	RJMP _0x2000089
                 _0x2000082:
00025d 3235      	CPI  R19,37
00025e f011      	BREQ PC+3
00025f 940c 0346 	JMP _0x200008A
000261 e050      	LDI  R21,LOW(0)
                 _0x200008B:
000262 89e9      	LDD  R30,Y+17
000263 89fa      	LDD  R31,Y+17+1
000264 9135      	LPM  R19,Z+
000265 8be9      	STD  Y+17,R30
000266 8bfa      	STD  Y+17+1,R31
000267 3330      	CPI  R19,48
000268 f010      	BRLO _0x200008F
000269 333a      	CPI  R19,58
00026a f008      	BRLO _0x200008E
                 _0x200008F:
00026b c007      	RJMP _0x200008D
                 _0x200008E:
00026c e0aa      	LDI  R26,LOW(10)
00026d 9f5a      	MUL  R21,R26
00026e 2d50      	MOV  R21,R0
00026f 2fe3      	MOV  R30,R19
000270 53e0      	SUBI R30,LOW(48)
000271 0f5e      	ADD  R21,R30
000272 cfef      	RJMP _0x200008B
                 _0x200008D:
000273 3030      	CPI  R19,0
000274 f409      	BRNE _0x2000091
000275 c0e9      	RJMP _0x2000081
                 _0x2000091:
                 _0x2000092:
000276 b7ed      	IN   R30,SPL
000277 b7fe      	IN   R31,SPH
000278 93fa      	ST   -Y,R31
000279 93ea      	ST   -Y,R30
00027a 934f      	PUSH R20
00027b 940e 03e1 	CALL SUBOPT_0x6
00027d 914f      	POP  R20
00027e 2f2e      	MOV  R18,R30
00027f 93ea      	ST   -Y,R30
000280 940e 039a 	CALL _isspace
000282 30e0      	CPI  R30,0
000283 f039      	BREQ _0x2000094
000284 940e 03e9 	CALL SUBOPT_0x7
000286 f41c      	BRGE _0x2000095
000287 efef      	LDI  R30,LOW(65535)
000288 efff      	LDI  R31,HIGH(65535)
000289 c0d7      	RJMP _0x2060002
                 _0x2000095:
00028a cfeb      	RJMP _0x2000092
                 _0x2000094:
00028b 3020      	CPI  R18,0
00028c f409      	BRNE _0x2000096
00028d c0c8      	RJMP _0x2000097
                 _0x2000096:
00028e 2f42      	MOV  R20,R18
00028f 3050      	CPI  R21,0
000290 f409      	BRNE _0x2000098
000291 ef5f      	LDI  R21,LOW(255)
                 _0x2000098:
000292 2fe3      	MOV  R30,R19
000293 36e3      	CPI  R30,LOW(0x63)
000294 f499      	BRNE _0x200009C
000295 940e 03ee 	CALL SUBOPT_0x8
000297 b7ed      	IN   R30,SPL
000298 b7fe      	IN   R31,SPH
000299 93fa      	ST   -Y,R31
00029a 93ea      	ST   -Y,R30
00029b 934f      	PUSH R20
00029c 940e 03e1 	CALL SUBOPT_0x6
00029e 914f      	POP  R20
00029f 01d8      	MOVW R26,R16
0002a0 93ec      	ST   X,R30
0002a1 940e 03e9 	CALL SUBOPT_0x7
0002a3 f41c      	BRGE _0x200009D
0002a4 efef      	LDI  R30,LOW(65535)
0002a5 efff      	LDI  R31,HIGH(65535)
0002a6 c0ba      	RJMP _0x2060002
                 _0x200009D:
0002a7 c098      	RJMP _0x200009B
                 _0x200009C:
0002a8 37e3      	CPI  R30,LOW(0x73)
0002a9 f541      	BRNE _0x20000A6
0002aa 940e 03ee 	CALL SUBOPT_0x8
                 _0x200009F:
0002ac 2fe5      	MOV  R30,R21
0002ad 5051      	SUBI R21,1
0002ae 30e0      	CPI  R30,0
0002af f0f1      	BREQ _0x20000A1
0002b0 b7ed      	IN   R30,SPL
0002b1 b7fe      	IN   R31,SPH
0002b2 93fa      	ST   -Y,R31
0002b3 93ea      	ST   -Y,R30
0002b4 934f      	PUSH R20
0002b5 940e 03e1 	CALL SUBOPT_0x6
0002b7 914f      	POP  R20
0002b8 2f3e      	MOV  R19,R30
0002b9 30e0      	CPI  R30,0
0002ba f019      	BREQ _0x20000A3
0002bb 940e 03dc 	CALL SUBOPT_0x5
0002bd f039      	BREQ _0x20000A2
                 _0x20000A3:
0002be 940e 03e9 	CALL SUBOPT_0x7
0002c0 f41c      	BRGE _0x20000A5
0002c1 efef      	LDI  R30,LOW(65535)
0002c2 efff      	LDI  R31,HIGH(65535)
0002c3 c09d      	RJMP _0x2060002
                 _0x20000A5:
0002c4 c009      	RJMP _0x20000A1
                 _0x20000A2:
0002c5 931f      	PUSH R17
0002c6 930f      	PUSH R16
                +
0002c7 5f0f     +SUBI R16 , LOW ( - 1 )
0002c8 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0002c9 2fe3      	MOV  R30,R19
0002ca 91af      	POP  R26
0002cb 91bf      	POP  R27
0002cc 93ec      	ST   X,R30
0002cd cfde      	RJMP _0x200009F
                 _0x20000A1:
0002ce 01d8      	MOVW R26,R16
0002cf e0e0      	LDI  R30,LOW(0)
0002d0 93ec      	ST   X,R30
0002d1 c06e      	RJMP _0x200009B
                 _0x20000A6:
0002d2 e0e1      	LDI  R30,LOW(1)
0002d3 87ea      	STD  Y+10,R30
0002d4 2fe3      	MOV  R30,R19
0002d5 36e4      	CPI  R30,LOW(0x64)
0002d6 f011      	BREQ _0x20000AB
0002d7 36e9      	CPI  R30,LOW(0x69)
0002d8 f419      	BRNE _0x20000AC
                 _0x20000AB:
0002d9 e0e0      	LDI  R30,LOW(0)
0002da 87ea      	STD  Y+10,R30
0002db c002      	RJMP _0x20000AD
                 _0x20000AC:
0002dc 37e5      	CPI  R30,LOW(0x75)
0002dd f411      	BRNE _0x20000AE
                 _0x20000AD:
0002de e02a      	LDI  R18,LOW(10)
0002df c008      	RJMP _0x20000A9
                 _0x20000AE:
0002e0 37e8      	CPI  R30,LOW(0x78)
0002e1 f411      	BRNE _0x20000AF
0002e2 e120      	LDI  R18,LOW(16)
0002e3 c004      	RJMP _0x20000A9
                 _0x20000AF:
0002e4 32e5      	CPI  R30,LOW(0x25)
0002e5 f409      	BRNE _0x20000B2
0002e6 c05f      	RJMP _0x20000B1
                 _0x20000B2:
0002e7 c077      	RJMP _0x2060003
                 _0x20000A9:
0002e8 e0e0      	LDI  R30,LOW(0)
0002e9 83ee      	STD  Y+6,R30
0002ea 83ef      	STD  Y+6+1,R30
                 _0x20000B3:
0002eb 2fe5      	MOV  R30,R21
0002ec 5051      	SUBI R21,1
0002ed 30e0      	CPI  R30,0
0002ee f411      	BRNE PC+3
0002ef 940c 0333 	JMP _0x20000B5
0002f1 b7ed      	IN   R30,SPL
0002f2 b7fe      	IN   R31,SPH
0002f3 93fa      	ST   -Y,R31
0002f4 93ea      	ST   -Y,R30
0002f5 934f      	PUSH R20
0002f6 940e 03e1 	CALL SUBOPT_0x6
0002f8 914f      	POP  R20
0002f9 2f3e      	MOV  R19,R30
0002fa 32e1      	CPI  R30,LOW(0x21)
0002fb f438      	BRSH _0x20000B6
0002fc 940e 03e9 	CALL SUBOPT_0x7
0002fe f41c      	BRGE _0x20000B7
0002ff efef      	LDI  R30,LOW(65535)
000300 efff      	LDI  R31,HIGH(65535)
000301 c05f      	RJMP _0x2060002
                 _0x20000B7:
000302 c017      	RJMP _0x20000B8
                 _0x20000B6:
000303 85ea      	LDD  R30,Y+10
000304 30e0      	CPI  R30,0
000305 f439      	BRNE _0x20000B9
000306 323d      	CPI  R19,45
000307 f419      	BRNE _0x20000BA
000308 efef      	LDI  R30,LOW(255)
000309 87ea      	STD  Y+10,R30
00030a cfe0      	RJMP _0x20000B3
                 _0x20000BA:
00030b e0e1      	LDI  R30,LOW(1)
00030c 87ea      	STD  Y+10,R30
                 _0x20000B9:
00030d 3120      	CPI  R18,16
00030e f431      	BRNE _0x20000BC
00030f 933a      	ST   -Y,R19
000310 940e 03a4 	CALL _isxdigit
000312 30e0      	CPI  R30,0
000313 f031      	BREQ _0x20000B8
000314 c007      	RJMP _0x20000BE
                 _0x20000BC:
000315 933a      	ST   -Y,R19
000316 940e 0392 	CALL _isdigit
000318 30e0      	CPI  R30,0
000319 f411      	BRNE _0x20000BF
                 _0x20000B8:
00031a 2f43      	MOV  R20,R19
00031b c017      	RJMP _0x20000B5
                 _0x20000BF:
                 _0x20000BE:
00031c 3631      	CPI  R19,97
00031d f010      	BRLO _0x20000C0
00031e 5537      	SUBI R19,LOW(87)
00031f c005      	RJMP _0x20000C1
                 _0x20000C0:
000320 3431      	CPI  R19,65
000321 f010      	BRLO _0x20000C2
000322 5337      	SUBI R19,LOW(55)
000323 c001      	RJMP _0x20000C3
                 _0x20000C2:
000324 5330      	SUBI R19,LOW(48)
                 _0x20000C3:
                 _0x20000C1:
000325 2fe2      	MOV  R30,R18
000326 81ae      	LDD  R26,Y+6
000327 81bf      	LDD  R27,Y+6+1
000328 e0f0      	LDI  R31,0
000329 940e 0469 	CALL __MULW12U
00032b 01df      	MOVW R26,R30
00032c 2fe3      	MOV  R30,R19
00032d e0f0      	LDI  R31,0
00032e 0fea      	ADD  R30,R26
00032f 1ffb      	ADC  R31,R27
000330 83ee      	STD  Y+6,R30
000331 83ff      	STD  Y+6+1,R31
000332 cfb8      	RJMP _0x20000B3
                 _0x20000B5:
000333 940e 03ee 	CALL SUBOPT_0x8
000335 85ea      	LDD  R30,Y+10
000336 81ae      	LDD  R26,Y+6
000337 81bf      	LDD  R27,Y+6+1
000338 e0f0      	LDI  R31,0
000339 fde7      	SBRC R30,7
00033a efff      	SER  R31
00033b 940e 0469 	CALL __MULW12U
00033d 01d8      	MOVW R26,R16
00033e 93ed      	ST   X+,R30
00033f 93fc      	ST   X,R31
                 _0x200009B:
000340 85e8      	LDD  R30,Y+8
000341 85f9      	LDD  R31,Y+8+1
000342 9631      	ADIW R30,1
000343 87e8      	STD  Y+8,R30
000344 87f9      	STD  Y+8+1,R31
000345 c018      	RJMP _0x20000C4
                 _0x200008A:
                 _0x20000B1:
000346 b7ed      	IN   R30,SPL
000347 b7fe      	IN   R31,SPH
000348 93fa      	ST   -Y,R31
000349 93ea      	ST   -Y,R30
00034a 934f      	PUSH R20
00034b 940e 03e1 	CALL SUBOPT_0x6
00034d 914f      	POP  R20
00034e 17e3      	CP   R30,R19
00034f f071      	BREQ _0x20000C5
000350 940e 03e9 	CALL SUBOPT_0x7
000352 f41c      	BRGE _0x20000C6
000353 efef      	LDI  R30,LOW(65535)
000354 efff      	LDI  R31,HIGH(65535)
000355 c00b      	RJMP _0x2060002
                 _0x20000C6:
                 _0x2000097:
000356 85e8      	LDD  R30,Y+8
000357 85f9      	LDD  R31,Y+8+1
000358 9730      	SBIW R30,0
000359 f419      	BRNE _0x20000C7
00035a efef      	LDI  R30,LOW(65535)
00035b efff      	LDI  R31,HIGH(65535)
00035c c004      	RJMP _0x2060002
                 _0x20000C7:
00035d c001      	RJMP _0x2000081
                 _0x20000C5:
                 _0x20000C4:
                 _0x2000089:
00035e ced7      	RJMP _0x200007F
                 _0x2000081:
                 _0x2060003:
00035f 85e8      	LDD  R30,Y+8
000360 85f9      	LDD  R31,Y+8+1
                 _0x2060002:
000361 940e 0481 	CALL __LOADLOCR6
000363 9663      	ADIW R28,19
000364 9508      	RET
                 _sscanf:
000365 92ff      	PUSH R15
000366 2ef8      	MOV  R15,R24
000367 9723      	SBIW R28,3
000368 931a      	ST   -Y,R17
000369 930a      	ST   -Y,R16
00036a 940e 03f9 	CALL SUBOPT_0x9
00036c 9730      	SBIW R30,0
00036d f419      	BRNE _0x20000C8
00036e efef      	LDI  R30,LOW(65535)
00036f efff      	LDI  R31,HIGH(65535)
000370 c01c      	RJMP _0x2060001
                 _0x20000C8:
000371 01de      	MOVW R26,R28
000372 9611      	ADIW R26,1
000373 940e 0458 	CALL __ADDW2R15
000375 018d      	MOVW R16,R26
000376 940e 03f9 	CALL SUBOPT_0x9
000378 83eb      	STD  Y+3,R30
000379 83fc      	STD  Y+3+1,R31
00037a 01de      	MOVW R26,R28
00037b 9615      	ADIW R26,5
00037c 940e 0458 	CALL __ADDW2R15
00037e 940e 0471 	CALL __GETW1P
000380 93fa      	ST   -Y,R31
000381 93ea      	ST   -Y,R30
000382 931a      	ST   -Y,R17
000383 930a      	ST   -Y,R16
000384 e0e3      	LDI  R30,LOW(_get_buff_G100)
000385 e0f2      	LDI  R31,HIGH(_get_buff_G100)
000386 93fa      	ST   -Y,R31
000387 93ea      	ST   -Y,R30
000388 01fe      	MOVW R30,R28
000389 9638      	ADIW R30,8
00038a 93fa      	ST   -Y,R31
00038b 93ea      	ST   -Y,R30
00038c dea1      	RCALL __scanf_G100
                 _0x2060001:
00038d 8119      	LDD  R17,Y+1
00038e 8108      	LDD  R16,Y+0
00038f 9625      	ADIW R28,5
000390 90ff      	POP  R15
000391 9508      	RET
                 
                 	.CSEG
                 _isdigit:
000392 e0e1          ldi  r30,1
000393 91f9          ld   r31,y+
000394 33f0          cpi  r31,'0'
000395 f010          brlo isdigit0
000396 33fa          cpi  r31,'9'+1
000397 f008          brlo isdigit1
                 isdigit0:
000398 27ee          clr  r30
                 isdigit1:
000399 9508          ret
                 _isspace:
00039a e0e1          ldi  r30,1
00039b 91f9          ld   r31,y+
00039c 32f0          cpi  r31,' '
00039d f029          breq isspace1
00039e 30f9          cpi  r31,9
00039f f010          brlo isspace0
0003a0 30fe          cpi  r31,13+1
0003a1 f008          brlo isspace1
                 isspace0:
0003a2 27ee          clr  r30
                 isspace1:
0003a3 9508          ret
                 _isxdigit:
0003a4 e0e1          ldi  r30,1
0003a5 91f9          ld   r31,y+
0003a6 53f0          subi r31,0x30
0003a7 f040          brcs isxdigit0
0003a8 30fa          cpi  r31,10
0003a9 f038          brcs isxdigit1
0003aa 75ff          andi r31,0x5f
0003ab 50f7          subi r31,7
0003ac 30fa          cpi  r31,10
0003ad f010          brcs isxdigit0
0003ae 31f0          cpi  r31,16
0003af f008          brcs isxdigit1
                 isxdigit0:
0003b0 27ee          clr  r30
                 isxdigit1:
0003b1 9508          ret
                 
                 	.CSEG
                 
                 	.DSEG
                 _PACKET_BUFF:
000500           	.BYTE 0x64
                 _VELOCITY_BUFF:
000564           	.BYTE 0x14
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x0:
0003b2 2de6      	MOV  R30,R6
0003b3 e0f0      	LDI  R31,0
0003b4 59ec      	SUBI R30,LOW(-_VELOCITY_BUFF)
0003b5 4ffa      	SBCI R31,HIGH(-_VELOCITY_BUFF)
0003b6 8310      	ST   Z,R17
0003b7 9463      	INC  R6
0003b8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
0003b9 93fa      	ST   -Y,R31
0003ba 93ea      	ST   -Y,R30
0003bb 940c 0400 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2:
0003bd 01fe      	MOVW R30,R28
0003be 59e4      	SUBI R30,LOW(-(108))
0003bf 4fff      	SBCI R31,HIGH(-(108))
0003c0 2766      	CLR  R22
0003c1 2777      	CLR  R23
0003c2 940e 0475 	CALL __PUTPARD1
0003c4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3:
0003c5 940e 041d 	CALL __CFD1
0003c7 93fa      	ST   -Y,R31
0003c8 93ea      	ST   -Y,R30
0003c9 940e 012b 	CALL _RTU_WriteOperate0
0003cb e0e5      	LDI  R30,LOW(5)
0003cc e0f0      	LDI  R31,HIGH(5)
0003cd cfeb      	RJMP SUBOPT_0x1
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x4:
0003ce 93ea      	ST   -Y,R30
0003cf e7e8      	LDI  R30,LOW(120)
0003d0 e0f0      	LDI  R31,HIGH(120)
0003d1 93fa      	ST   -Y,R31
0003d2 93ea      	ST   -Y,R30
0003d3 e0e1      	LDI  R30,LOW(1)
0003d4 e0f0      	LDI  R31,HIGH(1)
0003d5 93fa      	ST   -Y,R31
0003d6 93ea      	ST   -Y,R30
0003d7 940e 012b 	CALL _RTU_WriteOperate0
0003d9 e0e5      	LDI  R30,LOW(5)
0003da e0f0      	LDI  R31,HIGH(5)
0003db cfdd      	RJMP SUBOPT_0x1
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
0003dc 933a      	ST   -Y,R19
0003dd 940e 039a 	CALL _isspace
0003df 30e0      	CPI  R30,0
0003e0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0x6:
0003e1 85ed      	LDD  R30,Y+13
0003e2 85fe      	LDD  R31,Y+13+1
0003e3 93fa      	ST   -Y,R31
0003e4 93ea      	ST   -Y,R30
0003e5 89e9      	LDD  R30,Y+17
0003e6 89fa      	LDD  R31,Y+17+1
0003e7 9509      	ICALL
0003e8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x7:
0003e9 85ab      	LDD  R26,Y+11
0003ea 85bc      	LDD  R27,Y+11+1
0003eb 91ac      	LD   R26,X
0003ec 30a0      	CPI  R26,0
0003ed 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x8:
0003ee 85ef      	LDD  R30,Y+15
0003ef 89f8      	LDD  R31,Y+15+1
0003f0 9734      	SBIW R30,4
0003f1 87ef      	STD  Y+15,R30
0003f2 8bf8      	STD  Y+15+1,R31
0003f3 85af      	LDD  R26,Y+15
0003f4 89b8      	LDD  R27,Y+15+1
0003f5 9614      	ADIW R26,4
0003f6 910d      	LD   R16,X+
0003f7 911c      	LD   R17,X
0003f8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
0003f9 01de      	MOVW R26,R28
0003fa 9617      	ADIW R26,7
0003fb 940e 0458 	CALL __ADDW2R15
0003fd 940e 0471 	CALL __GETW1P
0003ff 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000400 91e9      	ld   r30,y+
000401 91f9      	ld   r31,y+
000402 9630      	adiw r30,0
000403 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000404 e686     +LDI R24 , LOW ( 0xE66 )
000405 e09e     +LDI R25 , HIGH ( 0xE66 )
                +__DELAY_USW_LOOP :
000406 9701     +SBIW R24 , 1
000407 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xE66
000408 95a8      	wdr
000409 9731      	sbiw r30,1
00040a f7c9      	brne __delay_ms0
                 __delay_ms1:
00040b 9508      	ret
                 
                 __ANEGF1:
00040c 9730      	SBIW R30,0
00040d 4060      	SBCI R22,0
00040e 4070      	SBCI R23,0
00040f f009      	BREQ __ANEGF10
000410 5870      	SUBI R23,0x80
                 __ANEGF10:
000411 9508      	RET
                 
                 __UNPACK1:
000412 e850      	LDI  R21,0x80
000413 2e07      	MOV  R0,R23
000414 2205      	AND  R0,R21
000415 0f66      	LSL  R22
000416 1f77      	ROL  R23
000417 2775      	EOR  R23,R21
000418 0f55      	LSL  R21
000419 9567      	ROR  R22
00041a 9508      	RET
                 
                 __CFD1U:
00041b 9468      	SET
00041c c001      	RJMP __CFD1U0
                 __CFD1:
00041d 94e8      	CLT
                 __CFD1U0:
00041e 935f      	PUSH R21
00041f dff2      	RCALL __UNPACK1
000420 3870      	CPI  R23,0x80
000421 f018      	BRLO __CFD10
000422 3f7f      	CPI  R23,0xFF
000423 f408      	BRCC __CFD10
000424 c02d      	RJMP __ZERORES
                 __CFD10:
000425 e156      	LDI  R21,22
000426 1b57      	SUB  R21,R23
000427 f4aa      	BRPL __CFD11
000428 9551      	NEG  R21
000429 3058      	CPI  R21,8
00042a f40e      	BRTC __CFD19
00042b 3059      	CPI  R21,9
                 __CFD19:
00042c f030      	BRLO __CFD17
00042d efef      	SER  R30
00042e efff      	SER  R31
00042f ef6f      	SER  R22
000430 e77f      	LDI  R23,0x7F
000431 f977      	BLD  R23,7
000432 c01a      	RJMP __CFD15
                 __CFD17:
000433 2777      	CLR  R23
000434 2355      	TST  R21
000435 f0b9      	BREQ __CFD15
                 __CFD18:
000436 0fee      	LSL  R30
000437 1fff      	ROL  R31
000438 1f66      	ROL  R22
000439 1f77      	ROL  R23
00043a 955a      	DEC  R21
00043b f7d1      	BRNE __CFD18
00043c c010      	RJMP __CFD15
                 __CFD11:
00043d 2777      	CLR  R23
                 __CFD12:
00043e 3058      	CPI  R21,8
00043f f028      	BRLO __CFD13
000440 2fef      	MOV  R30,R31
000441 2ff6      	MOV  R31,R22
000442 2f67      	MOV  R22,R23
000443 5058      	SUBI R21,8
000444 cff9      	RJMP __CFD12
                 __CFD13:
000445 2355      	TST  R21
000446 f031      	BREQ __CFD15
                 __CFD14:
000447 9576      	LSR  R23
000448 9567      	ROR  R22
000449 95f7      	ROR  R31
00044a 95e7      	ROR  R30
00044b 955a      	DEC  R21
00044c f7d1      	BRNE __CFD14
                 __CFD15:
00044d 2000      	TST  R0
00044e f40a      	BRPL __CFD16
00044f d00c      	RCALL __ANEGD1
                 __CFD16:
000450 915f      	POP  R21
000451 9508      	RET
                 
                 __ZERORES:
000452 27ee      	CLR  R30
000453 27ff      	CLR  R31
000454 2766      	CLR  R22
000455 2777      	CLR  R23
000456 915f      	POP  R21
000457 9508      	RET
                 
                 __ADDW2R15:
000458 2400      	CLR  R0
000459 0daf      	ADD  R26,R15
00045a 1db0      	ADC  R27,R0
00045b 9508      	RET
                 
                 __ANEGD1:
00045c 95f0      	COM  R31
00045d 9560      	COM  R22
00045e 9570      	COM  R23
00045f 95e1      	NEG  R30
000460 4fff      	SBCI R31,-1
000461 4f6f      	SBCI R22,-1
000462 4f7f      	SBCI R23,-1
000463 9508      	RET
                 
                 __ASRW8:
000464 2fef      	MOV  R30,R31
000465 27ff      	CLR  R31
000466 fde7      	SBRC R30,7
000467 efff      	SER  R31
000468 9508      	RET
                 
                 __MULW12U:
000469 9ffa      	MUL  R31,R26
00046a 2df0      	MOV  R31,R0
00046b 9feb      	MUL  R30,R27
00046c 0df0      	ADD  R31,R0
00046d 9fea      	MUL  R30,R26
00046e 2de0      	MOV  R30,R0
00046f 0df1      	ADD  R31,R1
000470 9508      	RET
                 
                 __GETW1P:
000471 91ed      	LD   R30,X+
000472 91fc      	LD   R31,X
000473 9711      	SBIW R26,1
000474 9508      	RET
                 
                 __PUTPARD1:
000475 937a      	ST   -Y,R23
000476 936a      	ST   -Y,R22
000477 93fa      	ST   -Y,R31
000478 93ea      	ST   -Y,R30
000479 9508      	RET
                 
                 __SAVELOCR6:
00047a 935a      	ST   -Y,R21
                 __SAVELOCR5:
00047b 934a      	ST   -Y,R20
                 __SAVELOCR4:
00047c 933a      	ST   -Y,R19
                 __SAVELOCR3:
00047d 932a      	ST   -Y,R18
                 __SAVELOCR2:
00047e 931a      	ST   -Y,R17
00047f 930a      	ST   -Y,R16
000480 9508      	RET
                 
                 __LOADLOCR6:
000481 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000482 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000483 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000484 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000485 8119      	LDD  R17,Y+1
000486 8108      	LD   R16,Y
000487 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
000488 0fac      	ADD  R26,R28
000489 1fbd      	ADC  R27,R29
                 __INITLOC0:
00048a 9005      	LPM  R0,Z+
00048b 920d      	ST   X+,R0
00048c 958a      	DEC  R24
00048d f7e1      	BRNE __INITLOC0
00048e 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :  21 r1 :   4 r2 :   0 r3 :   0 r4 :   4 r5 :   3 r6 :   3 r7 :   1 
r8 :   0 r9 :   3 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  17 r17:  25 r18:  20 r19:  37 r20:  20 r21:  31 r22:  17 r23:  22 
r24:  14 r25:   3 r26:  47 r27:  25 r28:  24 r29:   2 r30: 303 r31: 130 
x  :  25 y  : 188 z  :  21 
Registers used: 27 out of 35 (77.1%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   4 add   :   7 
adiw  :  22 and   :   1 andi  :   5 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   4 break :   0 breq  :  22 
brge  :   8 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  11 
brlt  :   0 brmi  :   0 brne  :  30 brpl  :   2 brsh  :   2 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   1 bst   :   0 call  :  59 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  19 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   3 
cp    :   3 cpc   :   2 cpi   :  49 cpse  :   0 dec   :   4 des   :   0 
elpm  :   0 eor   :   5 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   1 
ijmp  :   0 in    :  18 inc   :   4 jmp   :  40 ld    :  39 ldd   :  59 
ldi   : 123 lds   :   3 lpm   :  11 lsl   :   3 lsr   :   2 mov   :  33 
movw  :  24 mul   :   4 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 
or    :   1 ori   :   0 out   :  18 pop   :  11 push  :  10 rcall :   8 
ret   :  32 reti  :   3 rjmp  :  56 rol   :   4 ror   :   5 sbc   :   0 
sbci  :  13 sbi   :   0 sbic  :   0 sbis  :   1 sbiw  :  18 sbr   :   0 
sbrc  :   2 sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 
ser   :   5 ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :  92 std   :  34 sts   :  10 sub   :   1 subi  :  18 
swap  :   0 tst   :   4 wdr   :   1 
Instructions used: 64 out of 117 (54.7%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00091e   2186    148   2334  131072   1.8%
[.dseg] 0x000100 0x000578      0    120    120    4351   2.8%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 5 warnings
