
AVRASM ver. 2.1.30  C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm Sun Jan 12 22:57:59 2020

C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1061): warning: Register r5 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1062): warning: Register r4 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1063): warning: Register r7 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1064): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega128
                 ;Program type             : Application
                 ;Clock frequency          : 14.745600 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 1024 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : No
                 ;global 'const' stored in FLASH: Yes
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4351
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _TIMER2_OVERFLOW=R5
                 	.DEF _PACKET_BUFF_IDX=R4
                 	.DEF _TIMER0_OVERFLOW=R7
                 	.DEF _VELOCITY_BUFF_IDX=R6
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0063 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 012f 	JMP  _timer2_comp
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0133 	JMP  _timer0_comp
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 00f1 	JMP  _usart0_rxc
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 010d 	JMP  _usart1_rxc
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x2F:
00004f 0000
000050 0000
000051 0000
000052 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000053 0000
000054 0000
000055 0000
000056 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000057 0000
000058 0000      	.DB  0x0,0x0,0x0,0x0
                 _0x3A:
000059 0000
00005a 0000      	.DB  0x0,0x0,0x0,0x0
                 _0x0:
00005b 253c
00005c 2c64
00005d 6425
00005e 003e      	.DB  0x3C,0x25,0x64,0x2C,0x25,0x64,0x3E,0x0
                 
                 __GLOBAL_INI_TBL:
00005f 0004      	.DW  0x04
000060 0004      	.DW  0x04
000061 00b2      	.DW  _0x3A*2
                 
                 _0xFFFFFFFF:
000062 0000      	.DW  0
                 
                 __RESET:
000063 94f8      	CLI
000064 27ee      	CLR  R30
000065 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000066 e0f1      	LDI  R31,1
000067 bff5      	OUT  MCUCR,R31
000068 bfe5      	OUT  MCUCR,R30
000069 93e0 006c 	STS  XMCRB,R30
                 
                 ;DISABLE WATCHDOG
00006b e1f8      	LDI  R31,0x18
00006c bdf1      	OUT  WDTCR,R31
00006d bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
00006e e08d      	LDI  R24,(14-2)+1
00006f e0a2      	LDI  R26,2
000070 27bb      	CLR  R27
                 __CLEAR_REG:
000071 93ed      	ST   X+,R30
000072 958a      	DEC  R24
000073 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000074 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000075 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000076 e0a0      	LDI  R26,LOW(__SRAM_START)
000077 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000078 93ed      	ST   X+,R30
000079 9701      	SBIW R24,1
00007a f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00007b ebee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00007c e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00007d 9185      	LPM  R24,Z+
00007e 9195      	LPM  R25,Z+
00007f 9700      	SBIW R24,0
000080 f061      	BREQ __GLOBAL_INI_END
000081 91a5      	LPM  R26,Z+
000082 91b5      	LPM  R27,Z+
000083 9005      	LPM  R0,Z+
000084 9015      	LPM  R1,Z+
000085 01bf      	MOVW R22,R30
000086 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000087 9005      	LPM  R0,Z+
000088 920d      	ST   X+,R0
000089 9701      	SBIW R24,1
00008a f7e1      	BRNE __GLOBAL_INI_LOOP
00008b 01fb      	MOVW R30,R22
00008c cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
00008d bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00008e efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00008f bfed      	OUT  SPL,R30
000090 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000091 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000092 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000093 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000094 940c 0139 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdio.h>
                 ;#include <delay.h>
                 ;
                 ;#define bps_115200 0x0007
                 ;
                 ;#define POLYNORMIAL 0xA001
                 ;
                 ;#define CHARACTER3_5 25
                 ;
                 ;#define R 0x01
                 ;#define L 0x02
                 ;
                 ;unsigned char TIMER2_OVERFLOW = 0;
                 ;unsigned char PACKET_BUFF[100] = {0,};
                 ;unsigned char PACKET_BUFF_IDX = 0;
                 ;
                 ;unsigned char TIMER0_OVERFLOW = 0;
                 ;unsigned char VELOCITY_BUFF[20] = {0,};
                 ;unsigned char VELOCITY_BUFF_IDX = 0;
                 ;
                 ;void usart1_init(int bps)
                 ; 0000 0017 {
                 
                 	.CSEG
                 _usart1_init:
                 ; 0000 0018     UCSR1A = 0x00;
                 ;	bps -> Y+0
000096 e0e0      	LDI  R30,LOW(0)
000097 93e0 009b 	STS  155,R30
                 ; 0000 0019     UCSR1B = (1<<RXEN1)|(1<<TXEN1)|(1<<RXCIE1); // RXCIE1 bit is recevie interrupt allow
000099 e9e8      	LDI  R30,LOW(152)
00009a 93e0 009a 	STS  154,R30
                 ; 0000 001A     UCSR1C = (1<<UCSZ11)|(1<<UCSZ10);
00009c e0e6      	LDI  R30,LOW(6)
00009d 93e0 009d 	STS  157,R30
                 ; 0000 001B     UCSR1C &= ~(1<<UMSEL1);
00009f 91e0 009d 	LDS  R30,157
0000a1 7bef      	ANDI R30,0xBF
0000a2 93e0 009d 	STS  157,R30
                 ; 0000 001C 
                 ; 0000 001D     UBRR1H = (unsigned char)((bps>>8)  & 0x00ff);
0000a4 81e8      	LD   R30,Y
0000a5 81f9      	LDD  R31,Y+1
0000a6 940e 056f 	CALL __ASRW8
0000a8 93e0 0098 	STS  152,R30
                 ; 0000 001E     UBRR1L = (unsigned char)(bps & 0x00ff);
0000aa 81e8      	LD   R30,Y
0000ab 93e0 0099 	STS  153,R30
                 ; 0000 001F }
0000ad c014      	RJMP _0x2060006
                 ;
                 ;void usart0_init(int bps)
                 ; 0000 0022 {
                 _usart0_init:
                 ; 0000 0023     UCSR0A = 0x00;
                 ;	bps -> Y+0
0000ae e0e0      	LDI  R30,LOW(0)
0000af b9eb      	OUT  0xB,R30
                 ; 0000 0024     UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0); // RXCIE1 bit is recevie interrupt allow
0000b0 e9e8      	LDI  R30,LOW(152)
0000b1 b9ea      	OUT  0xA,R30
                 ; 0000 0025     UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
0000b2 e0e6      	LDI  R30,LOW(6)
0000b3 93e0 0095 	STS  149,R30
                 ; 0000 0026     UCSR0C &= ~(1<<UMSEL0);
0000b5 91e0 0095 	LDS  R30,149
0000b7 7bef      	ANDI R30,0xBF
0000b8 93e0 0095 	STS  149,R30
                 ; 0000 0027 
                 ; 0000 0028     UBRR0H = (unsigned char)((bps>>8)  & 0x00ff);
0000ba 81e8      	LD   R30,Y
0000bb 81f9      	LDD  R31,Y+1
0000bc 940e 056f 	CALL __ASRW8
0000be 93e0 0090 	STS  144,R30
                 ; 0000 0029     UBRR0L = (unsigned char)(bps & 0x00ff);
0000c0 81e8      	LD   R30,Y
0000c1 b9e9      	OUT  0x9,R30
                 ; 0000 002A }
                 _0x2060006:
0000c2 9622      	ADIW R28,2
0000c3 9508      	RET
                 ;
                 ;void timer2_init(void)
                 ; 0000 002D {
                 _timer2_init:
                 ; 0000 002E     //TIMER2
                 ; 0000 002F     TCCR2 = (1<<WGM21)|(1<<CS22)|(1<<CS20);// CTC모드, 1024분주
0000c4 e0ed      	LDI  R30,LOW(13)
0000c5 bde5      	OUT  0x25,R30
                 ; 0000 0030 
                 ; 0000 0031     OCR2 = 40;
0000c6 e2e8      	LDI  R30,LOW(40)
0000c7 bde3      	OUT  0x23,R30
                 ; 0000 0032     //TIMSK = (1<<OCIE2);
                 ; 0000 0033 }
0000c8 9508      	RET
                 ;void timer0_init(void)
                 ; 0000 0035 {
                 ; 0000 0036     TCCR0 = (1<<WGM01)|(1<<CS02)|(1<<CS01)|(1<<CS00); // CTC모드, 1024분주
                 ; 0000 0037     OCR0 = 40;
                 ; 0000 0038     TIMSK = (1<<OCIE2)|(1<<OCIE0);
                 ; 0000 0039 }
                 ;
                 ;void putch_USART1(char data)
                 ; 0000 003C {
                 _putch_USART1:
                 ; 0000 003D     while(!(UCSR1A & (1<<UDRE1))); // UDRE flag is USART Data Register Empty
                 ;	data -> Y+0
                 _0x3:
0000c9 91e0 009b 	LDS  R30,155
0000cb 72e0      	ANDI R30,LOW(0x20)
0000cc f3e1      	BREQ _0x3
                 ; 0000 003E     UDR1 = data;
0000cd 81e8      	LD   R30,Y
0000ce 93e0 009c 	STS  156,R30
                 ; 0000 003F }
0000d0 9621      	ADIW R28,1
0000d1 9508      	RET
                 ;
                 ;//USART 문자열 송신
                 ;void puts_USART1(char *str,char IDX)
                 ; 0000 0043 {
                 _puts_USART1:
                 ; 0000 0044     unsigned char i = 0;
                 ; 0000 0045 
                 ; 0000 0046     for(i = 0;i<IDX-1;i++)
0000d2 931a      	ST   -Y,R17
                 ;	*str -> Y+2
                 ;	IDX -> Y+1
                 ;	i -> R17
0000d3 e010      	LDI  R17,0
0000d4 e010      	LDI  R17,LOW(0)
                 _0x7:
0000d5 81e9      	LDD  R30,Y+1
0000d6 e0f0      	LDI  R31,0
0000d7 9731      	SBIW R30,1
0000d8 2fa1      	MOV  R26,R17
0000d9 e0b0      	LDI  R27,0
0000da 17ae      	CP   R26,R30
0000db 07bf      	CPC  R27,R31
0000dc f43c      	BRGE _0x8
                 ; 0000 0047     {
                 ; 0000 0048         putch_USART1(*(str+i));
0000dd 940e 04f3 	CALL SUBOPT_0x0
0000df 91ec      	LD   R30,X
0000e0 93ea      	ST   -Y,R30
0000e1 dfe7      	RCALL _putch_USART1
                 ; 0000 0049     }
0000e2 5f1f      	SUBI R17,-1
0000e3 cff1      	RJMP _0x7
                 _0x8:
                 ; 0000 004A 
                 ; 0000 004B     for(i = 0; i<IDX; i++)
0000e4 e010      	LDI  R17,LOW(0)
                 _0xA:
0000e5 81e9      	LDD  R30,Y+1
0000e6 171e      	CP   R17,R30
0000e7 f430      	BRSH _0xB
                 ; 0000 004C     {
                 ; 0000 004D         *(str+i) = 0;
0000e8 940e 04f3 	CALL SUBOPT_0x0
0000ea e0e0      	LDI  R30,LOW(0)
0000eb 93ec      	ST   X,R30
                 ; 0000 004E     }
0000ec 5f1f      	SUBI R17,-1
0000ed cff7      	RJMP _0xA
                 _0xB:
                 ; 0000 004F }
0000ee 8118      	LDD  R17,Y+0
0000ef 9624      	ADIW R28,4
0000f0 9508      	RET
                 ;
                 ;void putch_USART0(char data)
                 ; 0000 0052 {
                 ; 0000 0053     while(!(UCSR0A & (1<<UDRE0))); // UDRE flag is USART Data Register Empty
                 ;	data -> Y+0
                 ; 0000 0054     UDR0 = data;
                 ; 0000 0055 }
                 ;
                 ;void puts_USART0(char *str,char IDX)
                 ; 0000 0058 {
                 ; 0000 0059     //PACKET_BUFF[PACKET_BUFF_IDX] = 0;
                 ; 0000 005A     unsigned char i = 0;
                 ; 0000 005B     for(i = 0;i<IDX-1;i++)
                 ;	*str -> Y+2
                 ;	IDX -> Y+1
                 ;	i -> R17
                 ; 0000 005C     {
                 ; 0000 005D         putch_USART1(*(str+i));
                 ; 0000 005E     }
                 ; 0000 005F 
                 ; 0000 0060     for(i = 0; i<IDX; i++)
                 ; 0000 0061     {
                 ; 0000 0062         *(str+i) = 0;
                 ; 0000 0063     }
                 ; 0000 0064 }
                 ;
                 ;unsigned short CRC16(unsigned char *puchMsg, int usDataLen)
                 ; 0000 0067 {
                 ; 0000 0068     int i;
                 ; 0000 0069     unsigned short crc, flag;
                 ; 0000 006A     crc = 0xffff;
                 ;	*puchMsg -> Y+8
                 ;	usDataLen -> Y+6
                 ;	i -> R16,R17
                 ;	crc -> R18,R19
                 ;	flag -> R20,R21
                 ; 0000 006B 
                 ; 0000 006C     while(usDataLen--){
                 ; 0000 006D         crc ^= *puchMsg++;
                 ; 0000 006E 
                 ; 0000 006F         for (i=0; i<8; i++){
                 ; 0000 0070             flag = crc & 0x0001;
                 ; 0000 0071             crc >>= 1;
                 ; 0000 0072             if(flag) crc ^= POLYNORMIAL;
                 ; 0000 0073         }
                 ; 0000 0074     }
                 ; 0000 0075     return crc;
                 ; 0000 0076 }
                 ;
                 ;int RTU_WriteOperate0(char device_address,int starting_address,int data)
                 ; 0000 0079 {
                 ; 0000 007A     char protocol[8];
                 ; 0000 007B     unsigned short crc16;
                 ; 0000 007C     int i=0;
                 ; 0000 007D     //PACKET_BUFF_IDX = 0;
                 ; 0000 007E 
                 ; 0000 007F     protocol[0]=device_address;
                 ;	device_address -> Y+16
                 ;	starting_address -> Y+14
                 ;	data -> Y+12
                 ;	protocol -> Y+4
                 ;	crc16 -> R16,R17
                 ;	i -> R18,R19
                 ; 0000 0080     protocol[1]=0x06;
                 ; 0000 0081     protocol[2]=((starting_address>>8)  & 0x00ff);
                 ; 0000 0082     protocol[3]=((starting_address)     & 0x00ff);
                 ; 0000 0083     protocol[4]=((data>>8)              & 0x00ff);
                 ; 0000 0084     protocol[5]=((data)                 & 0x00ff);
                 ; 0000 0085     protocol[6]=0;
                 ; 0000 0086     protocol[7]=0;
                 ; 0000 0087 
                 ; 0000 0088     crc16 = CRC16(protocol, 6);
                 ; 0000 0089 
                 ; 0000 008A     protocol[6] = (unsigned char)((crc16>>0) & 0x00ff);
                 ; 0000 008B     protocol[7] = (unsigned char)((crc16>>8) & 0x00ff);
                 ; 0000 008C 
                 ; 0000 008D 
                 ; 0000 008E     for(i=0;i<8;i++)
                 ; 0000 008F     {
                 ; 0000 0090         putch_USART0(*(protocol+i));
                 ; 0000 0091     }
                 ; 0000 0092 }
                 ;
                 ;int RTU_WriteOperate1(char device_address,int starting_address,int data)
                 ; 0000 0095 {
                 ; 0000 0096     char protocol[8];
                 ; 0000 0097     unsigned short crc16;
                 ; 0000 0098     int i=0;
                 ; 0000 0099    // PACKET_BUFF_IDX = 0;
                 ; 0000 009A 
                 ; 0000 009B     protocol[0]=device_address;
                 ;	device_address -> Y+16
                 ;	starting_address -> Y+14
                 ;	data -> Y+12
                 ;	protocol -> Y+4
                 ;	crc16 -> R16,R17
                 ;	i -> R18,R19
                 ; 0000 009C     protocol[1]=0x06;
                 ; 0000 009D     protocol[2]=((starting_address>>8)  & 0x00ff);
                 ; 0000 009E     protocol[3]=((starting_address)     & 0x00ff);
                 ; 0000 009F     protocol[4]=((data>>8)              & 0x00ff);
                 ; 0000 00A0     protocol[5]=((data)                 & 0x00ff);
                 ; 0000 00A1     protocol[6]=0;
                 ; 0000 00A2     protocol[7]=0;
                 ; 0000 00A3 
                 ; 0000 00A4     crc16 = CRC16(protocol, 6);
                 ; 0000 00A5 
                 ; 0000 00A6     protocol[6] = (unsigned char)((crc16>>0) & 0x00ff);
                 ; 0000 00A7     protocol[7] = (unsigned char)((crc16>>8) & 0x00ff);
                 ; 0000 00A8 
                 ; 0000 00A9 
                 ; 0000 00AA     for(i=0;i<8;i++)
                 ; 0000 00AB     {
                 ; 0000 00AC         putch_USART1(*(protocol+i));
                 ; 0000 00AD     }
                 ; 0000 00AE }
                 ;
                 ;int RTU_ReedOperate0(char device_address,int starting_address,int data)
                 ; 0000 00B1 {
                 ; 0000 00B2     char protocol[8];
                 ; 0000 00B3     unsigned short crc16;
                 ; 0000 00B4     int i=0;
                 ; 0000 00B5     //PACKET_BUFF_IDX = 0;
                 ; 0000 00B6 
                 ; 0000 00B7     protocol[0]=device_address;
                 ;	device_address -> Y+16
                 ;	starting_address -> Y+14
                 ;	data -> Y+12
                 ;	protocol -> Y+4
                 ;	crc16 -> R16,R17
                 ;	i -> R18,R19
                 ; 0000 00B8     protocol[1]=0x03;
                 ; 0000 00B9     protocol[2]=((starting_address>>8)  & 0x00ff);
                 ; 0000 00BA     protocol[3]=((starting_address)     & 0x00ff);
                 ; 0000 00BB     protocol[4]=((data>>8)              & 0x00ff);
                 ; 0000 00BC     protocol[5]=((data)                 & 0x00ff);
                 ; 0000 00BD     protocol[6]=0;
                 ; 0000 00BE     protocol[7]=0;
                 ; 0000 00BF 
                 ; 0000 00C0     crc16 = CRC16(protocol, 6);
                 ; 0000 00C1 
                 ; 0000 00C2     protocol[6] = (unsigned char)((crc16>>0) & 0x00ff);
                 ; 0000 00C3     protocol[7] = (unsigned char)((crc16>>8) & 0x00ff);
                 ; 0000 00C4 
                 ; 0000 00C5 
                 ; 0000 00C6     for(i=0;i<8;i++)
                 ; 0000 00C7     {
                 ; 0000 00C8         putch_USART0(*(protocol+i));
                 ; 0000 00C9     }
                 ; 0000 00CA }
                 ;
                 ;interrupt [USART0_RXC] void usart0_rxc(void)
                 ; 0000 00CD {
                 _usart0_rxc:
0000f1 93ea      	ST   -Y,R30
0000f2 93fa      	ST   -Y,R31
0000f3 b7ef      	IN   R30,SREG
0000f4 93ea      	ST   -Y,R30
                 ; 0000 00CE     unsigned char i = 0;
                 ; 0000 00CF 
                 ; 0000 00D0     i = UDR0;
0000f5 931a      	ST   -Y,R17
                 ;	i -> R17
0000f6 e010      	LDI  R17,0
0000f7 b11c      	IN   R17,12
                 ; 0000 00D1     if(i == '<'){
0000f8 331c      	CPI  R17,60
0000f9 f411      	BRNE _0x25
                 ; 0000 00D2         PACKET_BUFF_IDX = 0;
0000fa 2444      	CLR  R4
                 ; 0000 00D3         PACKET_BUFF[PACKET_BUFF_IDX] = i;
0000fb c007      	RJMP _0x36
                 ; 0000 00D4         PACKET_BUFF_IDX++;
                 ; 0000 00D5     }
                 ; 0000 00D6     else if(i == '>'){
                 _0x25:
0000fc 331e      	CPI  R17,62
0000fd f429      	BRNE _0x27
                 ; 0000 00D7         PACKET_BUFF[PACKET_BUFF_IDX] = i;
0000fe 2de4      	MOV  R30,R4
0000ff 940e 04fa 	CALL SUBOPT_0x1
                 ; 0000 00D8         PACKET_BUFF_IDX+=2;
000101 9443      	INC  R4
000102 c003      	RJMP _0x37
                 ; 0000 00D9     }
                 ; 0000 00DA     else{
                 _0x27:
                 ; 0000 00DB         PACKET_BUFF[PACKET_BUFF_IDX] = i;
                 _0x36:
000103 2de4      	MOV  R30,R4
000104 940e 04fa 	CALL SUBOPT_0x1
                 ; 0000 00DC         PACKET_BUFF_IDX++;
                 _0x37:
000106 9443      	INC  R4
                 ; 0000 00DD     }
                 ; 0000 00DE }
000107 9119      	LD   R17,Y+
000108 91e9      	LD   R30,Y+
000109 bfef      	OUT  SREG,R30
00010a 91f9      	LD   R31,Y+
00010b 91e9      	LD   R30,Y+
00010c 9518      	RETI
                 ;
                 ;// interrupt [USART0_RXC] void usart0_rxc(void)
                 ;// {
                 ;//     if(((TCNT2 < CHARACTER3_5) && (TIMER2_OVERFLOW == 0)) || PACKET_BUFF_IDX == 0)
                 ;//     {
                 ;//         PACKET_BUFF[PACKET_BUFF_IDX] = UDR0;
                 ;//         PACKET_BUFF_IDX++;
                 ;//         TCNT2 = 0;
                 ;//         TIMER2_OVERFLOW = 0;
                 ;//         //PORTB.1 = ~PORTB.1;
                 ;//     }
                 ;//     else {
                 ;//         PACKET_BUFF_IDX = 0;
                 ;//         PACKET_BUFF[PACKET_BUFF_IDX] = UDR0;
                 ;//         PACKET_BUFF_IDX++;
                 ;//         TCNT2 = 0;
                 ;//         //PORTB.1 = ~PORTB.1;
                 ;//         TIMER2_OVERFLOW = 0;
                 ;//     }
                 ;// }
                 ;
                 ;interrupt [USART1_RXC] void usart1_rxc(void)
                 ; 0000 00F5 {
                 _usart1_rxc:
00010d 93aa      	ST   -Y,R26
00010e 93ba      	ST   -Y,R27
00010f 93ea      	ST   -Y,R30
000110 b7ef      	IN   R30,SREG
000111 93ea      	ST   -Y,R30
                 ; 0000 00F6     if(((TCNT0 < CHARACTER3_5) && (TIMER2_OVERFLOW == 0)) || VELOCITY_BUFF_IDX == 0)
000112 b7e2      	IN   R30,0x32
000113 31e9      	CPI  R30,LOW(0x19)
000114 f418      	BRSH _0x2A
000115 e0e0      	LDI  R30,LOW(0)
000116 15e5      	CP   R30,R5
000117 f019      	BREQ _0x2C
                 _0x2A:
000118 e0e0      	LDI  R30,LOW(0)
000119 15e6      	CP   R30,R6
00011a f431      	BRNE _0x29
                 _0x2C:
                 ; 0000 00F7     {
                 ; 0000 00F8         VELOCITY_BUFF[VELOCITY_BUFF_IDX] = UDR1;
00011b 940e 04ff 	CALL SUBOPT_0x2
00011d 91e0 009c 	LDS  R30,156
00011f 93ec      	ST   X,R30
                 ; 0000 00F9         TCNT0 = 0;
000120 c006      	RJMP _0x38
                 ; 0000 00FA         //PORTB.1 = ~PORTB.1;
                 ; 0000 00FB     }
                 ; 0000 00FC     else {
                 _0x29:
                 ; 0000 00FD         VELOCITY_BUFF_IDX = 0;
000121 2466      	CLR  R6
                 ; 0000 00FE         VELOCITY_BUFF[VELOCITY_BUFF_IDX] = UDR0;
000122 940e 04ff 	CALL SUBOPT_0x2
000124 b1ec      	IN   R30,0xC
000125 93ec      	ST   X,R30
                 ; 0000 00FF         VELOCITY_BUFF_IDX++;
000126 9463      	INC  R6
                 ; 0000 0100         TCNT0 = 0;
                 _0x38:
000127 e0e0      	LDI  R30,LOW(0)
000128 bfe2      	OUT  0x32,R30
                 ; 0000 0101         //PORTB.1 = ~PORTB.1;
                 ; 0000 0102     }
                 ; 0000 0103 }
000129 91e9      	LD   R30,Y+
00012a bfef      	OUT  SREG,R30
00012b 91e9      	LD   R30,Y+
00012c 91b9      	LD   R27,Y+
00012d 91a9      	LD   R26,Y+
00012e 9518      	RETI
                 ;
                 ;interrupt [TIM2_COMP] void timer2_comp(void)
                 ; 0000 0106 {
                 _timer2_comp:
00012f 93ea      	ST   -Y,R30
000130 b7ef      	IN   R30,SREG
                 ; 0000 0107     TIMER2_OVERFLOW++;
000131 9453      	INC  R5
                 ; 0000 0108 }
000132 c003      	RJMP _0x39
                 ;
                 ;interrupt [TIM0_COMP] void timer0_comp(void)
                 ; 0000 010B {
                 _timer0_comp:
000133 93ea      	ST   -Y,R30
000134 b7ef      	IN   R30,SREG
                 ; 0000 010C     TIMER0_OVERFLOW++;
000135 9473      	INC  R7
                 ; 0000 010D }
                 _0x39:
000136 bfef      	OUT  SREG,R30
000137 91e9      	LD   R30,Y+
000138 9518      	RETI
                 ;
                 ;void main(void)
                 ; 0000 0110 {
                 _main:
                 ; 0000 0111     int velocity_R = 0;
                 ; 0000 0112     int velocity_L = 0;
                 ; 0000 0113     unsigned char BUFF[20] = {0,};
                 ; 0000 0114 
                 ; 0000 0115     usart1_init(bps_115200);
000139 9764      	SBIW R28,20
00013a e184      	LDI  R24,20
00013b e0a0      	LDI  R26,LOW(0)
00013c e0b0      	LDI  R27,HIGH(0)
00013d e9ee      	LDI  R30,LOW(_0x2F*2)
00013e e0f0      	LDI  R31,HIGH(_0x2F*2)
00013f 940e 059e 	CALL __INITLOCB
                 ;	velocity_R -> R16,R17
                 ;	velocity_L -> R18,R19
                 ;	BUFF -> Y+0
                +
000141 e000     +LDI R16 , LOW ( 0 )
000142 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
000143 e020     +LDI R18 , LOW ( 0 )
000144 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
000145 e0e7      	LDI  R30,LOW(7)
000146 e0f0      	LDI  R31,HIGH(7)
000147 93fa      	ST   -Y,R31
000148 93ea      	ST   -Y,R30
000149 df4c      	RCALL _usart1_init
                 ; 0000 0116     usart0_init(bps_115200);
00014a e0e7      	LDI  R30,LOW(7)
00014b e0f0      	LDI  R31,HIGH(7)
00014c 93fa      	ST   -Y,R31
00014d 93ea      	ST   -Y,R30
00014e df5f      	RCALL _usart0_init
                 ; 0000 0117     timer2_init();
00014f df74      	RCALL _timer2_init
                 ; 0000 0118     SREG |= 0x80;
000150 9478      	BSET 7
                 ; 0000 0119 
                 ; 0000 011A     DDRB.1 = 1;
000151 9ab9      	SBI  0x17,1
                 ; 0000 011B 
                 ; 0000 011C     delay_ms(5000);
000152 e8e8      	LDI  R30,LOW(5000)
000153 e1f3      	LDI  R31,HIGH(5000)
000154 93fa      	ST   -Y,R31
000155 93ea      	ST   -Y,R30
000156 940e 055b 	CALL _delay_ms
                 ; 0000 011D     while(1)
                 _0x32:
                 ; 0000 011E     {
                 ; 0000 011F         //sscanf(VELOCITY_BUFF,"%d,%d", &velocity_R, &velocity_L);
                 ; 0000 0120 
                 ; 0000 0121         sscanf(PACKET_BUFF,"<%d,%d>", &velocity_R, &velocity_L);
000158 e0e0      	LDI  R30,LOW(_PACKET_BUFF)
000159 e0f5      	LDI  R31,HIGH(_PACKET_BUFF)
00015a 940e 0504 	CALL SUBOPT_0x3
00015c b7ed      	IN   R30,SPL
00015d b7fe      	IN   R31,SPH
00015e 9731      	SBIW R30,1
00015f 940e 0589 	CALL __PUTPARD1L
000161 931f      	PUSH R17
000162 930f      	PUSH R16
000163 b7ed      	IN   R30,SPL
000164 b7fe      	IN   R31,SPH
000165 9731      	SBIW R30,1
000166 940e 0589 	CALL __PUTPARD1L
000168 933f      	PUSH R19
000169 932f      	PUSH R18
00016a e088      	LDI  R24,8
00016b 940e 048f 	CALL _sscanf
00016d 962c      	ADIW R28,12
00016e 912f      	POP  R18
00016f 913f      	POP  R19
000170 910f      	POP  R16
000171 911f      	POP  R17
                 ; 0000 0122         sprintf(BUFF,"<%d,%d>", velocity_R, velocity_L);
000172 01fe      	MOVW R30,R28
000173 940e 0504 	CALL SUBOPT_0x3
000175 01f8      	MOVW R30,R16
000176 940e 0574 	CALL __CWD1
000178 940e 058b 	CALL __PUTPARD1
00017a 01f9      	MOVW R30,R18
00017b 940e 0574 	CALL __CWD1
00017d 940e 058b 	CALL __PUTPARD1
00017f e088      	LDI  R24,8
000180 940e 02fc 	CALL _sprintf
000182 962c      	ADIW R28,12
                 ; 0000 0123 
                 ; 0000 0124         puts_USART1(BUFF,PACKET_BUFF_IDX);
000183 01fe      	MOVW R30,R28
000184 93fa      	ST   -Y,R31
000185 93ea      	ST   -Y,R30
000186 924a      	ST   -Y,R4
000187 df4a      	RCALL _puts_USART1
                 ; 0000 0125         delay_ms(200);
000188 ece8      	LDI  R30,LOW(200)
000189 e0f0      	LDI  R31,HIGH(200)
00018a 93fa      	ST   -Y,R31
00018b 93ea      	ST   -Y,R30
00018c 940e 055b 	CALL _delay_ms
                 ; 0000 0126         // if(velocity_R != 0 && velocity_L != 0)
                 ; 0000 0127         // {
                 ; 0000 0128         //     if(velocity_R >0 && velocity_L>0)
                 ; 0000 0129         //     {
                 ; 0000 012A         //         velocity_R = velocity_R + 300;
                 ; 0000 012B         //         velocity_L = velocity_L + 300;
                 ; 0000 012C         //     }
                 ; 0000 012D 
                 ; 0000 012E         //     if(velocity_R <0 && velocity_L>0)
                 ; 0000 012F         //     {
                 ; 0000 0130         //         velocity_R = velocity_R - 300;
                 ; 0000 0131         //         velocity_L = velocity_L + 300;
                 ; 0000 0132         //     }
                 ; 0000 0133 
                 ; 0000 0134         //     if(velocity_R <0 && velocity_L<0)
                 ; 0000 0135         //     {
                 ; 0000 0136         //         velocity_R = velocity_R - 300;
                 ; 0000 0137         //         velocity_L = velocity_L - 300;
                 ; 0000 0138         //     }
                 ; 0000 0139 
                 ; 0000 013A         //     if(velocity_R >0 && velocity_L<0)
                 ; 0000 013B         //     {
                 ; 0000 013C         //         velocity_R = velocity_R + 300;
                 ; 0000 013D         //         velocity_L = velocity_L - 300;
                 ; 0000 013E         //     }
                 ; 0000 013F         // RTU_WriteOperate0(R,(unsigned int)121,(int)(velocity_R));
                 ; 0000 0140         // delay_ms(50);
                 ; 0000 0141 
                 ; 0000 0142         // RTU_WriteOperate0(L,(unsigned int)121,(int)(velocity_L));
                 ; 0000 0143         // delay_ms(50);
                 ; 0000 0144 
                 ; 0000 0145         // RTU_WriteOperate0(R,(unsigned int)120,(int)(1));
                 ; 0000 0146         // delay_ms(50);
                 ; 0000 0147 
                 ; 0000 0148         // RTU_WriteOperate0(L,(unsigned int)120,(int)(1));
                 ; 0000 0149         // delay_ms(50);
                 ; 0000 014A         // }
                 ; 0000 014B         // else
                 ; 0000 014C         // {
                 ; 0000 014D         //     RTU_WriteOperate0(R,(unsigned int)120,(int)(2));
                 ; 0000 014E         //     delay_ms(50);
                 ; 0000 014F 
                 ; 0000 0150         //     RTU_WriteOperate0(L,(unsigned int)120,(int)(2));
                 ; 0000 0151         //     delay_ms(50);
                 ; 0000 0152         // }
                 ; 0000 0153 
                 ; 0000 0154     }
00018e cfc9      	RJMP _0x32
                 ; 0000 0155 }
                 _0x35:
00018f cfff      	RJMP _0x35
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
000190 931a      	ST   -Y,R17
000191 930a      	ST   -Y,R16
000192 81aa      	LDD  R26,Y+2
000193 81bb      	LDD  R27,Y+2+1
000194 9612      	ADIW R26,2
000195 940e 0581 	CALL __GETW1P
000197 9730      	SBIW R30,0
000198 f129      	BREQ _0x2000010
000199 81aa      	LDD  R26,Y+2
00019a 81bb      	LDD  R27,Y+2+1
00019b 9614      	ADIW R26,4
00019c 940e 0581 	CALL __GETW1P
00019e 018f      	MOVW R16,R30
00019f 9730      	SBIW R30,0
0001a0 f061      	BREQ _0x2000012
                +
0001a1 3002     +CPI R16 , LOW ( 2 )
0001a2 e0e0     +LDI R30 , HIGH ( 2 )
0001a3 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0001a4 f0c0      	BRLO _0x2000013
0001a5 01f8      	MOVW R30,R16
0001a6 9731      	SBIW R30,1
0001a7 018f      	MOVW R16,R30
                +
0001a8 81aa     +LDD R26 , Y + 2
0001a9 81bb     +LDD R27 , Y + 2 + 1
0001aa 9614     +ADIW R26 , 4
0001ab 93ed     +ST X + , R30
0001ac 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
0001ad 81aa      	LDD  R26,Y+2
0001ae 81bb      	LDD  R27,Y+2+1
0001af 9612      	ADIW R26,2
0001b0 940e 050b 	CALL SUBOPT_0x4
0001b2 9731      	SBIW R30,1
0001b3 81ac      	LDD  R26,Y+4
0001b4 83a0      	STD  Z+0,R26
0001b5 81aa      	LDD  R26,Y+2
0001b6 81bb      	LDD  R27,Y+2+1
0001b7 940e 0581 	CALL __GETW1P
0001b9 23ff      	TST  R31
0001ba f012      	BRMI _0x2000014
0001bb 940e 050b 	CALL SUBOPT_0x4
                 _0x2000014:
                 _0x2000013:
0001bd c006      	RJMP _0x2000015
                 _0x2000010:
0001be 81aa      	LDD  R26,Y+2
0001bf 81bb      	LDD  R27,Y+2+1
0001c0 efef      	LDI  R30,LOW(65535)
0001c1 efff      	LDI  R31,HIGH(65535)
0001c2 93ed      	ST   X+,R30
0001c3 93fc      	ST   X,R31
                 _0x2000015:
0001c4 8119      	LDD  R17,Y+1
0001c5 8108      	LDD  R16,Y+0
0001c6 c18f      	RJMP _0x2060004
                 __print_G100:
0001c7 9726      	SBIW R28,6
0001c8 940e 0590 	CALL __SAVELOCR6
0001ca e010      	LDI  R17,0
0001cb 85ac      	LDD  R26,Y+12
0001cc 85bd      	LDD  R27,Y+12+1
0001cd e0e0      	LDI  R30,LOW(0)
0001ce e0f0      	LDI  R31,HIGH(0)
0001cf 93ed      	ST   X+,R30
0001d0 93fc      	ST   X,R31
                 _0x2000016:
0001d1 89ea      	LDD  R30,Y+18
0001d2 89fb      	LDD  R31,Y+18+1
0001d3 9631      	ADIW R30,1
0001d4 8bea      	STD  Y+18,R30
0001d5 8bfb      	STD  Y+18+1,R31
0001d6 9731      	SBIW R30,1
0001d7 91e4      	LPM  R30,Z
0001d8 2f2e      	MOV  R18,R30
0001d9 30e0      	CPI  R30,0
0001da f411      	BRNE PC+3
0001db 940c 02f4 	JMP _0x2000018
0001dd 2fe1      	MOV  R30,R17
0001de 30e0      	CPI  R30,0
0001df f439      	BRNE _0x200001C
0001e0 3225      	CPI  R18,37
0001e1 f411      	BRNE _0x200001D
0001e2 e011      	LDI  R17,LOW(1)
0001e3 c002      	RJMP _0x200001E
                 _0x200001D:
0001e4 940e 0511 	CALL SUBOPT_0x5
                 _0x200001E:
0001e6 c10c      	RJMP _0x200001B
                 _0x200001C:
0001e7 30e1      	CPI  R30,LOW(0x1)
0001e8 f4a9      	BRNE _0x200001F
0001e9 3225      	CPI  R18,37
0001ea f419      	BRNE _0x2000020
0001eb 940e 0511 	CALL SUBOPT_0x5
0001ed c104      	RJMP _0x20000C9
                 _0x2000020:
0001ee e012      	LDI  R17,LOW(2)
0001ef e040      	LDI  R20,LOW(0)
0001f0 e000      	LDI  R16,LOW(0)
0001f1 322d      	CPI  R18,45
0001f2 f411      	BRNE _0x2000021
0001f3 e001      	LDI  R16,LOW(1)
0001f4 c0fe      	RJMP _0x200001B
                 _0x2000021:
0001f5 322b      	CPI  R18,43
0001f6 f411      	BRNE _0x2000022
0001f7 e24b      	LDI  R20,LOW(43)
0001f8 c0fa      	RJMP _0x200001B
                 _0x2000022:
0001f9 3220      	CPI  R18,32
0001fa f411      	BRNE _0x2000023
0001fb e240      	LDI  R20,LOW(32)
0001fc c0f6      	RJMP _0x200001B
                 _0x2000023:
0001fd c002      	RJMP _0x2000024
                 _0x200001F:
0001fe 30e2      	CPI  R30,LOW(0x2)
0001ff f439      	BRNE _0x2000025
                 _0x2000024:
000200 e050      	LDI  R21,LOW(0)
000201 e013      	LDI  R17,LOW(3)
000202 3320      	CPI  R18,48
000203 f411      	BRNE _0x2000026
000204 6800      	ORI  R16,LOW(128)
000205 c0ed      	RJMP _0x200001B
                 _0x2000026:
000206 c004      	RJMP _0x2000027
                 _0x2000025:
000207 30e3      	CPI  R30,LOW(0x3)
000208 f011      	BREQ PC+3
000209 940c 02f3 	JMP _0x200001B
                 _0x2000027:
00020b 3320      	CPI  R18,48
00020c f010      	BRLO _0x200002A
00020d 332a      	CPI  R18,58
00020e f008      	BRLO _0x200002B
                 _0x200002A:
00020f c007      	RJMP _0x2000029
                 _0x200002B:
000210 e0aa      	LDI  R26,LOW(10)
000211 9f5a      	MUL  R21,R26
000212 2d50      	MOV  R21,R0
000213 2fe2      	MOV  R30,R18
000214 53e0      	SUBI R30,LOW(48)
000215 0f5e      	ADD  R21,R30
000216 c0dc      	RJMP _0x200001B
                 _0x2000029:
000217 2fe2      	MOV  R30,R18
000218 36e3      	CPI  R30,LOW(0x63)
000219 f449      	BRNE _0x200002F
00021a 940e 051a 	CALL SUBOPT_0x6
00021c 89e8      	LDD  R30,Y+16
00021d 89f9      	LDD  R31,Y+16+1
00021e 81a4      	LDD  R26,Z+4
00021f 93aa      	ST   -Y,R26
000220 940e 0520 	CALL SUBOPT_0x7
000222 c0cf      	RJMP _0x2000030
                 _0x200002F:
000223 37e3      	CPI  R30,LOW(0x73)
000224 f441      	BRNE _0x2000032
000225 940e 051a 	CALL SUBOPT_0x6
000227 940e 0528 	CALL SUBOPT_0x8
000229 940e 04de 	CALL _strlen
00022b 2f1e      	MOV  R17,R30
00022c c00a      	RJMP _0x2000033
                 _0x2000032:
00022d 37e0      	CPI  R30,LOW(0x70)
00022e f461      	BRNE _0x2000035
00022f 940e 051a 	CALL SUBOPT_0x6
000231 940e 0528 	CALL SUBOPT_0x8
000233 940e 04e8 	CALL _strlenf
000235 2f1e      	MOV  R17,R30
000236 6008      	ORI  R16,LOW(8)
                 _0x2000033:
000237 6002      	ORI  R16,LOW(2)
000238 770f      	ANDI R16,LOW(127)
000239 e030      	LDI  R19,LOW(0)
00023a c035      	RJMP _0x2000036
                 _0x2000035:
00023b 36e4      	CPI  R30,LOW(0x64)
00023c f011      	BREQ _0x2000039
00023d 36e9      	CPI  R30,LOW(0x69)
00023e f411      	BRNE _0x200003A
                 _0x2000039:
00023f 6004      	ORI  R16,LOW(4)
000240 c002      	RJMP _0x200003B
                 _0x200003A:
000241 37e5      	CPI  R30,LOW(0x75)
000242 f431      	BRNE _0x200003C
                 _0x200003B:
000243 e8ec      	LDI  R30,LOW(_tbl10_G100*2)
000244 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
000245 83ee      	STD  Y+6,R30
000246 83ff      	STD  Y+6+1,R31
000247 e015      	LDI  R17,LOW(5)
000248 c00d      	RJMP _0x200003D
                 _0x200003C:
000249 35e8      	CPI  R30,LOW(0x58)
00024a f411      	BRNE _0x200003F
00024b 6008      	ORI  R16,LOW(8)
00024c c004      	RJMP _0x2000040
                 _0x200003F:
00024d 37e8      	CPI  R30,LOW(0x78)
00024e f011      	BREQ PC+3
00024f 940c 02f2 	JMP _0x2000071
                 _0x2000040:
000251 e9e6      	LDI  R30,LOW(_tbl16_G100*2)
000252 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
000253 83ee      	STD  Y+6,R30
000254 83ff      	STD  Y+6+1,R31
000255 e014      	LDI  R17,LOW(4)
                 _0x200003D:
000256 ff02      	SBRS R16,2
000257 c014      	RJMP _0x2000042
000258 940e 051a 	CALL SUBOPT_0x6
00025a 940e 0532 	CALL SUBOPT_0x9
00025c 85ab      	LDD  R26,Y+11
00025d 23aa      	TST  R26
00025e f43a      	BRPL _0x2000043
00025f 85ea      	LDD  R30,Y+10
000260 85fb      	LDD  R31,Y+10+1
000261 940e 056b 	CALL __ANEGW1
000263 87ea      	STD  Y+10,R30
000264 87fb      	STD  Y+10+1,R31
000265 e24d      	LDI  R20,LOW(45)
                 _0x2000043:
000266 3040      	CPI  R20,0
000267 f011      	BREQ _0x2000044
000268 5f1f      	SUBI R17,-LOW(1)
000269 c001      	RJMP _0x2000045
                 _0x2000044:
00026a 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
00026b c004      	RJMP _0x2000046
                 _0x2000042:
00026c 940e 051a 	CALL SUBOPT_0x6
00026e 940e 0532 	CALL SUBOPT_0x9
                 _0x2000046:
                 _0x2000036:
000270 fd00      	SBRC R16,0
000271 c011      	RJMP _0x2000047
                 _0x2000048:
000272 1715      	CP   R17,R21
000273 f478      	BRSH _0x200004A
000274 ff07      	SBRS R16,7
000275 c008      	RJMP _0x200004B
000276 ff02      	SBRS R16,2
000277 c004      	RJMP _0x200004C
000278 7f0b      	ANDI R16,LOW(251)
000279 2f24      	MOV  R18,R20
00027a 5011      	SUBI R17,LOW(1)
00027b c001      	RJMP _0x200004D
                 _0x200004C:
00027c e320      	LDI  R18,LOW(48)
                 _0x200004D:
00027d c001      	RJMP _0x200004E
                 _0x200004B:
00027e e220      	LDI  R18,LOW(32)
                 _0x200004E:
00027f 940e 0511 	CALL SUBOPT_0x5
000281 5051      	SUBI R21,LOW(1)
000282 cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
000283 2f31      	MOV  R19,R17
000284 ff01      	SBRS R16,1
000285 c017      	RJMP _0x200004F
                 _0x2000050:
000286 3030      	CPI  R19,0
000287 f0a1      	BREQ _0x2000052
000288 ff03      	SBRS R16,3
000289 c006      	RJMP _0x2000053
00028a 81ee      	LDD  R30,Y+6
00028b 81ff      	LDD  R31,Y+6+1
00028c 9125      	LPM  R18,Z+
00028d 83ee      	STD  Y+6,R30
00028e 83ff      	STD  Y+6+1,R31
00028f c005      	RJMP _0x2000054
                 _0x2000053:
000290 81ae      	LDD  R26,Y+6
000291 81bf      	LDD  R27,Y+6+1
000292 912d      	LD   R18,X+
000293 83ae      	STD  Y+6,R26
000294 83bf      	STD  Y+6+1,R27
                 _0x2000054:
000295 940e 0511 	CALL SUBOPT_0x5
000297 3050      	CPI  R21,0
000298 f009      	BREQ _0x2000055
000299 5051      	SUBI R21,LOW(1)
                 _0x2000055:
00029a 5031      	SUBI R19,LOW(1)
00029b cfea      	RJMP _0x2000050
                 _0x2000052:
00029c c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
00029d e320      	LDI  R18,LOW(48)
00029e 81ee      	LDD  R30,Y+6
00029f 81ff      	LDD  R31,Y+6+1
0002a0 940e 0585 	CALL __GETW1PF
0002a2 87e8      	STD  Y+8,R30
0002a3 87f9      	STD  Y+8+1,R31
0002a4 81ee      	LDD  R30,Y+6
0002a5 81ff      	LDD  R31,Y+6+1
0002a6 9632      	ADIW R30,2
0002a7 83ee      	STD  Y+6,R30
0002a8 83ff      	STD  Y+6+1,R31
                 _0x200005A:
0002a9 85e8      	LDD  R30,Y+8
0002aa 85f9      	LDD  R31,Y+8+1
0002ab 85aa      	LDD  R26,Y+10
0002ac 85bb      	LDD  R27,Y+10+1
0002ad 17ae      	CP   R26,R30
0002ae 07bf      	CPC  R27,R31
0002af f050      	BRLO _0x200005C
0002b0 5f2f      	SUBI R18,-LOW(1)
0002b1 85a8      	LDD  R26,Y+8
0002b2 85b9      	LDD  R27,Y+8+1
0002b3 85ea      	LDD  R30,Y+10
0002b4 85fb      	LDD  R31,Y+10+1
0002b5 1bea      	SUB  R30,R26
0002b6 0bfb      	SBC  R31,R27
0002b7 87ea      	STD  Y+10,R30
0002b8 87fb      	STD  Y+10+1,R31
0002b9 cfef      	RJMP _0x200005A
                 _0x200005C:
0002ba 332a      	CPI  R18,58
0002bb f028      	BRLO _0x200005D
0002bc ff03      	SBRS R16,3
0002bd c002      	RJMP _0x200005E
0002be 5f29      	SUBI R18,-LOW(7)
0002bf c001      	RJMP _0x200005F
                 _0x200005E:
0002c0 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
0002c1 fd04      	SBRC R16,4
0002c2 c01a      	RJMP _0x2000061
0002c3 3321      	CPI  R18,49
0002c4 f420      	BRSH _0x2000063
0002c5 85a8      	LDD  R26,Y+8
0002c6 85b9      	LDD  R27,Y+8+1
0002c7 9711      	SBIW R26,1
0002c8 f409      	BRNE _0x2000062
                 _0x2000063:
0002c9 c009      	RJMP _0x20000CA
                 _0x2000062:
0002ca 1753      	CP   R21,R19
0002cb f010      	BRLO _0x2000067
0002cc ff00      	SBRS R16,0
0002cd c001      	RJMP _0x2000068
                 _0x2000067:
0002ce c013      	RJMP _0x2000066
                 _0x2000068:
0002cf e220      	LDI  R18,LOW(32)
0002d0 ff07      	SBRS R16,7
0002d1 c00b      	RJMP _0x2000069
0002d2 e320      	LDI  R18,LOW(48)
                 _0x20000CA:
0002d3 6100      	ORI  R16,LOW(16)
0002d4 ff02      	SBRS R16,2
0002d5 c007      	RJMP _0x200006A
0002d6 7f0b      	ANDI R16,LOW(251)
0002d7 934a      	ST   -Y,R20
0002d8 940e 0520 	CALL SUBOPT_0x7
0002da 3050      	CPI  R21,0
0002db f009      	BREQ _0x200006B
0002dc 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
0002dd 940e 0511 	CALL SUBOPT_0x5
0002df 3050      	CPI  R21,0
0002e0 f009      	BREQ _0x200006C
0002e1 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
0002e2 5031      	SUBI R19,LOW(1)
0002e3 85a8      	LDD  R26,Y+8
0002e4 85b9      	LDD  R27,Y+8+1
0002e5 9712      	SBIW R26,2
0002e6 f008      	BRLO _0x2000059
0002e7 cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
0002e8 ff00      	SBRS R16,0
0002e9 c008      	RJMP _0x200006D
                 _0x200006E:
0002ea 3050      	CPI  R21,0
0002eb f031      	BREQ _0x2000070
0002ec 5051      	SUBI R21,LOW(1)
0002ed e2e0      	LDI  R30,LOW(32)
0002ee 93ea      	ST   -Y,R30
0002ef 940e 0520 	CALL SUBOPT_0x7
0002f1 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000C9:
0002f2 e010      	LDI  R17,LOW(0)
                 _0x200001B:
0002f3 cedd      	RJMP _0x2000016
                 _0x2000018:
0002f4 85ac      	LDD  R26,Y+12
0002f5 85bd      	LDD  R27,Y+12+1
0002f6 940e 0581 	CALL __GETW1P
0002f8 940e 0597 	CALL __LOADLOCR6
0002fa 9664      	ADIW R28,20
0002fb 9508      	RET
                 _sprintf:
0002fc 92ff      	PUSH R15
0002fd 2ef8      	MOV  R15,R24
0002fe 9726      	SBIW R28,6
0002ff 940e 0592 	CALL __SAVELOCR4
000301 940e 053a 	CALL SUBOPT_0xA
000303 9730      	SBIW R30,0
000304 f419      	BRNE _0x2000072
000305 efef      	LDI  R30,LOW(65535)
000306 efff      	LDI  R31,HIGH(65535)
000307 c023      	RJMP _0x2060005
                 _0x2000072:
000308 01de      	MOVW R26,R28
000309 9616      	ADIW R26,6
00030a 940e 0567 	CALL __ADDW2R15
00030c 018d      	MOVW R16,R26
00030d 940e 053a 	CALL SUBOPT_0xA
00030f 83ee      	STD  Y+6,R30
000310 83ff      	STD  Y+6+1,R31
000311 e0e0      	LDI  R30,LOW(0)
000312 87e8      	STD  Y+8,R30
000313 87e9      	STD  Y+8+1,R30
000314 01de      	MOVW R26,R28
000315 961a      	ADIW R26,10
000316 940e 0541 	CALL SUBOPT_0xB
000318 93fa      	ST   -Y,R31
000319 93ea      	ST   -Y,R30
00031a 931a      	ST   -Y,R17
00031b 930a      	ST   -Y,R16
00031c e9e0      	LDI  R30,LOW(_put_buff_G100)
00031d e0f1      	LDI  R31,HIGH(_put_buff_G100)
00031e 93fa      	ST   -Y,R31
00031f 93ea      	ST   -Y,R30
000320 01fe      	MOVW R30,R28
000321 963a      	ADIW R30,10
000322 93fa      	ST   -Y,R31
000323 93ea      	ST   -Y,R30
000324 dea2      	RCALL __print_G100
000325 019f      	MOVW R18,R30
000326 81ae      	LDD  R26,Y+6
000327 81bf      	LDD  R27,Y+6+1
000328 e0e0      	LDI  R30,LOW(0)
000329 93ec      	ST   X,R30
00032a 01f9      	MOVW R30,R18
                 _0x2060005:
00032b 940e 0599 	CALL __LOADLOCR4
00032d 962a      	ADIW R28,10
00032e 90ff      	POP  R15
00032f 9508      	RET
                 _get_buff_G100:
000330 931a      	ST   -Y,R17
000331 81a9      	LDD  R26,Y+1
000332 81ba      	LDD  R27,Y+1+1
000333 e0e0      	LDI  R30,LOW(0)
000334 93ec      	ST   X,R30
000335 81ab      	LDD  R26,Y+3
000336 81bc      	LDD  R27,Y+3+1
000337 91ec      	LD   R30,X
000338 2f1e      	MOV  R17,R30
000339 30e0      	CPI  R30,0
00033a f019      	BREQ _0x200007A
00033b e0e0      	LDI  R30,LOW(0)
00033c 93ec      	ST   X,R30
00033d c016      	RJMP _0x200007B
                 _0x200007A:
00033e 81a9      	LDD  R26,Y+1
00033f 81ba      	LDD  R27,Y+1+1
000340 9611      	ADIW R26,1
000341 940e 0581 	CALL __GETW1P
000343 9730      	SBIW R30,0
000344 f071      	BREQ _0x200007C
000345 81e9      	LDD  R30,Y+1
000346 81fa      	LDD  R31,Y+1+1
000347 81a1      	LDD  R26,Z+1
000348 81b2      	LDD  R27,Z+2
000349 91ec      	LD   R30,X
00034a 2f1e      	MOV  R17,R30
00034b 30e0      	CPI  R30,0
00034c f029      	BREQ _0x200007D
00034d 81a9      	LDD  R26,Y+1
00034e 81ba      	LDD  R27,Y+1+1
00034f 9611      	ADIW R26,1
000350 940e 050b 	CALL SUBOPT_0x4
                 _0x200007D:
000352 c001      	RJMP _0x200007E
                 _0x200007C:
000353 e010      	LDI  R17,LOW(0)
                 _0x200007E:
                 _0x200007B:
000354 2fe1      	MOV  R30,R17
000355 8118      	LDD  R17,Y+0
                 _0x2060004:
000356 9625      	ADIW R28,5
000357 9508      	RET
                 __scanf_G100:
000358 9725      	SBIW R28,5
000359 940e 0590 	CALL __SAVELOCR6
00035b e0e0      	LDI  R30,LOW(0)
00035c e0f0      	LDI  R31,HIGH(0)
00035d 87e8      	STD  Y+8,R30
00035e 87f9      	STD  Y+8+1,R31
00035f 2f4e      	MOV  R20,R30
                 _0x200007F:
000360 89e9      	LDD  R30,Y+17
000361 89fa      	LDD  R31,Y+17+1
000362 9631      	ADIW R30,1
000363 8be9      	STD  Y+17,R30
000364 8bfa      	STD  Y+17+1,R31
000365 9731      	SBIW R30,1
000366 91e4      	LPM  R30,Z
000367 2f3e      	MOV  R19,R30
000368 30e0      	CPI  R30,0
000369 f411      	BRNE PC+3
00036a 940c 0489 	JMP _0x2000081
00036c 940e 0546 	CALL SUBOPT_0xC
00036e f0c1      	BREQ _0x2000082
                 _0x2000083:
00036f b7ed      	IN   R30,SPL
000370 b7fe      	IN   R31,SPH
000371 93fa      	ST   -Y,R31
000372 93ea      	ST   -Y,R30
000373 934f      	PUSH R20
000374 940e 0520 	CALL SUBOPT_0x7
000376 914f      	POP  R20
000377 2f3e      	MOV  R19,R30
000378 30e0      	CPI  R30,0
000379 f019      	BREQ _0x2000086
00037a 940e 0546 	CALL SUBOPT_0xC
00037c f409      	BRNE _0x2000087
                 _0x2000086:
00037d c007      	RJMP _0x2000085
                 _0x2000087:
00037e 940e 054b 	CALL SUBOPT_0xD
000380 f41c      	BRGE _0x2000088
000381 efef      	LDI  R30,LOW(65535)
000382 efff      	LDI  R31,HIGH(65535)
000383 c107      	RJMP _0x2060002
                 _0x2000088:
000384 cfea      	RJMP _0x2000083
                 _0x2000085:
000385 2f43      	MOV  R20,R19
000386 c101      	RJMP _0x2000089
                 _0x2000082:
000387 3235      	CPI  R19,37
000388 f011      	BREQ PC+3
000389 940c 0470 	JMP _0x200008A
00038b e050      	LDI  R21,LOW(0)
                 _0x200008B:
00038c 89e9      	LDD  R30,Y+17
00038d 89fa      	LDD  R31,Y+17+1
00038e 9135      	LPM  R19,Z+
00038f 8be9      	STD  Y+17,R30
000390 8bfa      	STD  Y+17+1,R31
000391 3330      	CPI  R19,48
000392 f010      	BRLO _0x200008F
000393 333a      	CPI  R19,58
000394 f008      	BRLO _0x200008E
                 _0x200008F:
000395 c007      	RJMP _0x200008D
                 _0x200008E:
000396 e0aa      	LDI  R26,LOW(10)
000397 9f5a      	MUL  R21,R26
000398 2d50      	MOV  R21,R0
000399 2fe3      	MOV  R30,R19
00039a 53e0      	SUBI R30,LOW(48)
00039b 0f5e      	ADD  R21,R30
00039c cfef      	RJMP _0x200008B
                 _0x200008D:
00039d 3030      	CPI  R19,0
00039e f409      	BRNE _0x2000091
00039f c0e9      	RJMP _0x2000081
                 _0x2000091:
                 _0x2000092:
0003a0 b7ed      	IN   R30,SPL
0003a1 b7fe      	IN   R31,SPH
0003a2 93fa      	ST   -Y,R31
0003a3 93ea      	ST   -Y,R30
0003a4 934f      	PUSH R20
0003a5 940e 0520 	CALL SUBOPT_0x7
0003a7 914f      	POP  R20
0003a8 2f2e      	MOV  R18,R30
0003a9 93ea      	ST   -Y,R30
0003aa 940e 04c6 	CALL _isspace
0003ac 30e0      	CPI  R30,0
0003ad f039      	BREQ _0x2000094
0003ae 940e 054b 	CALL SUBOPT_0xD
0003b0 f41c      	BRGE _0x2000095
0003b1 efef      	LDI  R30,LOW(65535)
0003b2 efff      	LDI  R31,HIGH(65535)
0003b3 c0d7      	RJMP _0x2060002
                 _0x2000095:
0003b4 cfeb      	RJMP _0x2000092
                 _0x2000094:
0003b5 3020      	CPI  R18,0
0003b6 f409      	BRNE _0x2000096
0003b7 c0c8      	RJMP _0x2000097
                 _0x2000096:
0003b8 2f42      	MOV  R20,R18
0003b9 3050      	CPI  R21,0
0003ba f409      	BRNE _0x2000098
0003bb ef5f      	LDI  R21,LOW(255)
                 _0x2000098:
0003bc 2fe3      	MOV  R30,R19
0003bd 36e3      	CPI  R30,LOW(0x63)
0003be f499      	BRNE _0x200009C
0003bf 940e 0550 	CALL SUBOPT_0xE
0003c1 b7ed      	IN   R30,SPL
0003c2 b7fe      	IN   R31,SPH
0003c3 93fa      	ST   -Y,R31
0003c4 93ea      	ST   -Y,R30
0003c5 934f      	PUSH R20
0003c6 940e 0520 	CALL SUBOPT_0x7
0003c8 914f      	POP  R20
0003c9 01d8      	MOVW R26,R16
0003ca 93ec      	ST   X,R30
0003cb 940e 054b 	CALL SUBOPT_0xD
0003cd f41c      	BRGE _0x200009D
0003ce efef      	LDI  R30,LOW(65535)
0003cf efff      	LDI  R31,HIGH(65535)
0003d0 c0ba      	RJMP _0x2060002
                 _0x200009D:
0003d1 c098      	RJMP _0x200009B
                 _0x200009C:
0003d2 37e3      	CPI  R30,LOW(0x73)
0003d3 f541      	BRNE _0x20000A6
0003d4 940e 0550 	CALL SUBOPT_0xE
                 _0x200009F:
0003d6 2fe5      	MOV  R30,R21
0003d7 5051      	SUBI R21,1
0003d8 30e0      	CPI  R30,0
0003d9 f0f1      	BREQ _0x20000A1
0003da b7ed      	IN   R30,SPL
0003db b7fe      	IN   R31,SPH
0003dc 93fa      	ST   -Y,R31
0003dd 93ea      	ST   -Y,R30
0003de 934f      	PUSH R20
0003df 940e 0520 	CALL SUBOPT_0x7
0003e1 914f      	POP  R20
0003e2 2f3e      	MOV  R19,R30
0003e3 30e0      	CPI  R30,0
0003e4 f019      	BREQ _0x20000A3
0003e5 940e 0546 	CALL SUBOPT_0xC
0003e7 f039      	BREQ _0x20000A2
                 _0x20000A3:
0003e8 940e 054b 	CALL SUBOPT_0xD
0003ea f41c      	BRGE _0x20000A5
0003eb efef      	LDI  R30,LOW(65535)
0003ec efff      	LDI  R31,HIGH(65535)
0003ed c09d      	RJMP _0x2060002
                 _0x20000A5:
0003ee c009      	RJMP _0x20000A1
                 _0x20000A2:
0003ef 931f      	PUSH R17
0003f0 930f      	PUSH R16
                +
0003f1 5f0f     +SUBI R16 , LOW ( - 1 )
0003f2 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0003f3 2fe3      	MOV  R30,R19
0003f4 91af      	POP  R26
0003f5 91bf      	POP  R27
0003f6 93ec      	ST   X,R30
0003f7 cfde      	RJMP _0x200009F
                 _0x20000A1:
0003f8 01d8      	MOVW R26,R16
0003f9 e0e0      	LDI  R30,LOW(0)
0003fa 93ec      	ST   X,R30
0003fb c06e      	RJMP _0x200009B
                 _0x20000A6:
0003fc e0e1      	LDI  R30,LOW(1)
0003fd 87ea      	STD  Y+10,R30
0003fe 2fe3      	MOV  R30,R19
0003ff 36e4      	CPI  R30,LOW(0x64)
000400 f011      	BREQ _0x20000AB
000401 36e9      	CPI  R30,LOW(0x69)
000402 f419      	BRNE _0x20000AC
                 _0x20000AB:
000403 e0e0      	LDI  R30,LOW(0)
000404 87ea      	STD  Y+10,R30
000405 c002      	RJMP _0x20000AD
                 _0x20000AC:
000406 37e5      	CPI  R30,LOW(0x75)
000407 f411      	BRNE _0x20000AE
                 _0x20000AD:
000408 e02a      	LDI  R18,LOW(10)
000409 c008      	RJMP _0x20000A9
                 _0x20000AE:
00040a 37e8      	CPI  R30,LOW(0x78)
00040b f411      	BRNE _0x20000AF
00040c e120      	LDI  R18,LOW(16)
00040d c004      	RJMP _0x20000A9
                 _0x20000AF:
00040e 32e5      	CPI  R30,LOW(0x25)
00040f f409      	BRNE _0x20000B2
000410 c05f      	RJMP _0x20000B1
                 _0x20000B2:
000411 c077      	RJMP _0x2060003
                 _0x20000A9:
000412 e0e0      	LDI  R30,LOW(0)
000413 83ee      	STD  Y+6,R30
000414 83ef      	STD  Y+6+1,R30
                 _0x20000B3:
000415 2fe5      	MOV  R30,R21
000416 5051      	SUBI R21,1
000417 30e0      	CPI  R30,0
000418 f411      	BRNE PC+3
000419 940c 045d 	JMP _0x20000B5
00041b b7ed      	IN   R30,SPL
00041c b7fe      	IN   R31,SPH
00041d 93fa      	ST   -Y,R31
00041e 93ea      	ST   -Y,R30
00041f 934f      	PUSH R20
000420 940e 0520 	CALL SUBOPT_0x7
000422 914f      	POP  R20
000423 2f3e      	MOV  R19,R30
000424 32e1      	CPI  R30,LOW(0x21)
000425 f438      	BRSH _0x20000B6
000426 940e 054b 	CALL SUBOPT_0xD
000428 f41c      	BRGE _0x20000B7
000429 efef      	LDI  R30,LOW(65535)
00042a efff      	LDI  R31,HIGH(65535)
00042b c05f      	RJMP _0x2060002
                 _0x20000B7:
00042c c017      	RJMP _0x20000B8
                 _0x20000B6:
00042d 85ea      	LDD  R30,Y+10
00042e 30e0      	CPI  R30,0
00042f f439      	BRNE _0x20000B9
000430 323d      	CPI  R19,45
000431 f419      	BRNE _0x20000BA
000432 efef      	LDI  R30,LOW(255)
000433 87ea      	STD  Y+10,R30
000434 cfe0      	RJMP _0x20000B3
                 _0x20000BA:
000435 e0e1      	LDI  R30,LOW(1)
000436 87ea      	STD  Y+10,R30
                 _0x20000B9:
000437 3120      	CPI  R18,16
000438 f431      	BRNE _0x20000BC
000439 933a      	ST   -Y,R19
00043a 940e 04d0 	CALL _isxdigit
00043c 30e0      	CPI  R30,0
00043d f031      	BREQ _0x20000B8
00043e c007      	RJMP _0x20000BE
                 _0x20000BC:
00043f 933a      	ST   -Y,R19
000440 940e 04be 	CALL _isdigit
000442 30e0      	CPI  R30,0
000443 f411      	BRNE _0x20000BF
                 _0x20000B8:
000444 2f43      	MOV  R20,R19
000445 c017      	RJMP _0x20000B5
                 _0x20000BF:
                 _0x20000BE:
000446 3631      	CPI  R19,97
000447 f010      	BRLO _0x20000C0
000448 5537      	SUBI R19,LOW(87)
000449 c005      	RJMP _0x20000C1
                 _0x20000C0:
00044a 3431      	CPI  R19,65
00044b f010      	BRLO _0x20000C2
00044c 5337      	SUBI R19,LOW(55)
00044d c001      	RJMP _0x20000C3
                 _0x20000C2:
00044e 5330      	SUBI R19,LOW(48)
                 _0x20000C3:
                 _0x20000C1:
00044f 2fe2      	MOV  R30,R18
000450 81ae      	LDD  R26,Y+6
000451 81bf      	LDD  R27,Y+6+1
000452 e0f0      	LDI  R31,0
000453 940e 0579 	CALL __MULW12U
000455 01df      	MOVW R26,R30
000456 2fe3      	MOV  R30,R19
000457 e0f0      	LDI  R31,0
000458 0fea      	ADD  R30,R26
000459 1ffb      	ADC  R31,R27
00045a 83ee      	STD  Y+6,R30
00045b 83ff      	STD  Y+6+1,R31
00045c cfb8      	RJMP _0x20000B3
                 _0x20000B5:
00045d 940e 0550 	CALL SUBOPT_0xE
00045f 85ea      	LDD  R30,Y+10
000460 81ae      	LDD  R26,Y+6
000461 81bf      	LDD  R27,Y+6+1
000462 e0f0      	LDI  R31,0
000463 fde7      	SBRC R30,7
000464 efff      	SER  R31
000465 940e 0579 	CALL __MULW12U
000467 01d8      	MOVW R26,R16
000468 93ed      	ST   X+,R30
000469 93fc      	ST   X,R31
                 _0x200009B:
00046a 85e8      	LDD  R30,Y+8
00046b 85f9      	LDD  R31,Y+8+1
00046c 9631      	ADIW R30,1
00046d 87e8      	STD  Y+8,R30
00046e 87f9      	STD  Y+8+1,R31
00046f c018      	RJMP _0x20000C4
                 _0x200008A:
                 _0x20000B1:
000470 b7ed      	IN   R30,SPL
000471 b7fe      	IN   R31,SPH
000472 93fa      	ST   -Y,R31
000473 93ea      	ST   -Y,R30
000474 934f      	PUSH R20
000475 940e 0520 	CALL SUBOPT_0x7
000477 914f      	POP  R20
000478 17e3      	CP   R30,R19
000479 f071      	BREQ _0x20000C5
00047a 940e 054b 	CALL SUBOPT_0xD
00047c f41c      	BRGE _0x20000C6
00047d efef      	LDI  R30,LOW(65535)
00047e efff      	LDI  R31,HIGH(65535)
00047f c00b      	RJMP _0x2060002
                 _0x20000C6:
                 _0x2000097:
000480 85e8      	LDD  R30,Y+8
000481 85f9      	LDD  R31,Y+8+1
000482 9730      	SBIW R30,0
000483 f419      	BRNE _0x20000C7
000484 efef      	LDI  R30,LOW(65535)
000485 efff      	LDI  R31,HIGH(65535)
000486 c004      	RJMP _0x2060002
                 _0x20000C7:
000487 c001      	RJMP _0x2000081
                 _0x20000C5:
                 _0x20000C4:
                 _0x2000089:
000488 ced7      	RJMP _0x200007F
                 _0x2000081:
                 _0x2060003:
000489 85e8      	LDD  R30,Y+8
00048a 85f9      	LDD  R31,Y+8+1
                 _0x2060002:
00048b 940e 0597 	CALL __LOADLOCR6
00048d 9663      	ADIW R28,19
00048e 9508      	RET
                 _sscanf:
00048f 92ff      	PUSH R15
000490 2ef8      	MOV  R15,R24
000491 9723      	SBIW R28,3
000492 931a      	ST   -Y,R17
000493 930a      	ST   -Y,R16
000494 01de      	MOVW R26,R28
000495 9617      	ADIW R26,7
000496 940e 0541 	CALL SUBOPT_0xB
000498 9730      	SBIW R30,0
000499 f419      	BRNE _0x20000C8
00049a efef      	LDI  R30,LOW(65535)
00049b efff      	LDI  R31,HIGH(65535)
00049c c01c      	RJMP _0x2060001
                 _0x20000C8:
00049d 01de      	MOVW R26,R28
00049e 9611      	ADIW R26,1
00049f 940e 0567 	CALL __ADDW2R15
0004a1 018d      	MOVW R16,R26
0004a2 01de      	MOVW R26,R28
0004a3 9617      	ADIW R26,7
0004a4 940e 0541 	CALL SUBOPT_0xB
0004a6 83eb      	STD  Y+3,R30
0004a7 83fc      	STD  Y+3+1,R31
0004a8 01de      	MOVW R26,R28
0004a9 9615      	ADIW R26,5
0004aa 940e 0541 	CALL SUBOPT_0xB
0004ac 93fa      	ST   -Y,R31
0004ad 93ea      	ST   -Y,R30
0004ae 931a      	ST   -Y,R17
0004af 930a      	ST   -Y,R16
0004b0 e3e0      	LDI  R30,LOW(_get_buff_G100)
0004b1 e0f3      	LDI  R31,HIGH(_get_buff_G100)
0004b2 93fa      	ST   -Y,R31
0004b3 93ea      	ST   -Y,R30
0004b4 01fe      	MOVW R30,R28
0004b5 9638      	ADIW R30,8
0004b6 93fa      	ST   -Y,R31
0004b7 93ea      	ST   -Y,R30
0004b8 de9f      	RCALL __scanf_G100
                 _0x2060001:
0004b9 8119      	LDD  R17,Y+1
0004ba 8108      	LDD  R16,Y+0
0004bb 9625      	ADIW R28,5
0004bc 90ff      	POP  R15
0004bd 9508      	RET
                 
                 	.CSEG
                 _isdigit:
0004be e0e1          ldi  r30,1
0004bf 91f9          ld   r31,y+
0004c0 33f0          cpi  r31,'0'
0004c1 f010          brlo isdigit0
0004c2 33fa          cpi  r31,'9'+1
0004c3 f008          brlo isdigit1
                 isdigit0:
0004c4 27ee          clr  r30
                 isdigit1:
0004c5 9508          ret
                 _isspace:
0004c6 e0e1          ldi  r30,1
0004c7 91f9          ld   r31,y+
0004c8 32f0          cpi  r31,' '
0004c9 f029          breq isspace1
0004ca 30f9          cpi  r31,9
0004cb f010          brlo isspace0
0004cc 30fe          cpi  r31,13+1
0004cd f008          brlo isspace1
                 isspace0:
0004ce 27ee          clr  r30
                 isspace1:
0004cf 9508          ret
                 _isxdigit:
0004d0 e0e1          ldi  r30,1
0004d1 91f9          ld   r31,y+
0004d2 53f0          subi r31,0x30
0004d3 f040          brcs isxdigit0
0004d4 30fa          cpi  r31,10
0004d5 f038          brcs isxdigit1
0004d6 75ff          andi r31,0x5f
0004d7 50f7          subi r31,7
0004d8 30fa          cpi  r31,10
0004d9 f010          brcs isxdigit0
0004da 31f0          cpi  r31,16
0004db f008          brcs isxdigit1
                 isxdigit0:
0004dc 27ee          clr  r30
                 isxdigit1:
0004dd 9508          ret
                 
                 	.CSEG
                 _strlen:
0004de 91a9          ld   r26,y+
0004df 91b9          ld   r27,y+
0004e0 27ee          clr  r30
0004e1 27ff          clr  r31
                 strlen0:
0004e2 916d          ld   r22,x+
0004e3 2366          tst  r22
0004e4 f011          breq strlen1
0004e5 9631          adiw r30,1
0004e6 cffb          rjmp strlen0
                 strlen1:
0004e7 9508          ret
                 _strlenf:
0004e8 27aa          clr  r26
0004e9 27bb          clr  r27
0004ea 91e9          ld   r30,y+
0004eb 91f9          ld   r31,y+
                 strlenf0:
0004ec 9005      	lpm  r0,z+
0004ed 2000          tst  r0
0004ee f011          breq strlenf1
0004ef 9611          adiw r26,1
0004f0 cffb          rjmp strlenf0
                 strlenf1:
0004f1 01fd          movw r30,r26
0004f2 9508          ret
                 
                 	.DSEG
                 _PACKET_BUFF:
000500           	.BYTE 0x64
                 _VELOCITY_BUFF:
000564           	.BYTE 0x14
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
0004f3 2fe1      	MOV  R30,R17
0004f4 e0f0      	LDI  R31,0
0004f5 81aa      	LDD  R26,Y+2
0004f6 81bb      	LDD  R27,Y+2+1
0004f7 0fae      	ADD  R26,R30
0004f8 1fbf      	ADC  R27,R31
0004f9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
0004fa e0f0      	LDI  R31,0
0004fb 50e0      	SUBI R30,LOW(-_PACKET_BUFF)
0004fc 4ffb      	SBCI R31,HIGH(-_PACKET_BUFF)
0004fd 8310      	ST   Z,R17
0004fe 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
0004ff 2da6      	MOV  R26,R6
000500 e0b0      	LDI  R27,0
000501 59ac      	SUBI R26,LOW(-_VELOCITY_BUFF)
000502 4fba      	SBCI R27,HIGH(-_VELOCITY_BUFF)
000503 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
000504 93fa      	ST   -Y,R31
000505 93ea      	ST   -Y,R30
                +
000506 ebe6     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
000507 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
000508 93fa      	ST   -Y,R31
000509 93ea      	ST   -Y,R30
00050a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
00050b 91ed      	LD   R30,X+
00050c 91fd      	LD   R31,X+
00050d 9631      	ADIW R30,1
00050e 93fe      	ST   -X,R31
00050f 93ee      	ST   -X,R30
000510 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x5:
000511 932a      	ST   -Y,R18
000512 85ed      	LDD  R30,Y+13
000513 85fe      	LDD  R31,Y+13+1
000514 93fa      	ST   -Y,R31
000515 93ea      	ST   -Y,R30
000516 89e9      	LDD  R30,Y+17
000517 89fa      	LDD  R31,Y+17+1
000518 9509      	ICALL
000519 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x6:
00051a 89e8      	LDD  R30,Y+16
00051b 89f9      	LDD  R31,Y+16+1
00051c 9734      	SBIW R30,4
00051d 8be8      	STD  Y+16,R30
00051e 8bf9      	STD  Y+16+1,R31
00051f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:37 WORDS
                 SUBOPT_0x7:
000520 85ed      	LDD  R30,Y+13
000521 85fe      	LDD  R31,Y+13+1
000522 93fa      	ST   -Y,R31
000523 93ea      	ST   -Y,R30
000524 89e9      	LDD  R30,Y+17
000525 89fa      	LDD  R31,Y+17+1
000526 9509      	ICALL
000527 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x8:
000528 89a8      	LDD  R26,Y+16
000529 89b9      	LDD  R27,Y+16+1
00052a 9614      	ADIW R26,4
00052b 940e 0581 	CALL __GETW1P
00052d 83ee      	STD  Y+6,R30
00052e 83ff      	STD  Y+6+1,R31
00052f 93fa      	ST   -Y,R31
000530 93ea      	ST   -Y,R30
000531 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x9:
000532 89a8      	LDD  R26,Y+16
000533 89b9      	LDD  R27,Y+16+1
000534 9614      	ADIW R26,4
000535 940e 0581 	CALL __GETW1P
000537 87ea      	STD  Y+10,R30
000538 87fb      	STD  Y+10+1,R31
000539 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
00053a 01de      	MOVW R26,R28
00053b 961c      	ADIW R26,12
00053c 940e 0567 	CALL __ADDW2R15
00053e 940e 0581 	CALL __GETW1P
000540 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xB:
000541 940e 0567 	CALL __ADDW2R15
000543 940e 0581 	CALL __GETW1P
000545 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
000546 933a      	ST   -Y,R19
000547 940e 04c6 	CALL _isspace
000549 30e0      	CPI  R30,0
00054a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xD:
00054b 85ab      	LDD  R26,Y+11
00054c 85bc      	LDD  R27,Y+11+1
00054d 91ac      	LD   R26,X
00054e 30a0      	CPI  R26,0
00054f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xE:
000550 85ef      	LDD  R30,Y+15
000551 89f8      	LDD  R31,Y+15+1
000552 9734      	SBIW R30,4
000553 87ef      	STD  Y+15,R30
000554 8bf8      	STD  Y+15+1,R31
000555 85af      	LDD  R26,Y+15
000556 89b8      	LDD  R27,Y+15+1
000557 9614      	ADIW R26,4
000558 910d      	LD   R16,X+
000559 911c      	LD   R17,X
00055a 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00055b 91e9      	ld   r30,y+
00055c 91f9      	ld   r31,y+
00055d 9630      	adiw r30,0
00055e f039      	breq __delay_ms1
                 __delay_ms0:
                +
00055f e686     +LDI R24 , LOW ( 0xE66 )
000560 e09e     +LDI R25 , HIGH ( 0xE66 )
                +__DELAY_USW_LOOP :
000561 9701     +SBIW R24 , 1
000562 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xE66
000563 95a8      	wdr
000564 9731      	sbiw r30,1
000565 f7c9      	brne __delay_ms0
                 __delay_ms1:
000566 9508      	ret
                 
                 __ADDW2R15:
000567 2400      	CLR  R0
000568 0daf      	ADD  R26,R15
000569 1db0      	ADC  R27,R0
00056a 9508      	RET
                 
                 __ANEGW1:
00056b 95f1      	NEG  R31
00056c 95e1      	NEG  R30
00056d 40f0      	SBCI R31,0
00056e 9508      	RET
                 
                 __ASRW8:
00056f 2fef      	MOV  R30,R31
000570 27ff      	CLR  R31
000571 fde7      	SBRC R30,7
000572 efff      	SER  R31
000573 9508      	RET
                 
                 __CWD1:
000574 2f6f      	MOV  R22,R31
000575 0f66      	ADD  R22,R22
000576 0b66      	SBC  R22,R22
000577 2f76      	MOV  R23,R22
000578 9508      	RET
                 
                 __MULW12U:
000579 9ffa      	MUL  R31,R26
00057a 2df0      	MOV  R31,R0
00057b 9feb      	MUL  R30,R27
00057c 0df0      	ADD  R31,R0
00057d 9fea      	MUL  R30,R26
00057e 2de0      	MOV  R30,R0
00057f 0df1      	ADD  R31,R1
000580 9508      	RET
                 
                 __GETW1P:
000581 91ed      	LD   R30,X+
000582 91fc      	LD   R31,X
000583 9711      	SBIW R26,1
000584 9508      	RET
                 
                 __GETW1PF:
000585 9005      	LPM  R0,Z+
000586 91f4      	LPM  R31,Z
000587 2de0      	MOV  R30,R0
000588 9508      	RET
                 
                 __PUTPARD1L:
000589 e060      	LDI  R22,0
00058a e070      	LDI  R23,0
                 __PUTPARD1:
00058b 937a      	ST   -Y,R23
00058c 936a      	ST   -Y,R22
00058d 93fa      	ST   -Y,R31
00058e 93ea      	ST   -Y,R30
00058f 9508      	RET
                 
                 __SAVELOCR6:
000590 935a      	ST   -Y,R21
                 __SAVELOCR5:
000591 934a      	ST   -Y,R20
                 __SAVELOCR4:
000592 933a      	ST   -Y,R19
                 __SAVELOCR3:
000593 932a      	ST   -Y,R18
                 __SAVELOCR2:
000594 931a      	ST   -Y,R17
000595 930a      	ST   -Y,R16
000596 9508      	RET
                 
                 __LOADLOCR6:
000597 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000598 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000599 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00059a 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00059b 8119      	LDD  R17,Y+1
00059c 8108      	LD   R16,Y
00059d 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
00059e 0fac      	ADD  R26,R28
00059f 1fbd      	ADC  R27,R29
                 __INITLOC0:
0005a0 9005      	LPM  R0,Z+
0005a1 920d      	ST   X+,R0
0005a2 958a      	DEC  R24
0005a3 f7e1      	BRNE __INITLOC0
0005a4 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :  17 r1 :   2 r2 :   0 r3 :   0 r4 :   6 r5 :   2 r6 :   4 r7 :   1 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   7 
r16:  48 r17:  52 r18:  40 r19:  37 r20:  25 r21:  27 r22:  12 r23:   3 
r24:  16 r25:   3 r26:  94 r27:  47 r28:  28 r29:   2 r30: 346 r31: 151 
x  :  35 y  : 265 z  :  20 
Registers used: 26 out of 35 (74.3%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   4 add   :   9 
adiw  :  36 and   :   0 andi  :   8 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   4 break :   0 breq  :  31 
brge  :   7 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  15 
brlt  :   0 brmi  :   1 brne  :  45 brpl  :   1 brsh  :   5 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   1 bst   :   0 call  :  94 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  13 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   8 cpc   :   3 cpi   :  72 cpse  :   0 dec   :   2 des   :   0 
elpm  :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 
ijmp  :   0 in    :  23 inc   :   5 jmp   :  42 ld    :  36 ldd   : 112 
ldi   : 139 lds   :   4 lpm   :  18 lsl   :   0 lsr   :   0 mov   :  43 
movw  :  28 mul   :   5 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 
or    :   0 ori   :   6 out   :  17 pop   :  14 push  :  14 rcall :   7 
ret   :  41 reti  :   3 rjmp  :  96 rol   :   0 ror   :   0 sbc   :   2 
sbci  :   4 sbi   :   1 sbic  :   0 sbis  :   0 sbiw  :  28 sbr   :   0 
sbrc  :   4 sbrs  :  10 sec   :   0 seh   :   0 sei   :   0 sen   :   0 
ser   :   2 ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    : 108 std   :  49 sts   :  11 sub   :   1 subi  :  26 
swap  :   0 tst   :   4 wdr   :   1 
Instructions used: 55 out of 117 (47.0%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000b4a   2832     58   2890  131072   2.2%
[.dseg] 0x000100 0x000578      0    120    120    4351   2.8%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 4 warnings
