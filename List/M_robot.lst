
AVRASM ver. 2.1.30  C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm Thu Jan 30 12:38:58 2020

C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1061): warning: Register r5 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1062): warning: Register r4 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1063): warning: Register r7 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1064): warning: Register r6 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1065): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega128
                 ;Program type             : Application
                 ;Clock frequency          : 14.745600 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : float, width, precision
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 1024 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : No
                 ;global 'const' stored in FLASH: Yes
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4351
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _TIMER2_OVERFLOW=R5
                 	.DEF _PACKET_BUFF_IDX=R4
                 	.DEF _TIMER0_OVERFLOW=R7
                 	.DEF _VELOCITY_BUFF_IDX=R6
                 	.DEF _CHECK_GETS=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0093 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 022a 	JMP  _timer2_comp
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 022e 	JMP  _timer0_comp
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 01f1 	JMP  _usart0_rxc
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 020c 	JMP  _usart1_rxc
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _0x4C:
000046 0000
000047 0000
000048 0000
000049 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00004a 0000
00004b 0000
00004c 0000
00004d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00004e 0000
00004f 0000
000050 0000
000051 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000052 0000
000053 0000
000054 0000
000055 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000056 0000
000057 0000
000058 0000
000059 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00005a 0000
00005b 0000
00005c 0000
00005d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00005e 0000
00005f 0000
000060 0000
000061 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000062 0000
000063 0000
000064 0000
000065 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000066 0000
000067 0000
000068 0000
000069 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00006a 0000
00006b 0000
00006c 0000
00006d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00006e 0000
00006f 0000
000070 0000
000071 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000072 0000
000073 0000
000074 0000
000075 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000076 0000
000077 0000
000078 0000
000079 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00007a 0000
00007b 0000      	.DB  0x0,0x0,0x0,0x0
                 _0x5F:
00007c 0000
00007d 0000
00007e 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0
                 _0x0:
00007f 253c
000080 2c64
000081 6425
000082 003e      	.DB  0x3C,0x25,0x64,0x2C,0x25,0x64,0x3E,0x0
                 _0x2000000:
000083 4e2d
000084 4e41
C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1130): warning: .cseg .db misalignment - padding zero byte
000085 0000      	.DB  0x2D,0x4E,0x41,0x4E,0x0
                 _0x2080060:
C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1132): warning: .cseg .db misalignment - padding zero byte
000086 0001      	.DB  0x1
                 _0x2080000:
000087 4e2d
000088 4e41
000089 4900
00008a 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1135): warning: .cseg .db misalignment - padding zero byte
00008b 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00008c 0006      	.DW  0x06
00008d 0004      	.DW  0x04
00008e 00f8      	.DW  _0x5F*2
                 
00008f 0001      	.DW  0x01
000090 0578      	.DW  __seed_G104
000091 010c      	.DW  _0x2080060*2
                 
                 _0xFFFFFFFF:
000092 0000      	.DW  0
                 
                 __RESET:
000093 94f8      	CLI
000094 27ee      	CLR  R30
000095 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000096 e0f1      	LDI  R31,1
000097 bff5      	OUT  MCUCR,R31
000098 bfe5      	OUT  MCUCR,R30
000099 93e0 006c 	STS  XMCRB,R30
                 
                 ;DISABLE WATCHDOG
00009b e1f8      	LDI  R31,0x18
00009c bdf1      	OUT  WDTCR,R31
00009d bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
00009e e08d      	LDI  R24,(14-2)+1
00009f e0a2      	LDI  R26,2
0000a0 27bb      	CLR  R27
                 __CLEAR_REG:
0000a1 93ed      	ST   X+,R30
0000a2 958a      	DEC  R24
0000a3 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000a4 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000a5 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000a6 e0a0      	LDI  R26,LOW(__SRAM_START)
0000a7 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
0000a8 93ed      	ST   X+,R30
0000a9 9701      	SBIW R24,1
0000aa f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000ab e1e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000ac e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000ad 9185      	LPM  R24,Z+
0000ae 9195      	LPM  R25,Z+
0000af 9700      	SBIW R24,0
0000b0 f061      	BREQ __GLOBAL_INI_END
0000b1 91a5      	LPM  R26,Z+
0000b2 91b5      	LPM  R27,Z+
0000b3 9005      	LPM  R0,Z+
0000b4 9015      	LPM  R1,Z+
0000b5 01bf      	MOVW R22,R30
0000b6 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000b7 9005      	LPM  R0,Z+
0000b8 920d      	ST   X+,R0
0000b9 9701      	SBIW R24,1
0000ba f7e1      	BRNE __GLOBAL_INI_LOOP
0000bb 01fb      	MOVW R30,R22
0000bc cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
0000bd bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000be efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000bf bfed      	OUT  SPL,R30
0000c0 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000c1 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000c2 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000c3 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000c4 940c 0234 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdio.h>
                 ;#include <delay.h>
                 ;
                 ;#define bps_115200 0x0007
                 ;
                 ;#define POLYNORMIAL 0xA001
                 ;
                 ;#define CHARACTER3_5 25
                 ;#define TRUE 0
                 ;#define FALSE 1
                 ;
                 ;#define R 0x01
                 ;#define L 0x02
                 ;#define START 1
                 ;#define STOP 2
                 ;
                 ;#define Length 0.29
                 ;#define Gearratio 25
                 ;
                 ;unsigned char TIMER2_OVERFLOW = 0;
                 ;unsigned char PACKET_BUFF[100] = {0,};
                 ;unsigned char PACKET_BUFF_IDX = 0;
                 ;
                 ;unsigned char TIMER0_OVERFLOW = 0;
                 ;unsigned char VELOCITY_BUFF[20] = {0,};
                 ;unsigned char VELOCITY_BUFF_IDX = 0;
                 ;unsigned char CHECK_GETS = 0;
                 ;
                 ;void usart1_init(int bps)
                 ; 0000 001F {
                 
                 	.CSEG
                 _usart1_init:
                 ; 0000 0020     UCSR1A = 0x00;
                 ;	bps -> Y+0
0000c6 e0e0      	LDI  R30,LOW(0)
0000c7 93e0 009b 	STS  155,R30
                 ; 0000 0021     UCSR1B = (1<<RXEN1)|(1<<TXEN1)|(1<<RXCIE1); // RXCIE1 bit is recevie interrupt allow
0000c9 e9e8      	LDI  R30,LOW(152)
0000ca 93e0 009a 	STS  154,R30
                 ; 0000 0022     UCSR1C = (1<<UCSZ11)|(1<<UCSZ10);
0000cc e0e6      	LDI  R30,LOW(6)
0000cd 93e0 009d 	STS  157,R30
                 ; 0000 0023     UCSR1C &= ~(1<<UMSEL1);
0000cf 91e0 009d 	LDS  R30,157
0000d1 7bef      	ANDI R30,0xBF
0000d2 93e0 009d 	STS  157,R30
                 ; 0000 0024 
                 ; 0000 0025     UBRR1H = (unsigned char)((bps>>8)  & 0x00ff);
0000d4 81e8      	LD   R30,Y
0000d5 81f9      	LDD  R31,Y+1
0000d6 940e 06ba 	CALL __ASRW8
0000d8 93e0 0098 	STS  152,R30
                 ; 0000 0026     UBRR1L = (unsigned char)(bps & 0x00ff);
0000da 81e8      	LD   R30,Y
0000db 93e0 0099 	STS  153,R30
                 ; 0000 0027 }
0000dd c014      	RJMP _0x20A0004
                 ;
                 ;void usart0_init(int bps)
                 ; 0000 002A {
                 _usart0_init:
                 ; 0000 002B     UCSR0A = 0x00;
                 ;	bps -> Y+0
0000de e0e0      	LDI  R30,LOW(0)
0000df b9eb      	OUT  0xB,R30
                 ; 0000 002C     UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0); // RXCIE1 bit is recevie interrupt allow
0000e0 e9e8      	LDI  R30,LOW(152)
0000e1 b9ea      	OUT  0xA,R30
                 ; 0000 002D     UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
0000e2 e0e6      	LDI  R30,LOW(6)
0000e3 93e0 0095 	STS  149,R30
                 ; 0000 002E     UCSR0C &= ~(1<<UMSEL0);
0000e5 91e0 0095 	LDS  R30,149
0000e7 7bef      	ANDI R30,0xBF
0000e8 93e0 0095 	STS  149,R30
                 ; 0000 002F 
                 ; 0000 0030     UBRR0H = (unsigned char)((bps>>8)  & 0x00ff);
0000ea 81e8      	LD   R30,Y
0000eb 81f9      	LDD  R31,Y+1
0000ec 940e 06ba 	CALL __ASRW8
0000ee 93e0 0090 	STS  144,R30
                 ; 0000 0031     UBRR0L = (unsigned char)(bps & 0x00ff);
0000f0 81e8      	LD   R30,Y
0000f1 b9e9      	OUT  0x9,R30
                 ; 0000 0032 }
                 _0x20A0004:
0000f2 9622      	ADIW R28,2
0000f3 9508      	RET
                 ;
                 ;void timer2_init(void)
                 ; 0000 0035 {
                 _timer2_init:
                 ; 0000 0036     //TIMER2
                 ; 0000 0037     TCCR2 = (1<<WGM21)|(1<<CS22)|(1<<CS20);// CTC모드, 1024분주
0000f4 e0ed      	LDI  R30,LOW(13)
0000f5 bde5      	OUT  0x25,R30
                 ; 0000 0038 
                 ; 0000 0039     OCR2 = 40;
0000f6 e2e8      	LDI  R30,LOW(40)
0000f7 bde3      	OUT  0x23,R30
                 ; 0000 003A     TIMSK = (1<<OCIE2)|(1<<OCIE0);
0000f8 e8e2      	LDI  R30,LOW(130)
0000f9 bfe7      	OUT  0x37,R30
                 ; 0000 003B     //TIMSK = (1<<OCIE2);
                 ; 0000 003C }
0000fa 9508      	RET
                 ;void timer0_init(void)
                 ; 0000 003E {
                 _timer0_init:
                 ; 0000 003F     TCCR0 = (1<<WGM01)|(1<<CS02)|(1<<CS01)|(1<<CS00); // CTC모드, 1024분주
0000fb e0ef      	LDI  R30,LOW(15)
0000fc bfe3      	OUT  0x33,R30
                 ; 0000 0040     OCR0 =
                 ; 0000 0041     TIMSK = (1<<OCIE2)|(1<<OCIE0);
0000fd e8e2      	LDI  R30,LOW(130)
0000fe bfe7      	OUT  0x37,R30
0000ff bfe1      	OUT  0x31,R30
                 ; 0000 0042 }
000100 9508      	RET
                 ;
                 ;void putch_USART1(char data)
                 ; 0000 0045 {
                 ; 0000 0046     while(!(UCSR1A & (1<<UDRE1))); // UDRE flag is USART Data Register Empty
                 ;	data -> Y+0
                 ; 0000 0047     UDR1 = data;
                 ; 0000 0048 }
                 ;
                 ;//USART 문자열 송신
                 ;void puts_USART1(char *str,char IDX)
                 ; 0000 004C {
                 ; 0000 004D     unsigned char i = 0;
                 ; 0000 004E 
                 ; 0000 004F     for(i = 0;i<IDX;i++)
                 ;	*str -> Y+2
                 ;	IDX -> Y+1
                 ;	i -> R17
                 ; 0000 0050     {
                 ; 0000 0051         putch_USART1(*(str+i));
                 ; 0000 0052     }
                 ; 0000 0053 
                 ; 0000 0054     for(i = 0; i<IDX; i++)
                 ; 0000 0055     {
                 ; 0000 0056         *(str+i) = 0;
                 ; 0000 0057     }
                 ; 0000 0058 }
                 ;
                 ;// void puts_USART1(char *str,char IDX)
                 ;// {
                 ;//     unsigned char i = 0;
                 ;
                 ;//     while(*str != 0)
                 ;//     {
                 ;//         putch_USART1(*(str+i));
                 ;//         i++;
                 ;//     }
                 ;
                 ;//     for(i = 0; i<IDX; i++)
                 ;//     {
                 ;//         *(str+i) = 0;
                 ;//     }
                 ;// }
                 ;
                 ;void puts_Modbus1(char *str,char IDX)
                 ; 0000 006B {
                 ; 0000 006C     unsigned char i = 0;
                 ; 0000 006D     UCSR0B &= ~(1<<RXEN0);
                 ;	*str -> Y+2
                 ;	IDX -> Y+1
                 ;	i -> R17
                 ; 0000 006E     if(TIMER2_OVERFLOW>0)
                 ; 0000 006F     {
                 ; 0000 0070         for(i = 0;i<IDX-1;i++) putch_USART1(*(str+i));
                 ; 0000 0072 for(i = 0; i<IDX; i++) *(str+i) = 0;
                 ; 0000 0073 }
                 ; 0000 0074     UCSR0B |= (1<<RXEN0);
                 ; 0000 0075 }
                 ;
                 ;void putch_USART0(char data)
                 ; 0000 0078 {
                 _putch_USART0:
                 ; 0000 0079     while(!(UCSR0A & (1<<UDRE0))); // UDRE flag is USART Data Register Empty
                 ;	data -> Y+0
                 _0x13:
000101 9b5d      	SBIS 0xB,5
000102 cffe      	RJMP _0x13
                 ; 0000 007A     UDR0 = data;
000103 81e8      	LD   R30,Y
000104 b9ec      	OUT  0xC,R30
                 ; 0000 007B }
000105 9621      	ADIW R28,1
000106 9508      	RET
                 ;
                 ;void puts_USART0(char *str,char IDX)
                 ; 0000 007E {
                 ; 0000 007F     //PACKET_BUFF[PACKET_BUFF_IDX] = 0;
                 ; 0000 0080     unsigned char i = 0;
                 ; 0000 0081     for(i = 0;i<IDX-1;i++)
                 ;	*str -> Y+2
                 ;	IDX -> Y+1
                 ;	i -> R17
                 ; 0000 0082     {
                 ; 0000 0083         putch_USART1(*(str+i));
                 ; 0000 0084     }
                 ; 0000 0085 
                 ; 0000 0086     for(i = 0; i<IDX; i++)
                 ; 0000 0087     {
                 ; 0000 0088         *(str+i) = 0;
                 ; 0000 0089     }
                 ; 0000 008A }
                 ;
                 ;unsigned short CRC16(unsigned char *puchMsg, int usDataLen)
                 ; 0000 008D {
                 _CRC16:
                 ; 0000 008E     int i;
                 ; 0000 008F     unsigned short crc, flag;
                 ; 0000 0090     crc = 0xffff;
000107 940e 06f9 	CALL __SAVELOCR6
                 ;	*puchMsg -> Y+8
                 ;	usDataLen -> Y+6
                 ;	i -> R16,R17
                 ;	crc -> R18,R19
                 ;	flag -> R20,R21
                +
000109 ef2f     +LDI R18 , LOW ( - 1 )
00010a ef3f     +LDI R19 , HIGH ( - 1 )
                 	__GETWRN 18,19,-1
                 ; 0000 0091 
                 ; 0000 0092     while(usDataLen--){
                 _0x1C:
00010b 81ee      	LDD  R30,Y+6
00010c 81ff      	LDD  R31,Y+6+1
00010d 9731      	SBIW R30,1
00010e 83ee      	STD  Y+6,R30
00010f 83ff      	STD  Y+6+1,R31
000110 9631      	ADIW R30,1
000111 f0f9      	BREQ _0x1E
                 ; 0000 0093         crc ^= *puchMsg++;
000112 85a8      	LDD  R26,Y+8
000113 85b9      	LDD  R27,Y+8+1
000114 91ed      	LD   R30,X+
000115 87a8      	STD  Y+8,R26
000116 87b9      	STD  Y+8+1,R27
000117 e0f0      	LDI  R31,0
                +
000118 272e     +EOR R18 , R30
000119 273f     +EOR R19 , R31
                 	__EORWRR 18,19,30,31
                 ; 0000 0094 
                 ; 0000 0095         for (i=0; i<8; i++){
                +
00011a e000     +LDI R16 , LOW ( 0 )
00011b e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x20:
                +
00011c 3008     +CPI R16 , LOW ( 8 )
00011d e0e0     +LDI R30 , HIGH ( 8 )
00011e 071e     +CPC R17 , R30
                 	__CPWRN 16,17,8
00011f f484      	BRGE _0x21
                 ; 0000 0096             flag = crc & 0x0001;
000120 01f9      	MOVW R30,R18
000121 70e1      	ANDI R30,LOW(0x1)
000122 70f0      	ANDI R31,HIGH(0x1)
000123 01af      	MOVW R20,R30
                 ; 0000 0097             crc >>= 1;
000124 9536      	LSR  R19
000125 9527      	ROR  R18
                 ; 0000 0098             if(flag) crc ^= POLYNORMIAL;
000126 2e04      	MOV  R0,R20
000127 2a05      	OR   R0,R21
000128 f021      	BREQ _0x22
000129 e0e1      	LDI  R30,LOW(40961)
00012a eaf0      	LDI  R31,HIGH(40961)
                +
00012b 272e     +EOR R18 , R30
00012c 273f     +EOR R19 , R31
                 	__EORWRR 18,19,30,31
                 ; 0000 0099         }
                 _0x22:
                +
00012d 5f0f     +SUBI R16 , LOW ( - 1 )
00012e 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00012f cfec      	RJMP _0x20
                 _0x21:
                 ; 0000 009A     }
000130 cfda      	RJMP _0x1C
                 _0x1E:
                 ; 0000 009B     return crc;
000131 01f9      	MOVW R30,R18
000132 940e 0700 	CALL __LOADLOCR6
000134 962a      	ADIW R28,10
000135 9508      	RET
                 ; 0000 009C }
                 ;
                 ;int RTU_WriteOperate0(char device_address,int starting_address,int data)
                 ; 0000 009F {
                 _RTU_WriteOperate0:
                 ; 0000 00A0     char protocol[8];
                 ; 0000 00A1     unsigned short crc16;
                 ; 0000 00A2     int i=0;
                 ; 0000 00A3     //PACKET_BUFF_IDX = 0;
                 ; 0000 00A4 
                 ; 0000 00A5     protocol[0]=device_address;
000136 9728      	SBIW R28,8
000137 940e 06fb 	CALL __SAVELOCR4
                 ;	device_address -> Y+16
                 ;	starting_address -> Y+14
                 ;	data -> Y+12
                 ;	protocol -> Y+4
                 ;	crc16 -> R16,R17
                 ;	i -> R18,R19
                +
000139 e020     +LDI R18 , LOW ( 0 )
00013a e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
00013b 89e8      	LDD  R30,Y+16
00013c 83ec      	STD  Y+4,R30
                 ; 0000 00A6     protocol[1]=0x06;
00013d e0e6      	LDI  R30,LOW(6)
00013e 83ed      	STD  Y+5,R30
                 ; 0000 00A7     protocol[2]=((starting_address>>8)  & 0x00ff);
00013f 85ee      	LDD  R30,Y+14
000140 85ff      	LDD  R31,Y+14+1
000141 940e 06ba 	CALL __ASRW8
000143 83ee      	STD  Y+6,R30
                 ; 0000 00A8     protocol[3]=((starting_address)     & 0x00ff);
000144 85ee      	LDD  R30,Y+14
000145 83ef      	STD  Y+7,R30
                 ; 0000 00A9     protocol[4]=((data>>8)              & 0x00ff);
000146 85ec      	LDD  R30,Y+12
000147 85fd      	LDD  R31,Y+12+1
000148 940e 06ba 	CALL __ASRW8
00014a 87e8      	STD  Y+8,R30
                 ; 0000 00AA     protocol[5]=((data)                 & 0x00ff);
00014b 85ec      	LDD  R30,Y+12
00014c 87e9      	STD  Y+9,R30
                 ; 0000 00AB     protocol[6]=0;
00014d e0e0      	LDI  R30,LOW(0)
00014e 87ea      	STD  Y+10,R30
                 ; 0000 00AC     protocol[7]=0;
00014f 87eb      	STD  Y+11,R30
                 ; 0000 00AD 
                 ; 0000 00AE     crc16 = CRC16(protocol, 6);
000150 01fe      	MOVW R30,R28
000151 9634      	ADIW R30,4
000152 93fa      	ST   -Y,R31
000153 93ea      	ST   -Y,R30
000154 e0e6      	LDI  R30,LOW(6)
000155 e0f0      	LDI  R31,HIGH(6)
000156 93fa      	ST   -Y,R31
000157 93ea      	ST   -Y,R30
000158 dfae      	RCALL _CRC16
000159 018f      	MOVW R16,R30
                 ; 0000 00AF 
                 ; 0000 00B0     protocol[6] = (unsigned char)((crc16>>0) & 0x00ff);
00015a 01f8      	MOVW R30,R16
00015b 87ea      	STD  Y+10,R30
                 ; 0000 00B1     protocol[7] = (unsigned char)((crc16>>8) & 0x00ff);
                +
00015c 871b     +STD Y + 11 , R17
                 	__PUTBSR 17,11
                 ; 0000 00B2 
                 ; 0000 00B3 
                 ; 0000 00B4     for(i=0;i<8;i++)
                +
00015d e020     +LDI R18 , LOW ( 0 )
00015e e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x24:
                +
00015f 3028     +CPI R18 , LOW ( 8 )
000160 e0e0     +LDI R30 , HIGH ( 8 )
000161 073e     +CPC R19 , R30
                 	__CPWRN 18,19,8
000162 f454      	BRGE _0x25
                 ; 0000 00B5     {
                 ; 0000 00B6         putch_USART0(*(protocol+i));
000163 01de      	MOVW R26,R28
000164 9614      	ADIW R26,4
000165 0fa2      	ADD  R26,R18
000166 1fb3      	ADC  R27,R19
000167 91ec      	LD   R30,X
000168 93ea      	ST   -Y,R30
000169 df97      	RCALL _putch_USART0
                 ; 0000 00B7     }
                +
00016a 5f2f     +SUBI R18 , LOW ( - 1 )
00016b 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00016c cff2      	RJMP _0x24
                 _0x25:
                 ; 0000 00B8 }
00016d 940e 0702 	CALL __LOADLOCR4
00016f 9661      	ADIW R28,17
000170 9508      	RET
                 ;
                 ;int RTU_WriteOperate1(char device_address,int starting_address,int data)
                 ; 0000 00BB {
                 ; 0000 00BC     char protocol[8];
                 ; 0000 00BD     unsigned short crc16;
                 ; 0000 00BE     int i=0;
                 ; 0000 00BF    // PACKET_BUFF_IDX = 0;
                 ; 0000 00C0 
                 ; 0000 00C1     protocol[0]=device_address;
                 ;	device_address -> Y+16
                 ;	starting_address -> Y+14
                 ;	data -> Y+12
                 ;	protocol -> Y+4
                 ;	crc16 -> R16,R17
                 ;	i -> R18,R19
                 ; 0000 00C2     protocol[1]=0x06;
                 ; 0000 00C3     protocol[2]=((starting_address>>8)  & 0x00ff);
                 ; 0000 00C4     protocol[3]=((starting_address)     & 0x00ff);
                 ; 0000 00C5     protocol[4]=((data>>8)              & 0x00ff);
                 ; 0000 00C6     protocol[5]=((data)                 & 0x00ff);
                 ; 0000 00C7     protocol[6]=0;
                 ; 0000 00C8     protocol[7]=0;
                 ; 0000 00C9 
                 ; 0000 00CA     crc16 = CRC16(protocol, 6);
                 ; 0000 00CB 
                 ; 0000 00CC     protocol[6] = (unsigned char)((crc16>>0) & 0x00ff);
                 ; 0000 00CD     protocol[7] = (unsigned char)((crc16>>8) & 0x00ff);
                 ; 0000 00CE 
                 ; 0000 00CF 
                 ; 0000 00D0     for(i=0;i<8;i++)
                 ; 0000 00D1     {
                 ; 0000 00D2         putch_USART1(*(protocol+i));
                 ; 0000 00D3     }
                 ; 0000 00D4 }
                 ;
                 ;int RTU_ReedOperate0(char device_address,int starting_address,int data)
                 ; 0000 00D7 {
                 ; 0000 00D8     char protocol[8];
                 ; 0000 00D9     unsigned short crc16;
                 ; 0000 00DA     int i=0;
                 ; 0000 00DB     //PACKET_BUFF_IDX = 0;
                 ; 0000 00DC 
                 ; 0000 00DD     protocol[0]=device_address;
                 ;	device_address -> Y+16
                 ;	starting_address -> Y+14
                 ;	data -> Y+12
                 ;	protocol -> Y+4
                 ;	crc16 -> R16,R17
                 ;	i -> R18,R19
                 ; 0000 00DE     protocol[1]=0x03;
                 ; 0000 00DF     protocol[2]=((starting_address>>8)  & 0x00ff);
                 ; 0000 00E0     protocol[3]=((starting_address)     & 0x00ff);
                 ; 0000 00E1     protocol[4]=((data>>8)              & 0x00ff);
                 ; 0000 00E2     protocol[5]=((data)                 & 0x00ff);
                 ; 0000 00E3     protocol[6]=0;
                 ; 0000 00E4     protocol[7]=0;
                 ; 0000 00E5 
                 ; 0000 00E6     crc16 = CRC16(protocol, 6);
                 ; 0000 00E7 
                 ; 0000 00E8     protocol[6] = (unsigned char)((crc16>>0) & 0x00ff);
                 ; 0000 00E9     protocol[7] = (unsigned char)((crc16>>8) & 0x00ff);
                 ; 0000 00EA 
                 ; 0000 00EB 
                 ; 0000 00EC     for(i=0;i<8;i++)
                 ; 0000 00ED     {
                 ; 0000 00EE         putch_USART0(*(protocol+i));
                 ; 0000 00EF     }
                 ; 0000 00F0 }
                 ;
                 ;void Make_MSPEED(float* _velocity, float* _angularV, int* R_RPM, int* L_RPM)
                 ; 0000 00F3 {
                 _Make_MSPEED:
                 ; 0000 00F4     float VelocityR = 0;
                 ; 0000 00F5     float VelocityL = 0;
                 ; 0000 00F6 
                 ; 0000 00F7     if(*_velocity>=0){
000171 9728      	SBIW R28,8
000172 e0e0      	LDI  R30,LOW(0)
000173 83e8      	ST   Y,R30
000174 83e9      	STD  Y+1,R30
000175 83ea      	STD  Y+2,R30
000176 83eb      	STD  Y+3,R30
000177 83ec      	STD  Y+4,R30
000178 83ed      	STD  Y+5,R30
000179 83ee      	STD  Y+6,R30
00017a 83ef      	STD  Y+7,R30
                 ;	*_velocity -> Y+14
                 ;	*_angularV -> Y+12
                 ;	*R_RPM -> Y+10
                 ;	*L_RPM -> Y+8
                 ;	VelocityR -> Y+4
                 ;	VelocityL -> Y+0
00017b 940e 0497 	CALL SUBOPT_0x0
00017d 2377      	TST  R23
00017e f042      	BRMI _0x2C
                 ; 0000 00F8         *_angularV = -(*_angularV);
00017f 940e 049c 	CALL SUBOPT_0x1
000181 940e 0521 	CALL __ANEGF1
000183 85ac      	LDD  R26,Y+12
000184 85bd      	LDD  R27,Y+12+1
000185 940e 06d6 	CALL __PUTDP1
                 ; 0000 00F9     }
                 ; 0000 00FA 
                 ; 0000 00FB     VelocityR = *_velocity+(*_angularV*Length)/4;
                 _0x2C:
000187 940e 0497 	CALL SUBOPT_0x0
000189 937f      	PUSH R23
00018a 936f      	PUSH R22
00018b 93ff      	PUSH R31
00018c 93ef      	PUSH R30
00018d 940e 049c 	CALL SUBOPT_0x1
00018f 940e 04a1 	CALL SUBOPT_0x2
000191 91af      	POP  R26
000192 91bf      	POP  R27
000193 918f      	POP  R24
000194 919f      	POP  R25
000195 940e 05c7 	CALL __ADDF12
                +
000197 83ec     +STD Y + 4 , R30
000198 83fd     +STD Y + 4 + 1 , R31
000199 836e     +STD Y + 4 + 2 , R22
00019a 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
                 ; 0000 00FC     VelocityL = *_velocity-(*_angularV*Length)/4;
00019b 940e 0497 	CALL SUBOPT_0x0
00019d 937f      	PUSH R23
00019e 936f      	PUSH R22
00019f 93ff      	PUSH R31
0001a0 93ef      	PUSH R30
0001a1 940e 049c 	CALL SUBOPT_0x1
0001a3 940e 04a1 	CALL SUBOPT_0x2
0001a5 91af      	POP  R26
0001a6 91bf      	POP  R27
0001a7 918f      	POP  R24
0001a8 919f      	POP  R25
0001a9 940e 06ec 	CALL __SWAPD12
0001ab 940e 05c0 	CALL __SUBF12
0001ad 940e 06e0 	CALL __PUTD1S0
                 ; 0000 00FD 
                 ; 0000 00FE     *R_RPM = (int)(152.788*VelocityR*Gearratio);
                +
0001af 81ec     +LDD R30 , Y + 4
0001b0 81fd     +LDD R31 , Y + 4 + 1
0001b1 816e     +LDD R22 , Y + 4 + 2
0001b2 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
0001b3 940e 04b0 	CALL SUBOPT_0x3
0001b5 85aa      	LDD  R26,Y+10
0001b6 85bb      	LDD  R27,Y+10+1
0001b7 93ed      	ST   X+,R30
0001b8 93fc      	ST   X,R31
                 ; 0000 00FF     *L_RPM = (int)(152.788*VelocityL*Gearratio);
0001b9 940e 06db 	CALL __GETD1S0
0001bb 940e 04b0 	CALL SUBOPT_0x3
0001bd 85a8      	LDD  R26,Y+8
0001be 85b9      	LDD  R27,Y+8+1
0001bf 93ed      	ST   X+,R30
0001c0 93fc      	ST   X,R31
                 ; 0000 0100 
                 ; 0000 0101     if( ((*R_RPM<300)&&(*R_RPM>-300))&&((*L_RPM<300)&&(*L_RPM>-300))){
0001c1 85aa      	LDD  R26,Y+10
0001c2 85bb      	LDD  R27,Y+10+1
0001c3 940e 06cc 	CALL __GETW1P
0001c5 32ec      	CPI  R30,LOW(0x12C)
0001c6 e0a1      	LDI  R26,HIGH(0x12C)
0001c7 07fa      	CPC  R31,R26
0001c8 f434      	BRGE _0x2E
0001c9 01df      	MOVW R26,R30
0001ca ede4      	LDI  R30,LOW(65236)
0001cb effe      	LDI  R31,HIGH(65236)
0001cc 17ea      	CP   R30,R26
0001cd 07fb      	CPC  R31,R27
0001ce f00c      	BRLT _0x2F
                 _0x2E:
0001cf c014      	RJMP _0x30
                 _0x2F:
0001d0 85a8      	LDD  R26,Y+8
0001d1 85b9      	LDD  R27,Y+8+1
0001d2 940e 06cc 	CALL __GETW1P
0001d4 32ec      	CPI  R30,LOW(0x12C)
0001d5 e0a1      	LDI  R26,HIGH(0x12C)
0001d6 07fa      	CPC  R31,R26
0001d7 f454      	BRGE _0x31
0001d8 85a8      	LDD  R26,Y+8
0001d9 85b9      	LDD  R27,Y+8+1
0001da 940e 06cc 	CALL __GETW1P
0001dc 01df      	MOVW R26,R30
0001dd ede4      	LDI  R30,LOW(65236)
0001de effe      	LDI  R31,HIGH(65236)
0001df 17ea      	CP   R30,R26
0001e0 07fb      	CPC  R31,R27
0001e1 f00c      	BRLT _0x32
                 _0x31:
0001e2 c001      	RJMP _0x30
                 _0x32:
0001e3 c001      	RJMP _0x33
                 _0x30:
0001e4 c00a      	RJMP _0x2D
                 _0x33:
                 ; 0000 0102         *R_RPM = 0;
0001e5 85aa      	LDD  R26,Y+10
0001e6 85bb      	LDD  R27,Y+10+1
0001e7 e0e0      	LDI  R30,LOW(0)
0001e8 e0f0      	LDI  R31,HIGH(0)
0001e9 93ed      	ST   X+,R30
0001ea 93fc      	ST   X,R31
                 ; 0000 0103         *L_RPM = 0;
0001eb 85a8      	LDD  R26,Y+8
0001ec 85b9      	LDD  R27,Y+8+1
0001ed 93ed      	ST   X+,R30
0001ee 93fc      	ST   X,R31
                 ; 0000 0104     }
                 ; 0000 0105 }
                 _0x2D:
0001ef 9660      	ADIW R28,16
0001f0 9508      	RET
                 ;void oper_Disapath(int velocityR, int velocityL, int p_velocity_R, int p_velocity_L)
                 ; 0000 0107 {
                 ; 0000 0108     if((p_velocity_R==0) && (velocityR != 0))
                 ;	velocityR -> Y+6
                 ;	velocityL -> Y+4
                 ;	p_velocity_R -> Y+2
                 ;	p_velocity_L -> Y+0
                 ; 0000 0109     {
                 ; 0000 010A         RTU_WriteOperate0(R,(unsigned int)120,START);
                 ; 0000 010B         delay_ms(5);
                 ; 0000 010C     }
                 ; 0000 010D     else if((p_velocity_R!=0) && (velocityR == 0))
                 ; 0000 010E     {
                 ; 0000 010F         RTU_WriteOperate0(R,(unsigned int)120,STOP);
                 ; 0000 0110         delay_ms(5);
                 ; 0000 0111     }
                 ; 0000 0112     if((p_velocity_L==0) && (velocityL != 0))
                 ; 0000 0113     {
                 ; 0000 0114         RTU_WriteOperate0(L,(unsigned int)120,START);
                 ; 0000 0115         delay_ms(5);
                 ; 0000 0116     }
                 ; 0000 0117     else if((p_velocity_L!=0) && (velocityL == 0))
                 ; 0000 0118     {
                 ; 0000 0119         RTU_WriteOperate0(L,(unsigned int)120,STOP);
                 ; 0000 011A         delay_ms(5);
                 ; 0000 011B     }
                 ; 0000 011C }
                 ;
                 ;interrupt [USART0_RXC] void usart0_rxc(void)
                 ; 0000 011F {
                 _usart0_rxc:
0001f1 93aa      	ST   -Y,R26
0001f2 93ba      	ST   -Y,R27
0001f3 93ea      	ST   -Y,R30
0001f4 b7ef      	IN   R30,SREG
0001f5 93ea      	ST   -Y,R30
                 ; 0000 0120     if(((TCNT2 < CHARACTER3_5) && (TIMER2_OVERFLOW == 0)) || PACKET_BUFF_IDX == 0)
0001f6 b5e4      	IN   R30,0x24
0001f7 31e9      	CPI  R30,LOW(0x19)
0001f8 f418      	BRSH _0x43
0001f9 e0e0      	LDI  R30,LOW(0)
0001fa 15e5      	CP   R30,R5
0001fb f019      	BREQ _0x45
                 _0x43:
0001fc e0e0      	LDI  R30,LOW(0)
0001fd 15e4      	CP   R30,R4
0001fe f419      	BRNE _0x42
                 _0x45:
                 ; 0000 0121     {
                 ; 0000 0122         PACKET_BUFF[PACKET_BUFF_IDX] = UDR0;
0001ff 940e 04bf 	CALL SUBOPT_0x4
                 ; 0000 0123         PACKET_BUFF_IDX++;
                 ; 0000 0124         TCNT2 = 0;
                 ; 0000 0125     }
                 ; 0000 0126     else {
000201 c004      	RJMP _0x47
                 _0x42:
                 ; 0000 0127         PACKET_BUFF_IDX = 0;
000202 2444      	CLR  R4
                 ; 0000 0128         PACKET_BUFF[PACKET_BUFF_IDX] = UDR0;
000203 940e 04bf 	CALL SUBOPT_0x4
                 ; 0000 0129         PACKET_BUFF_IDX++;
                 ; 0000 012A         TCNT2 = 0;
                 ; 0000 012B         TIMER2_OVERFLOW = 0;
000205 2455      	CLR  R5
                 ; 0000 012C     }
                 _0x47:
                 ; 0000 012D }
000206 91e9      	LD   R30,Y+
000207 bfef      	OUT  SREG,R30
000208 91e9      	LD   R30,Y+
000209 91b9      	LD   R27,Y+
00020a 91a9      	LD   R26,Y+
00020b 9518      	RETI
                 ;
                 ;interrupt [USART1_RXC] void usart1_rxc(void)
                 ; 0000 0130 {
                 _usart1_rxc:
00020c 93ea      	ST   -Y,R30
00020d 93fa      	ST   -Y,R31
00020e b7ef      	IN   R30,SREG
00020f 93ea      	ST   -Y,R30
                 ; 0000 0131     unsigned char i = 0;
                 ; 0000 0132     i = UDR1;
000210 931a      	ST   -Y,R17
                 ;	i -> R17
000211 e010      	LDI  R17,0
000212 9110 009c 	LDS  R17,156
                 ; 0000 0133     if(i == '<'){
000214 331c      	CPI  R17,60
000215 f431      	BRNE _0x48
                 ; 0000 0134         VELOCITY_BUFF_IDX = 0;
000216 2466      	CLR  R6
                 ; 0000 0135         VELOCITY_BUFF[VELOCITY_BUFF_IDX] = i;
000217 940e 04c9 	CALL SUBOPT_0x5
                 ; 0000 0136         VELOCITY_BUFF_IDX++;
                 ; 0000 0137         CHECK_GETS = 1;
000219 e0e1      	LDI  R30,LOW(1)
00021a 2e9e      	MOV  R9,R30
                 ; 0000 0138     }
                 ; 0000 0139     else if(i == '>'){
00021b c008      	RJMP _0x49
                 _0x48:
00021c 331e      	CPI  R17,62
00021d f421      	BRNE _0x4A
                 ; 0000 013A         VELOCITY_BUFF[VELOCITY_BUFF_IDX] = i;
00021e 940e 04c9 	CALL SUBOPT_0x5
                 ; 0000 013B         VELOCITY_BUFF_IDX++;
                 ; 0000 013C         CHECK_GETS = 0;
000220 2499      	CLR  R9
                 ; 0000 013D     }
                 ; 0000 013E     else{
000221 c002      	RJMP _0x4B
                 _0x4A:
                 ; 0000 013F         VELOCITY_BUFF[VELOCITY_BUFF_IDX] = i;
000222 940e 04c9 	CALL SUBOPT_0x5
                 ; 0000 0140         VELOCITY_BUFF_IDX++;
                 ; 0000 0141     }
                 _0x4B:
                 _0x49:
                 ; 0000 0142 }
000224 9119      	LD   R17,Y+
000225 91e9      	LD   R30,Y+
000226 bfef      	OUT  SREG,R30
000227 91f9      	LD   R31,Y+
000228 91e9      	LD   R30,Y+
000229 9518      	RETI
                 ;
                 ;interrupt [TIM2_COMP] void timer2_comp(void)
                 ; 0000 0145 {
                 _timer2_comp:
00022a 93ea      	ST   -Y,R30
00022b b7ef      	IN   R30,SREG
                 ; 0000 0146     TIMER2_OVERFLOW++;
00022c 9453      	INC  R5
                 ; 0000 0147 }
00022d c003      	RJMP _0x5E
                 ;
                 ;interrupt [TIM0_COMP] void timer0_comp(void)
                 ; 0000 014A {
                 _timer0_comp:
00022e 93ea      	ST   -Y,R30
00022f b7ef      	IN   R30,SREG
                 ; 0000 014B     TIMER0_OVERFLOW++;
000230 9473      	INC  R7
                 ; 0000 014C }
                 _0x5E:
000231 bfef      	OUT  SREG,R30
000232 91e9      	LD   R30,Y+
000233 9518      	RETI
                 ;
                 ;void main(void)
                 ; 0000 014F {
                 _main:
                 ; 0000 0150     float a_buff;
                 ; 0000 0151     float v_buff;
                 ; 0000 0152 
                 ; 0000 0153     int velocity = 0;
                 ; 0000 0154     int angularV = 0;
                 ; 0000 0155     int velocity_R = 0;
                 ; 0000 0156     int velocity_L = 0;
                 ; 0000 0157     int past_velocity_R = 0;
                 ; 0000 0158     int past_velocity_L = 0;
                 ; 0000 0159 
                 ; 0000 015A     unsigned char mode_R = 0;
                 ; 0000 015B     unsigned char mode_L = 0;
                 ; 0000 015C     unsigned char BUFF[100] = {0,};
                 ; 0000 015D 
                 ; 0000 015E     usart1_init(bps_115200);
000234 97ef      	SBIW R28,63
000235 97e5      	SBIW R28,53
000236 e68c      	LDI  R24,108
000237 e0a0      	LDI  R26,LOW(0)
000238 e0b0      	LDI  R27,HIGH(0)
000239 e8ec      	LDI  R30,LOW(_0x4C*2)
00023a e0f0      	LDI  R31,HIGH(_0x4C*2)
00023b 940e 0707 	CALL __INITLOCB
                 ;	a_buff -> Y+112
                 ;	v_buff -> Y+108
                 ;	velocity -> R16,R17
                 ;	angularV -> R18,R19
                 ;	velocity_R -> R20,R21
                 ;	velocity_L -> Y+106
                 ;	past_velocity_R -> Y+104
                 ;	past_velocity_L -> Y+102
                 ;	mode_R -> Y+101
                 ;	mode_L -> Y+100
                 ;	BUFF -> Y+0
                +
00023d e000     +LDI R16 , LOW ( 0 )
00023e e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
00023f e020     +LDI R18 , LOW ( 0 )
000240 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
000241 e040     +LDI R20 , LOW ( 0 )
000242 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
000243 e0e7      	LDI  R30,LOW(7)
000244 e0f0      	LDI  R31,HIGH(7)
000245 93fa      	ST   -Y,R31
000246 93ea      	ST   -Y,R30
000247 de7e      	RCALL _usart1_init
                 ; 0000 015F     usart0_init(bps_115200);
000248 e0e7      	LDI  R30,LOW(7)
000249 e0f0      	LDI  R31,HIGH(7)
00024a 93fa      	ST   -Y,R31
00024b 93ea      	ST   -Y,R30
00024c de91      	RCALL _usart0_init
                 ; 0000 0160     timer2_init();
00024d dea6      	RCALL _timer2_init
                 ; 0000 0161     timer0_init();
00024e deac      	RCALL _timer0_init
                 ; 0000 0162     SREG |= 0x80;
00024f 9478      	BSET 7
                 ; 0000 0163     DDRB.1 = 1;
000250 9ab9      	SBI  0x17,1
                 ; 0000 0164     PORTB.1 = 0;
000251 98c1      	CBI  0x18,1
                 ; 0000 0165     DDRB.2 = 1;
000252 9aba      	SBI  0x17,2
                 ; 0000 0166     delay_ms(5000);
000253 e8e8      	LDI  R30,LOW(5000)
000254 e1f3      	LDI  R31,HIGH(5000)
000255 940e 04d0 	CALL SUBOPT_0x6
                 ; 0000 0167     PORTB.2 = 1;
000257 9ac2      	SBI  0x18,2
                 ; 0000 0168     while(1)
                 _0x55:
                 ; 0000 0169     {
                 ; 0000 016A         if(CHECK_GETS == 0)
000258 2099      	TST  R9
000259 f011      	BREQ PC+3
00025a 940c 02e6 	JMP _0x58
                 ; 0000 016B         {
                 ; 0000 016C             PORTB.2 = ~PORTB.2;
00025c 9bc2      	SBIS 0x18,2
00025d c002      	RJMP _0x59
00025e 98c2      	CBI  0x18,2
00025f c001      	RJMP _0x5A
                 _0x59:
000260 9ac2      	SBI  0x18,2
                 _0x5A:
                 ; 0000 016D 
                 ; 0000 016E             UCSR1B &= ~(1<<RXEN1);
000261 91e0 009a 	LDS  R30,154
000263 7eef      	ANDI R30,0xEF
000264 93e0 009a 	STS  154,R30
                 ; 0000 016F             sscanf(VELOCITY_BUFF,"<%d,%d>", &velocity, &angularV);
000266 e6e4      	LDI  R30,LOW(_VELOCITY_BUFF)
000267 e0f5      	LDI  R31,HIGH(_VELOCITY_BUFF)
000268 93fa      	ST   -Y,R31
000269 93ea      	ST   -Y,R30
                +
00026a efee     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
00026b e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
00026c 93fa      	ST   -Y,R31
00026d 93ea      	ST   -Y,R30
00026e b7ed      	IN   R30,SPL
00026f b7fe      	IN   R31,SPH
000270 9731      	SBIW R30,1
000271 940e 06e5 	CALL __PUTPARD1L
000273 931f      	PUSH R17
000274 930f      	PUSH R16
000275 b7ed      	IN   R30,SPL
000276 b7fe      	IN   R31,SPH
000277 9731      	SBIW R30,1
000278 940e 06e5 	CALL __PUTPARD1L
00027a 933f      	PUSH R19
00027b 932f      	PUSH R18
00027c e088      	LDI  R24,8
00027d 940e 044a 	CALL _sscanf
00027f 962c      	ADIW R28,12
000280 912f      	POP  R18
000281 913f      	POP  R19
000282 910f      	POP  R16
000283 911f      	POP  R17
                 ; 0000 0170             UCSR1B |=(1<<RXEN1);
000284 91e0 009a 	LDS  R30,154
000286 61e0      	ORI  R30,0x10
000287 93e0 009a 	STS  154,R30
                 ; 0000 0171 
                 ; 0000 0172             v_buff = (float)velocity/1000;
000289 01f8      	MOVW R30,R16
00028a 940e 04d4 	CALL SUBOPT_0x7
                +
00028c 01de     +MOVW R26 , R28
00028d 59a4     +SUBI R26 , LOW ( - 108 )
00028e 4fbf     +SBCI R27 , HIGH ( - 108 )
00028f 93ed     +ST X + , R30
000290 93fd     +ST X + , R31
000291 936d     +ST X + , R22
000292 937c     +ST X , R23
                 	__PUTD1SX 108
                 ; 0000 0173             a_buff = (float)angularV/1000;
000293 01f9      	MOVW R30,R18
000294 940e 04d4 	CALL SUBOPT_0x7
                +
000296 01de     +MOVW R26 , R28
000297 59a0     +SUBI R26 , LOW ( - 112 )
000298 4fbf     +SBCI R27 , HIGH ( - 112 )
000299 93ed     +ST X + , R30
00029a 93fd     +ST X + , R31
00029b 936d     +ST X + , R22
00029c 937c     +ST X , R23
                 	__PUTD1SX 112
                 ; 0000 0174 
                 ; 0000 0175             Make_MSPEED(&v_buff, &a_buff, &velocity_R, &velocity_L);
00029d 01fe      	MOVW R30,R28
00029e 59e4      	SUBI R30,LOW(-(108))
00029f 4fff      	SBCI R31,HIGH(-(108))
0002a0 93fa      	ST   -Y,R31
0002a1 93ea      	ST   -Y,R30
0002a2 01fe      	MOVW R30,R28
0002a3 58ee      	SUBI R30,LOW(-(114))
0002a4 4fff      	SBCI R31,HIGH(-(114))
0002a5 93fa      	ST   -Y,R31
0002a6 93ea      	ST   -Y,R30
0002a7 b7ed      	IN   R30,SPL
0002a8 b7fe      	IN   R31,SPH
0002a9 9731      	SBIW R30,1
0002aa 93fa      	ST   -Y,R31
0002ab 93ea      	ST   -Y,R30
0002ac 935f      	PUSH R21
0002ad 934f      	PUSH R20
0002ae 01fe      	MOVW R30,R28
0002af 59e0      	SUBI R30,LOW(-(112))
0002b0 4fff      	SBCI R31,HIGH(-(112))
0002b1 93fa      	ST   -Y,R31
0002b2 93ea      	ST   -Y,R30
0002b3 debd      	RCALL _Make_MSPEED
0002b4 914f      	POP  R20
0002b5 915f      	POP  R21
                 ; 0000 0176             //sprintf(BUFF,"<%.2f,%.f2>", v_buff, a_buff);
                 ; 0000 0177             //sprintf(BUFF,"<%d,%d>", velocity_R, velocity_L);
                 ; 0000 0178 
                 ; 0000 0179             //puts_USART1(BUFF,VELOCITY_BUFF_IDX);
                 ; 0000 017A 
                 ; 0000 017B 
                 ; 0000 017C             past_velocity_R = velocity_R;
                +
0002b6 01fe     +MOVW R30 , R28
0002b7 59e8     +SUBI R30 , LOW ( - 104 )
0002b8 4fff     +SBCI R31 , HIGH ( - 104 )
0002b9 9341     +ST Z + , R20
0002ba 8350     +ST Z , R21
                 	__PUTWSRX 20,21,104
                 ; 0000 017D             past_velocity_L = velocity_L;
                +
0002bb 01fe     +MOVW R30 , R28
0002bc 59e6     +SUBI R30 , LOW ( - 106 )
0002bd 4fff     +SBCI R31 , HIGH ( - 106 )
0002be 9001     +LD R0 , Z +
0002bf 81f0     +LD R31 , Z
0002c0 2de0     +MOV R30 , R0
                 	__GETW1SX 106
                +
0002c1 01de     +MOVW R26 , R28
0002c2 59aa     +SUBI R26 , LOW ( - 102 )
0002c3 4fbf     +SBCI R27 , HIGH ( - 102 )
0002c4 93ed     +ST X + , R30
0002c5 93fc     +ST X , R31
                 	__PUTW1SX 102
                 ; 0000 017E 
                 ; 0000 017F             RTU_WriteOperate0(R,(unsigned int)121,(int)(velocity_R));
0002c6 e0e1      	LDI  R30,LOW(1)
0002c7 93ea      	ST   -Y,R30
0002c8 e7e9      	LDI  R30,LOW(121)
0002c9 e0f0      	LDI  R31,HIGH(121)
0002ca 93fa      	ST   -Y,R31
0002cb 93ea      	ST   -Y,R30
0002cc 935a      	ST   -Y,R21
0002cd 934a      	ST   -Y,R20
0002ce 940e 04e1 	CALL SUBOPT_0x8
                 ; 0000 0180             delay_ms(1);
                 ; 0000 0181 
                 ; 0000 0182             RTU_WriteOperate0(L,(unsigned int)121,(int)-(velocity_L));
0002d0 e0e2      	LDI  R30,LOW(2)
0002d1 93ea      	ST   -Y,R30
0002d2 e7e9      	LDI  R30,LOW(121)
0002d3 e0f0      	LDI  R31,HIGH(121)
0002d4 93fa      	ST   -Y,R31
0002d5 93ea      	ST   -Y,R30
                +
0002d6 01fe     +MOVW R30 , R28
0002d7 59e3     +SUBI R30 , LOW ( - 109 )
0002d8 4fff     +SBCI R31 , HIGH ( - 109 )
0002d9 9001     +LD R0 , Z +
0002da 81f0     +LD R31 , Z
0002db 2de0     +MOV R30 , R0
                 	__GETW1SX 109
0002dc 940e 06ae 	CALL __ANEGW1
0002de 940e 04e6 	CALL SUBOPT_0x9
                 ; 0000 0183             delay_ms(1);
                 ; 0000 0184 
                 ; 0000 0185             RTU_WriteOperate0(R,(unsigned int)120,(int)(START));
0002e0 e0e1      	LDI  R30,LOW(1)
0002e1 940e 04e9 	CALL SUBOPT_0xA
                 ; 0000 0186             delay_ms(1);
                 ; 0000 0187 
                 ; 0000 0188             RTU_WriteOperate0(L,(unsigned int)120,(int)(START));
0002e3 e0e2      	LDI  R30,LOW(2)
0002e4 940e 04e9 	CALL SUBOPT_0xA
                 ; 0000 0189             delay_ms(1);
                 ; 0000 018A         }
                 ; 0000 018B     }
                 _0x58:
0002e6 cf71      	RJMP _0x55
                 ; 0000 018C }
                 _0x5B:
0002e7 cfff      	RJMP _0x5B
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _get_buff_G100:
0002e8 931a      	ST   -Y,R17
0002e9 81a9      	LDD  R26,Y+1
0002ea 81ba      	LDD  R27,Y+1+1
0002eb e0e0      	LDI  R30,LOW(0)
0002ec 93ec      	ST   X,R30
0002ed 81ab      	LDD  R26,Y+3
0002ee 81bc      	LDD  R27,Y+3+1
0002ef 91ec      	LD   R30,X
0002f0 2f1e      	MOV  R17,R30
0002f1 30e0      	CPI  R30,0
0002f2 f019      	BREQ _0x20000BF
0002f3 e0e0      	LDI  R30,LOW(0)
0002f4 93ec      	ST   X,R30
0002f5 c019      	RJMP _0x20000C0
                 _0x20000BF:
0002f6 81a9      	LDD  R26,Y+1
0002f7 81ba      	LDD  R27,Y+1+1
0002f8 9611      	ADIW R26,1
0002f9 940e 06cc 	CALL __GETW1P
0002fb 9730      	SBIW R30,0
0002fc f089      	BREQ _0x20000C1
0002fd 81e9      	LDD  R30,Y+1
0002fe 81fa      	LDD  R31,Y+1+1
0002ff 81a1      	LDD  R26,Z+1
000300 81b2      	LDD  R27,Z+2
000301 91ec      	LD   R30,X
000302 2f1e      	MOV  R17,R30
000303 30e0      	CPI  R30,0
000304 f041      	BREQ _0x20000C2
000305 81a9      	LDD  R26,Y+1
000306 81ba      	LDD  R27,Y+1+1
000307 9611      	ADIW R26,1
000308 91ed      	LD   R30,X+
000309 91fd      	LD   R31,X+
00030a 9631      	ADIW R30,1
00030b 93fe      	ST   -X,R31
00030c 93ee      	ST   -X,R30
                 _0x20000C2:
00030d c001      	RJMP _0x20000C3
                 _0x20000C1:
00030e e010      	LDI  R17,LOW(0)
                 _0x20000C3:
                 _0x20000C0:
00030f 2fe1      	MOV  R30,R17
000310 8118      	LDD  R17,Y+0
000311 9625      	ADIW R28,5
000312 9508      	RET
                 __scanf_G100:
000313 9725      	SBIW R28,5
000314 940e 06f9 	CALL __SAVELOCR6
000316 e0e0      	LDI  R30,LOW(0)
000317 e0f0      	LDI  R31,HIGH(0)
000318 87e8      	STD  Y+8,R30
000319 87f9      	STD  Y+8+1,R31
00031a 2f4e      	MOV  R20,R30
                 _0x20000C4:
00031b 89e9      	LDD  R30,Y+17
00031c 89fa      	LDD  R31,Y+17+1
00031d 9631      	ADIW R30,1
00031e 8be9      	STD  Y+17,R30
00031f 8bfa      	STD  Y+17+1,R31
000320 9731      	SBIW R30,1
000321 91e4      	LPM  R30,Z
000322 2f3e      	MOV  R19,R30
000323 30e0      	CPI  R30,0
000324 f411      	BRNE PC+3
000325 940c 0444 	JMP _0x20000C6
000327 940e 04f1 	CALL SUBOPT_0xB
000329 f0c1      	BREQ _0x20000C7
                 _0x20000C8:
00032a b7ed      	IN   R30,SPL
00032b b7fe      	IN   R31,SPH
00032c 93fa      	ST   -Y,R31
00032d 93ea      	ST   -Y,R30
00032e 934f      	PUSH R20
00032f 940e 04f6 	CALL SUBOPT_0xC
000331 914f      	POP  R20
000332 2f3e      	MOV  R19,R30
000333 30e0      	CPI  R30,0
000334 f019      	BREQ _0x20000CB
000335 940e 04f1 	CALL SUBOPT_0xB
000337 f409      	BRNE _0x20000CC
                 _0x20000CB:
000338 c007      	RJMP _0x20000CA
                 _0x20000CC:
000339 940e 04fe 	CALL SUBOPT_0xD
00033b f41c      	BRGE _0x20000CD
00033c efef      	LDI  R30,LOW(65535)
00033d efff      	LDI  R31,HIGH(65535)
00033e c107      	RJMP _0x20A0002
                 _0x20000CD:
00033f cfea      	RJMP _0x20000C8
                 _0x20000CA:
000340 2f43      	MOV  R20,R19
000341 c101      	RJMP _0x20000CE
                 _0x20000C7:
000342 3235      	CPI  R19,37
000343 f011      	BREQ PC+3
000344 940c 042b 	JMP _0x20000CF
000346 e050      	LDI  R21,LOW(0)
                 _0x20000D0:
000347 89e9      	LDD  R30,Y+17
000348 89fa      	LDD  R31,Y+17+1
000349 9135      	LPM  R19,Z+
00034a 8be9      	STD  Y+17,R30
00034b 8bfa      	STD  Y+17+1,R31
00034c 3330      	CPI  R19,48
00034d f010      	BRLO _0x20000D4
00034e 333a      	CPI  R19,58
00034f f008      	BRLO _0x20000D3
                 _0x20000D4:
000350 c007      	RJMP _0x20000D2
                 _0x20000D3:
000351 e0aa      	LDI  R26,LOW(10)
000352 9f5a      	MUL  R21,R26
000353 2d50      	MOV  R21,R0
000354 2fe3      	MOV  R30,R19
000355 53e0      	SUBI R30,LOW(48)
000356 0f5e      	ADD  R21,R30
000357 cfef      	RJMP _0x20000D0
                 _0x20000D2:
000358 3030      	CPI  R19,0
000359 f409      	BRNE _0x20000D6
00035a c0e9      	RJMP _0x20000C6
                 _0x20000D6:
                 _0x20000D7:
00035b b7ed      	IN   R30,SPL
00035c b7fe      	IN   R31,SPH
00035d 93fa      	ST   -Y,R31
00035e 93ea      	ST   -Y,R30
00035f 934f      	PUSH R20
000360 940e 04f6 	CALL SUBOPT_0xC
000362 914f      	POP  R20
000363 2f2e      	MOV  R18,R30
000364 93ea      	ST   -Y,R30
000365 940e 047f 	CALL _isspace
000367 30e0      	CPI  R30,0
000368 f039      	BREQ _0x20000D9
000369 940e 04fe 	CALL SUBOPT_0xD
00036b f41c      	BRGE _0x20000DA
00036c efef      	LDI  R30,LOW(65535)
00036d efff      	LDI  R31,HIGH(65535)
00036e c0d7      	RJMP _0x20A0002
                 _0x20000DA:
00036f cfeb      	RJMP _0x20000D7
                 _0x20000D9:
000370 3020      	CPI  R18,0
000371 f409      	BRNE _0x20000DB
000372 c0c8      	RJMP _0x20000DC
                 _0x20000DB:
000373 2f42      	MOV  R20,R18
000374 3050      	CPI  R21,0
000375 f409      	BRNE _0x20000DD
000376 ef5f      	LDI  R21,LOW(255)
                 _0x20000DD:
000377 2fe3      	MOV  R30,R19
000378 36e3      	CPI  R30,LOW(0x63)
000379 f499      	BRNE _0x20000E1
00037a 940e 0503 	CALL SUBOPT_0xE
00037c b7ed      	IN   R30,SPL
00037d b7fe      	IN   R31,SPH
00037e 93fa      	ST   -Y,R31
00037f 93ea      	ST   -Y,R30
000380 934f      	PUSH R20
000381 940e 04f6 	CALL SUBOPT_0xC
000383 914f      	POP  R20
000384 01d8      	MOVW R26,R16
000385 93ec      	ST   X,R30
000386 940e 04fe 	CALL SUBOPT_0xD
000388 f41c      	BRGE _0x20000E2
000389 efef      	LDI  R30,LOW(65535)
00038a efff      	LDI  R31,HIGH(65535)
00038b c0ba      	RJMP _0x20A0002
                 _0x20000E2:
00038c c098      	RJMP _0x20000E0
                 _0x20000E1:
00038d 37e3      	CPI  R30,LOW(0x73)
00038e f541      	BRNE _0x20000EB
00038f 940e 0503 	CALL SUBOPT_0xE
                 _0x20000E4:
000391 2fe5      	MOV  R30,R21
000392 5051      	SUBI R21,1
000393 30e0      	CPI  R30,0
000394 f0f1      	BREQ _0x20000E6
000395 b7ed      	IN   R30,SPL
000396 b7fe      	IN   R31,SPH
000397 93fa      	ST   -Y,R31
000398 93ea      	ST   -Y,R30
000399 934f      	PUSH R20
00039a 940e 04f6 	CALL SUBOPT_0xC
00039c 914f      	POP  R20
00039d 2f3e      	MOV  R19,R30
00039e 30e0      	CPI  R30,0
00039f f019      	BREQ _0x20000E8
0003a0 940e 04f1 	CALL SUBOPT_0xB
0003a2 f039      	BREQ _0x20000E7
                 _0x20000E8:
0003a3 940e 04fe 	CALL SUBOPT_0xD
0003a5 f41c      	BRGE _0x20000EA
0003a6 efef      	LDI  R30,LOW(65535)
0003a7 efff      	LDI  R31,HIGH(65535)
0003a8 c09d      	RJMP _0x20A0002
                 _0x20000EA:
0003a9 c009      	RJMP _0x20000E6
                 _0x20000E7:
0003aa 931f      	PUSH R17
0003ab 930f      	PUSH R16
                +
0003ac 5f0f     +SUBI R16 , LOW ( - 1 )
0003ad 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0003ae 2fe3      	MOV  R30,R19
0003af 91af      	POP  R26
0003b0 91bf      	POP  R27
0003b1 93ec      	ST   X,R30
0003b2 cfde      	RJMP _0x20000E4
                 _0x20000E6:
0003b3 01d8      	MOVW R26,R16
0003b4 e0e0      	LDI  R30,LOW(0)
0003b5 93ec      	ST   X,R30
0003b6 c06e      	RJMP _0x20000E0
                 _0x20000EB:
0003b7 e0e1      	LDI  R30,LOW(1)
0003b8 87ea      	STD  Y+10,R30
0003b9 2fe3      	MOV  R30,R19
0003ba 36e4      	CPI  R30,LOW(0x64)
0003bb f011      	BREQ _0x20000F0
0003bc 36e9      	CPI  R30,LOW(0x69)
0003bd f419      	BRNE _0x20000F1
                 _0x20000F0:
0003be e0e0      	LDI  R30,LOW(0)
0003bf 87ea      	STD  Y+10,R30
0003c0 c002      	RJMP _0x20000F2
                 _0x20000F1:
0003c1 37e5      	CPI  R30,LOW(0x75)
0003c2 f411      	BRNE _0x20000F3
                 _0x20000F2:
0003c3 e02a      	LDI  R18,LOW(10)
0003c4 c008      	RJMP _0x20000EE
                 _0x20000F3:
0003c5 37e8      	CPI  R30,LOW(0x78)
0003c6 f411      	BRNE _0x20000F4
0003c7 e120      	LDI  R18,LOW(16)
0003c8 c004      	RJMP _0x20000EE
                 _0x20000F4:
0003c9 32e5      	CPI  R30,LOW(0x25)
0003ca f409      	BRNE _0x20000F7
0003cb c05f      	RJMP _0x20000F6
                 _0x20000F7:
0003cc c077      	RJMP _0x20A0003
                 _0x20000EE:
0003cd e0e0      	LDI  R30,LOW(0)
0003ce 83ee      	STD  Y+6,R30
0003cf 83ef      	STD  Y+6+1,R30
                 _0x20000F8:
0003d0 2fe5      	MOV  R30,R21
0003d1 5051      	SUBI R21,1
0003d2 30e0      	CPI  R30,0
0003d3 f411      	BRNE PC+3
0003d4 940c 0418 	JMP _0x20000FA
0003d6 b7ed      	IN   R30,SPL
0003d7 b7fe      	IN   R31,SPH
0003d8 93fa      	ST   -Y,R31
0003d9 93ea      	ST   -Y,R30
0003da 934f      	PUSH R20
0003db 940e 04f6 	CALL SUBOPT_0xC
0003dd 914f      	POP  R20
0003de 2f3e      	MOV  R19,R30
0003df 32e1      	CPI  R30,LOW(0x21)
0003e0 f438      	BRSH _0x20000FB
0003e1 940e 04fe 	CALL SUBOPT_0xD
0003e3 f41c      	BRGE _0x20000FC
0003e4 efef      	LDI  R30,LOW(65535)
0003e5 efff      	LDI  R31,HIGH(65535)
0003e6 c05f      	RJMP _0x20A0002
                 _0x20000FC:
0003e7 c017      	RJMP _0x20000FD
                 _0x20000FB:
0003e8 85ea      	LDD  R30,Y+10
0003e9 30e0      	CPI  R30,0
0003ea f439      	BRNE _0x20000FE
0003eb 323d      	CPI  R19,45
0003ec f419      	BRNE _0x20000FF
0003ed efef      	LDI  R30,LOW(255)
0003ee 87ea      	STD  Y+10,R30
0003ef cfe0      	RJMP _0x20000F8
                 _0x20000FF:
0003f0 e0e1      	LDI  R30,LOW(1)
0003f1 87ea      	STD  Y+10,R30
                 _0x20000FE:
0003f2 3120      	CPI  R18,16
0003f3 f431      	BRNE _0x2000101
0003f4 933a      	ST   -Y,R19
0003f5 940e 0489 	CALL _isxdigit
0003f7 30e0      	CPI  R30,0
0003f8 f031      	BREQ _0x20000FD
0003f9 c007      	RJMP _0x2000103
                 _0x2000101:
0003fa 933a      	ST   -Y,R19
0003fb 940e 0477 	CALL _isdigit
0003fd 30e0      	CPI  R30,0
0003fe f411      	BRNE _0x2000104
                 _0x20000FD:
0003ff 2f43      	MOV  R20,R19
000400 c017      	RJMP _0x20000FA
                 _0x2000104:
                 _0x2000103:
000401 3631      	CPI  R19,97
000402 f010      	BRLO _0x2000105
000403 5537      	SUBI R19,LOW(87)
000404 c005      	RJMP _0x2000106
                 _0x2000105:
000405 3431      	CPI  R19,65
000406 f010      	BRLO _0x2000107
000407 5337      	SUBI R19,LOW(55)
000408 c001      	RJMP _0x2000108
                 _0x2000107:
000409 5330      	SUBI R19,LOW(48)
                 _0x2000108:
                 _0x2000106:
00040a 2fe2      	MOV  R30,R18
00040b 81ae      	LDD  R26,Y+6
00040c 81bf      	LDD  R27,Y+6+1
00040d e0f0      	LDI  R31,0
00040e 940e 06c4 	CALL __MULW12U
000410 01df      	MOVW R26,R30
000411 2fe3      	MOV  R30,R19
000412 e0f0      	LDI  R31,0
000413 0fea      	ADD  R30,R26
000414 1ffb      	ADC  R31,R27
000415 83ee      	STD  Y+6,R30
000416 83ff      	STD  Y+6+1,R31
000417 cfb8      	RJMP _0x20000F8
                 _0x20000FA:
000418 940e 0503 	CALL SUBOPT_0xE
00041a 85ea      	LDD  R30,Y+10
00041b 81ae      	LDD  R26,Y+6
00041c 81bf      	LDD  R27,Y+6+1
00041d e0f0      	LDI  R31,0
00041e fde7      	SBRC R30,7
00041f efff      	SER  R31
000420 940e 06c4 	CALL __MULW12U
000422 01d8      	MOVW R26,R16
000423 93ed      	ST   X+,R30
000424 93fc      	ST   X,R31
                 _0x20000E0:
000425 85e8      	LDD  R30,Y+8
000426 85f9      	LDD  R31,Y+8+1
000427 9631      	ADIW R30,1
000428 87e8      	STD  Y+8,R30
000429 87f9      	STD  Y+8+1,R31
00042a c018      	RJMP _0x2000109
                 _0x20000CF:
                 _0x20000F6:
00042b b7ed      	IN   R30,SPL
00042c b7fe      	IN   R31,SPH
00042d 93fa      	ST   -Y,R31
00042e 93ea      	ST   -Y,R30
00042f 934f      	PUSH R20
000430 940e 04f6 	CALL SUBOPT_0xC
000432 914f      	POP  R20
000433 17e3      	CP   R30,R19
000434 f071      	BREQ _0x200010A
000435 940e 04fe 	CALL SUBOPT_0xD
000437 f41c      	BRGE _0x200010B
000438 efef      	LDI  R30,LOW(65535)
000439 efff      	LDI  R31,HIGH(65535)
00043a c00b      	RJMP _0x20A0002
                 _0x200010B:
                 _0x20000DC:
00043b 85e8      	LDD  R30,Y+8
00043c 85f9      	LDD  R31,Y+8+1
00043d 9730      	SBIW R30,0
00043e f419      	BRNE _0x200010C
00043f efef      	LDI  R30,LOW(65535)
000440 efff      	LDI  R31,HIGH(65535)
000441 c004      	RJMP _0x20A0002
                 _0x200010C:
000442 c001      	RJMP _0x20000C6
                 _0x200010A:
                 _0x2000109:
                 _0x20000CE:
000443 ced7      	RJMP _0x20000C4
                 _0x20000C6:
                 _0x20A0003:
000444 85e8      	LDD  R30,Y+8
000445 85f9      	LDD  R31,Y+8+1
                 _0x20A0002:
000446 940e 0700 	CALL __LOADLOCR6
000448 9663      	ADIW R28,19
000449 9508      	RET
                 _sscanf:
00044a 92ff      	PUSH R15
00044b 2ef8      	MOV  R15,R24
00044c 9723      	SBIW R28,3
00044d 931a      	ST   -Y,R17
00044e 930a      	ST   -Y,R16
00044f 940e 050e 	CALL SUBOPT_0xF
000451 9730      	SBIW R30,0
000452 f419      	BRNE _0x200010D
000453 efef      	LDI  R30,LOW(65535)
000454 efff      	LDI  R31,HIGH(65535)
000455 c01c      	RJMP _0x20A0001
                 _0x200010D:
000456 01de      	MOVW R26,R28
000457 9611      	ADIW R26,1
000458 940e 06aa 	CALL __ADDW2R15
00045a 018d      	MOVW R16,R26
00045b 940e 050e 	CALL SUBOPT_0xF
00045d 83eb      	STD  Y+3,R30
00045e 83fc      	STD  Y+3+1,R31
00045f 01de      	MOVW R26,R28
000460 9615      	ADIW R26,5
000461 940e 06aa 	CALL __ADDW2R15
000463 940e 06cc 	CALL __GETW1P
000465 93fa      	ST   -Y,R31
000466 93ea      	ST   -Y,R30
000467 931a      	ST   -Y,R17
000468 930a      	ST   -Y,R16
000469 eee8      	LDI  R30,LOW(_get_buff_G100)
00046a e0f2      	LDI  R31,HIGH(_get_buff_G100)
00046b 93fa      	ST   -Y,R31
00046c 93ea      	ST   -Y,R30
00046d 01fe      	MOVW R30,R28
00046e 9638      	ADIW R30,8
00046f 93fa      	ST   -Y,R31
000470 93ea      	ST   -Y,R30
000471 dea1      	RCALL __scanf_G100
                 _0x20A0001:
000472 8119      	LDD  R17,Y+1
000473 8108      	LDD  R16,Y+0
000474 9625      	ADIW R28,5
000475 90ff      	POP  R15
000476 9508      	RET
                 
                 	.CSEG
                 _isdigit:
000477 e0e1          ldi  r30,1
000478 91f9          ld   r31,y+
000479 33f0          cpi  r31,'0'
00047a f010          brlo isdigit0
00047b 33fa          cpi  r31,'9'+1
00047c f008          brlo isdigit1
                 isdigit0:
00047d 27ee          clr  r30
                 isdigit1:
00047e 9508          ret
                 _isspace:
00047f e0e1          ldi  r30,1
000480 91f9          ld   r31,y+
000481 32f0          cpi  r31,' '
000482 f029          breq isspace1
000483 30f9          cpi  r31,9
000484 f010          brlo isspace0
000485 30fe          cpi  r31,13+1
000486 f008          brlo isspace1
                 isspace0:
000487 27ee          clr  r30
                 isspace1:
000488 9508          ret
                 _isxdigit:
000489 e0e1          ldi  r30,1
00048a 91f9          ld   r31,y+
00048b 53f0          subi r31,0x30
00048c f040          brcs isxdigit0
00048d 30fa          cpi  r31,10
00048e f038          brcs isxdigit1
00048f 75ff          andi r31,0x5f
000490 50f7          subi r31,7
000491 30fa          cpi  r31,10
000492 f010          brcs isxdigit0
000493 31f0          cpi  r31,16
000494 f008          brcs isxdigit1
                 isxdigit0:
000495 27ee          clr  r30
                 isxdigit1:
000496 9508          ret
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _PACKET_BUFF:
000500           	.BYTE 0x64
                 _VELOCITY_BUFF:
000564           	.BYTE 0x14
                 __seed_G104:
000578           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000497 85ae      	LDD  R26,Y+14
000498 85bf      	LDD  R27,Y+14+1
000499 940e 06d0 	CALL __GETD1P
00049b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
00049c 85ac      	LDD  R26,Y+12
00049d 85bd      	LDD  R27,Y+12+1
00049e 940e 06d0 	CALL __GETD1P
0004a0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2:
                +
0004a1 eea1     +LDI R26 , LOW ( 0x3E947AE1 )
0004a2 e7ba     +LDI R27 , HIGH ( 0x3E947AE1 )
0004a3 e984     +LDI R24 , BYTE3 ( 0x3E947AE1 )
0004a4 e39e     +LDI R25 , BYTE4 ( 0x3E947AE1 )
                 	__GETD2N 0x3E947AE1
0004a5 940e 0617 	CALL __MULF12
0004a7 01df      	MOVW R26,R30
0004a8 01cb      	MOVW R24,R22
                +
0004a9 e0e0     +LDI R30 , LOW ( 0x40800000 )
0004aa e0f0     +LDI R31 , HIGH ( 0x40800000 )
0004ab e860     +LDI R22 , BYTE3 ( 0x40800000 )
0004ac e470     +LDI R23 , BYTE4 ( 0x40800000 )
                 	__GETD1N 0x40800000
0004ad 940e 0665 	CALL __DIVF21
0004af 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3:
                +
0004b0 ebaa     +LDI R26 , LOW ( 0x4318C9BA )
0004b1 ecb9     +LDI R27 , HIGH ( 0x4318C9BA )
0004b2 e188     +LDI R24 , BYTE3 ( 0x4318C9BA )
0004b3 e493     +LDI R25 , BYTE4 ( 0x4318C9BA )
                 	__GETD2N 0x4318C9BA
0004b4 940e 0617 	CALL __MULF12
                +
0004b6 e0a0     +LDI R26 , LOW ( 0x41C80000 )
0004b7 e0b0     +LDI R27 , HIGH ( 0x41C80000 )
0004b8 ec88     +LDI R24 , BYTE3 ( 0x41C80000 )
0004b9 e491     +LDI R25 , BYTE4 ( 0x41C80000 )
                 	__GETD2N 0x41C80000
0004ba 940e 0617 	CALL __MULF12
0004bc 940e 0556 	CALL __CFD1
0004be 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x4:
0004bf 2da4      	MOV  R26,R4
0004c0 e0b0      	LDI  R27,0
0004c1 50a0      	SUBI R26,LOW(-_PACKET_BUFF)
0004c2 4fbb      	SBCI R27,HIGH(-_PACKET_BUFF)
0004c3 b1ec      	IN   R30,0xC
0004c4 93ec      	ST   X,R30
0004c5 9443      	INC  R4
0004c6 e0e0      	LDI  R30,LOW(0)
0004c7 bde4      	OUT  0x24,R30
0004c8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x5:
0004c9 2de6      	MOV  R30,R6
0004ca e0f0      	LDI  R31,0
0004cb 59ec      	SUBI R30,LOW(-_VELOCITY_BUFF)
0004cc 4ffa      	SBCI R31,HIGH(-_VELOCITY_BUFF)
0004cd 8310      	ST   Z,R17
0004ce 9463      	INC  R6
0004cf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x6:
0004d0 93fa      	ST   -Y,R31
0004d1 93ea      	ST   -Y,R30
0004d2 940c 0515 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x7:
0004d4 940e 06bf 	CALL __CWD1
0004d6 940e 058d 	CALL __CDF1
0004d8 01df      	MOVW R26,R30
0004d9 01cb      	MOVW R24,R22
                +
0004da e0e0     +LDI R30 , LOW ( 0x447A0000 )
0004db e0f0     +LDI R31 , HIGH ( 0x447A0000 )
0004dc e76a     +LDI R22 , BYTE3 ( 0x447A0000 )
0004dd e474     +LDI R23 , BYTE4 ( 0x447A0000 )
                 	__GETD1N 0x447A0000
0004de 940e 0665 	CALL __DIVF21
0004e0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x8:
0004e1 940e 0136 	CALL _RTU_WriteOperate0
0004e3 e0e1      	LDI  R30,LOW(1)
0004e4 e0f0      	LDI  R31,HIGH(1)
0004e5 cfea      	RJMP SUBOPT_0x6
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
0004e6 93fa      	ST   -Y,R31
0004e7 93ea      	ST   -Y,R30
0004e8 cff8      	RJMP SUBOPT_0x8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xA:
0004e9 93ea      	ST   -Y,R30
0004ea e7e8      	LDI  R30,LOW(120)
0004eb e0f0      	LDI  R31,HIGH(120)
0004ec 93fa      	ST   -Y,R31
0004ed 93ea      	ST   -Y,R30
0004ee e0e1      	LDI  R30,LOW(1)
0004ef e0f0      	LDI  R31,HIGH(1)
0004f0 cff5      	RJMP SUBOPT_0x9
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
0004f1 933a      	ST   -Y,R19
0004f2 940e 047f 	CALL _isspace
0004f4 30e0      	CPI  R30,0
0004f5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0xC:
0004f6 85ed      	LDD  R30,Y+13
0004f7 85fe      	LDD  R31,Y+13+1
0004f8 93fa      	ST   -Y,R31
0004f9 93ea      	ST   -Y,R30
0004fa 89e9      	LDD  R30,Y+17
0004fb 89fa      	LDD  R31,Y+17+1
0004fc 9509      	ICALL
0004fd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xD:
0004fe 85ab      	LDD  R26,Y+11
0004ff 85bc      	LDD  R27,Y+11+1
000500 91ac      	LD   R26,X
000501 30a0      	CPI  R26,0
000502 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xE:
000503 85ef      	LDD  R30,Y+15
000504 89f8      	LDD  R31,Y+15+1
000505 9734      	SBIW R30,4
000506 87ef      	STD  Y+15,R30
000507 8bf8      	STD  Y+15+1,R31
000508 85af      	LDD  R26,Y+15
000509 89b8      	LDD  R27,Y+15+1
00050a 9614      	ADIW R26,4
00050b 910d      	LD   R16,X+
00050c 911c      	LD   R17,X
00050d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
00050e 01de      	MOVW R26,R28
00050f 9617      	ADIW R26,7
000510 940e 06aa 	CALL __ADDW2R15
000512 940e 06cc 	CALL __GETW1P
000514 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000515 91e9      	ld   r30,y+
000516 91f9      	ld   r31,y+
000517 9630      	adiw r30,0
000518 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000519 e686     +LDI R24 , LOW ( 0xE66 )
00051a e09e     +LDI R25 , HIGH ( 0xE66 )
                +__DELAY_USW_LOOP :
00051b 9701     +SBIW R24 , 1
00051c f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xE66
00051d 95a8      	wdr
00051e 9731      	sbiw r30,1
00051f f7c9      	brne __delay_ms0
                 __delay_ms1:
000520 9508      	ret
                 
                 __ANEGF1:
000521 9730      	SBIW R30,0
000522 4060      	SBCI R22,0
000523 4070      	SBCI R23,0
000524 f009      	BREQ __ANEGF10
000525 5870      	SUBI R23,0x80
                 __ANEGF10:
000526 9508      	RET
                 
                 __ROUND_REPACK:
000527 2355      	TST  R21
000528 f442      	BRPL __REPACK
000529 3850      	CPI  R21,0x80
00052a f411      	BRNE __ROUND_REPACK0
00052b ffe0      	SBRS R30,0
00052c c004      	RJMP __REPACK
                 __ROUND_REPACK0:
00052d 9631      	ADIW R30,1
00052e 1f69      	ADC  R22,R25
00052f 1f79      	ADC  R23,R25
000530 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000531 e850      	LDI  R21,0x80
000532 2757      	EOR  R21,R23
000533 f411      	BRNE __REPACK0
000534 935f      	PUSH R21
000535 c0cf      	RJMP __ZERORES
                 __REPACK0:
000536 3f5f      	CPI  R21,0xFF
000537 f031      	BREQ __REPACK1
000538 0f66      	LSL  R22
000539 0c00      	LSL  R0
00053a 9557      	ROR  R21
00053b 9567      	ROR  R22
00053c 2f75      	MOV  R23,R21
00053d 9508      	RET
                 __REPACK1:
00053e 935f      	PUSH R21
00053f 2000      	TST  R0
000540 f00a      	BRMI __REPACK2
000541 c0cf      	RJMP __MAXRES
                 __REPACK2:
000542 c0c8      	RJMP __MINRES
                 
                 __UNPACK:
000543 e850      	LDI  R21,0x80
000544 2e19      	MOV  R1,R25
000545 2215      	AND  R1,R21
000546 0f88      	LSL  R24
000547 1f99      	ROL  R25
000548 2795      	EOR  R25,R21
000549 0f55      	LSL  R21
00054a 9587      	ROR  R24
                 
                 __UNPACK1:
00054b e850      	LDI  R21,0x80
00054c 2e07      	MOV  R0,R23
00054d 2205      	AND  R0,R21
00054e 0f66      	LSL  R22
00054f 1f77      	ROL  R23
000550 2775      	EOR  R23,R21
000551 0f55      	LSL  R21
000552 9567      	ROR  R22
000553 9508      	RET
                 
                 __CFD1U:
000554 9468      	SET
000555 c001      	RJMP __CFD1U0
                 __CFD1:
000556 94e8      	CLT
                 __CFD1U0:
000557 935f      	PUSH R21
000558 dff2      	RCALL __UNPACK1
000559 3870      	CPI  R23,0x80
00055a f018      	BRLO __CFD10
00055b 3f7f      	CPI  R23,0xFF
00055c f408      	BRCC __CFD10
00055d c0a7      	RJMP __ZERORES
                 __CFD10:
00055e e156      	LDI  R21,22
00055f 1b57      	SUB  R21,R23
000560 f4aa      	BRPL __CFD11
000561 9551      	NEG  R21
000562 3058      	CPI  R21,8
000563 f40e      	BRTC __CFD19
000564 3059      	CPI  R21,9
                 __CFD19:
000565 f030      	BRLO __CFD17
000566 efef      	SER  R30
000567 efff      	SER  R31
000568 ef6f      	SER  R22
000569 e77f      	LDI  R23,0x7F
00056a f977      	BLD  R23,7
00056b c01a      	RJMP __CFD15
                 __CFD17:
00056c 2777      	CLR  R23
00056d 2355      	TST  R21
00056e f0b9      	BREQ __CFD15
                 __CFD18:
00056f 0fee      	LSL  R30
000570 1fff      	ROL  R31
000571 1f66      	ROL  R22
000572 1f77      	ROL  R23
000573 955a      	DEC  R21
000574 f7d1      	BRNE __CFD18
000575 c010      	RJMP __CFD15
                 __CFD11:
000576 2777      	CLR  R23
                 __CFD12:
000577 3058      	CPI  R21,8
000578 f028      	BRLO __CFD13
000579 2fef      	MOV  R30,R31
00057a 2ff6      	MOV  R31,R22
00057b 2f67      	MOV  R22,R23
00057c 5058      	SUBI R21,8
00057d cff9      	RJMP __CFD12
                 __CFD13:
00057e 2355      	TST  R21
00057f f031      	BREQ __CFD15
                 __CFD14:
000580 9576      	LSR  R23
000581 9567      	ROR  R22
000582 95f7      	ROR  R31
000583 95e7      	ROR  R30
000584 955a      	DEC  R21
000585 f7d1      	BRNE __CFD14
                 __CFD15:
000586 2000      	TST  R0
000587 f40a      	BRPL __CFD16
000588 d129      	RCALL __ANEGD1
                 __CFD16:
000589 915f      	POP  R21
00058a 9508      	RET
                 
                 __CDF1U:
00058b 9468      	SET
00058c c001      	RJMP __CDF1U0
                 __CDF1:
00058d 94e8      	CLT
                 __CDF1U0:
00058e 9730      	SBIW R30,0
00058f 4060      	SBCI R22,0
000590 4070      	SBCI R23,0
000591 f0b1      	BREQ __CDF10
000592 2400      	CLR  R0
000593 f026      	BRTS __CDF11
000594 2377      	TST  R23
000595 f412      	BRPL __CDF11
000596 9400      	COM  R0
000597 d11a      	RCALL __ANEGD1
                 __CDF11:
000598 2e17      	MOV  R1,R23
000599 e17e      	LDI  R23,30
00059a 2011      	TST  R1
                 __CDF12:
00059b f032      	BRMI __CDF13
00059c 957a      	DEC  R23
00059d 0fee      	LSL  R30
00059e 1fff      	ROL  R31
00059f 1f66      	ROL  R22
0005a0 1c11      	ROL  R1
0005a1 cff9      	RJMP __CDF12
                 __CDF13:
0005a2 2fef      	MOV  R30,R31
0005a3 2ff6      	MOV  R31,R22
0005a4 2d61      	MOV  R22,R1
0005a5 935f      	PUSH R21
0005a6 df8a      	RCALL __REPACK
0005a7 915f      	POP  R21
                 __CDF10:
0005a8 9508      	RET
                 
                 __SWAPACC:
0005a9 934f      	PUSH R20
0005aa 01af      	MOVW R20,R30
0005ab 01fd      	MOVW R30,R26
0005ac 01da      	MOVW R26,R20
0005ad 01ab      	MOVW R20,R22
0005ae 01bc      	MOVW R22,R24
0005af 01ca      	MOVW R24,R20
0005b0 2d40      	MOV  R20,R0
0005b1 2c01      	MOV  R0,R1
0005b2 2e14      	MOV  R1,R20
0005b3 914f      	POP  R20
0005b4 9508      	RET
                 
                 __UADD12:
0005b5 0fea      	ADD  R30,R26
0005b6 1ffb      	ADC  R31,R27
0005b7 1f68      	ADC  R22,R24
0005b8 9508      	RET
                 
                 __NEGMAN1:
0005b9 95e0      	COM  R30
0005ba 95f0      	COM  R31
0005bb 9560      	COM  R22
0005bc 5fef      	SUBI R30,-1
0005bd 4fff      	SBCI R31,-1
0005be 4f6f      	SBCI R22,-1
0005bf 9508      	RET
                 
                 __SUBF12:
0005c0 935f      	PUSH R21
0005c1 df81      	RCALL __UNPACK
0005c2 3890      	CPI  R25,0x80
0005c3 f171      	BREQ __ADDF129
0005c4 e850      	LDI  R21,0x80
0005c5 2615      	EOR  R1,R21
                 
0005c6 c004      	RJMP __ADDF120
                 
                 __ADDF12:
0005c7 935f      	PUSH R21
0005c8 df7a      	RCALL __UNPACK
0005c9 3890      	CPI  R25,0x80
0005ca f139      	BREQ __ADDF129
                 
                 __ADDF120:
0005cb 3870      	CPI  R23,0x80
0005cc f121      	BREQ __ADDF128
                 __ADDF121:
0005cd 2f57      	MOV  R21,R23
0005ce 1b59      	SUB  R21,R25
0005cf f12b      	BRVS __ADDF1211
0005d0 f412      	BRPL __ADDF122
0005d1 dfd7      	RCALL __SWAPACC
0005d2 cffa      	RJMP __ADDF121
                 __ADDF122:
0005d3 3158      	CPI  R21,24
0005d4 f018      	BRLO __ADDF123
0005d5 27aa      	CLR  R26
0005d6 27bb      	CLR  R27
0005d7 2788      	CLR  R24
                 __ADDF123:
0005d8 3058      	CPI  R21,8
0005d9 f028      	BRLO __ADDF124
0005da 2fab      	MOV  R26,R27
0005db 2fb8      	MOV  R27,R24
0005dc 2788      	CLR  R24
0005dd 5058      	SUBI R21,8
0005de cff9      	RJMP __ADDF123
                 __ADDF124:
0005df 2355      	TST  R21
0005e0 f029      	BREQ __ADDF126
                 __ADDF125:
0005e1 9586      	LSR  R24
0005e2 95b7      	ROR  R27
0005e3 95a7      	ROR  R26
0005e4 955a      	DEC  R21
0005e5 f7d9      	BRNE __ADDF125
                 __ADDF126:
0005e6 2d50      	MOV  R21,R0
0005e7 2551      	EOR  R21,R1
0005e8 f072      	BRMI __ADDF127
0005e9 dfcb      	RCALL __UADD12
0005ea f438      	BRCC __ADDF129
0005eb 9567      	ROR  R22
0005ec 95f7      	ROR  R31
0005ed 95e7      	ROR  R30
0005ee 9573      	INC  R23
0005ef f413      	BRVC __ADDF129
0005f0 c020      	RJMP __MAXRES
                 __ADDF128:
0005f1 dfb7      	RCALL __SWAPACC
                 __ADDF129:
0005f2 df3e      	RCALL __REPACK
0005f3 915f      	POP  R21
0005f4 9508      	RET
                 __ADDF1211:
0005f5 f7d8      	BRCC __ADDF128
0005f6 cffb      	RJMP __ADDF129
                 __ADDF127:
0005f7 1bea      	SUB  R30,R26
0005f8 0bfb      	SBC  R31,R27
0005f9 0b68      	SBC  R22,R24
0005fa f051      	BREQ __ZERORES
0005fb f410      	BRCC __ADDF1210
0005fc 9400      	COM  R0
0005fd dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
0005fe 2366      	TST  R22
0005ff f392      	BRMI __ADDF129
000600 0fee      	LSL  R30
000601 1fff      	ROL  R31
000602 1f66      	ROL  R22
000603 957a      	DEC  R23
000604 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
000605 27ee      	CLR  R30
000606 27ff      	CLR  R31
000607 2766      	CLR  R22
000608 2777      	CLR  R23
000609 915f      	POP  R21
00060a 9508      	RET
                 
                 __MINRES:
00060b efef      	SER  R30
00060c efff      	SER  R31
00060d e76f      	LDI  R22,0x7F
00060e ef7f      	SER  R23
00060f 915f      	POP  R21
000610 9508      	RET
                 
                 __MAXRES:
000611 efef      	SER  R30
000612 efff      	SER  R31
000613 e76f      	LDI  R22,0x7F
000614 e77f      	LDI  R23,0x7F
000615 915f      	POP  R21
000616 9508      	RET
                 
                 __MULF12:
000617 935f      	PUSH R21
000618 df2a      	RCALL __UNPACK
000619 3870      	CPI  R23,0x80
00061a f351      	BREQ __ZERORES
00061b 3890      	CPI  R25,0x80
00061c f341      	BREQ __ZERORES
00061d 2401      	EOR  R0,R1
00061e 9408      	SEC
00061f 1f79      	ADC  R23,R25
000620 f423      	BRVC __MULF124
000621 f31c      	BRLT __ZERORES
                 __MULF125:
000622 2000      	TST  R0
000623 f33a      	BRMI __MINRES
000624 cfec      	RJMP __MAXRES
                 __MULF124:
000625 920f      	PUSH R0
000626 931f      	PUSH R17
000627 932f      	PUSH R18
000628 933f      	PUSH R19
000629 934f      	PUSH R20
00062a 2711      	CLR  R17
00062b 2722      	CLR  R18
00062c 2799      	CLR  R25
00062d 9f68      	MUL  R22,R24
00062e 01a0      	MOVW R20,R0
00062f 9f8f      	MUL  R24,R31
000630 2d30      	MOV  R19,R0
000631 0d41      	ADD  R20,R1
000632 1f59      	ADC  R21,R25
000633 9f6b      	MUL  R22,R27
000634 0d30      	ADD  R19,R0
000635 1d41      	ADC  R20,R1
000636 1f59      	ADC  R21,R25
000637 9f8e      	MUL  R24,R30
000638 d027      	RCALL __MULF126
000639 9fbf      	MUL  R27,R31
00063a d025      	RCALL __MULF126
00063b 9f6a      	MUL  R22,R26
00063c d023      	RCALL __MULF126
00063d 9fbe      	MUL  R27,R30
00063e d01d      	RCALL __MULF127
00063f 9faf      	MUL  R26,R31
000640 d01b      	RCALL __MULF127
000641 9fae      	MUL  R26,R30
000642 0d11      	ADD  R17,R1
000643 1f29      	ADC  R18,R25
000644 1f39      	ADC  R19,R25
000645 1f49      	ADC  R20,R25
000646 1f59      	ADC  R21,R25
000647 2fe3      	MOV  R30,R19
000648 2ff4      	MOV  R31,R20
000649 2f65      	MOV  R22,R21
00064a 2f52      	MOV  R21,R18
00064b 914f      	POP  R20
00064c 913f      	POP  R19
00064d 912f      	POP  R18
00064e 911f      	POP  R17
00064f 900f      	POP  R0
000650 2366      	TST  R22
000651 f02a      	BRMI __MULF122
000652 0f55      	LSL  R21
000653 1fee      	ROL  R30
000654 1fff      	ROL  R31
000655 1f66      	ROL  R22
000656 c002      	RJMP __MULF123
                 __MULF122:
000657 9573      	INC  R23
000658 f24b      	BRVS __MULF125
                 __MULF123:
000659 decd      	RCALL __ROUND_REPACK
00065a 915f      	POP  R21
00065b 9508      	RET
                 
                 __MULF127:
00065c 0d10      	ADD  R17,R0
00065d 1d21      	ADC  R18,R1
00065e 1f39      	ADC  R19,R25
00065f c002      	RJMP __MULF128
                 __MULF126:
000660 0d20      	ADD  R18,R0
000661 1d31      	ADC  R19,R1
                 __MULF128:
000662 1f49      	ADC  R20,R25
000663 1f59      	ADC  R21,R25
000664 9508      	RET
                 
                 __DIVF21:
000665 935f      	PUSH R21
000666 dedc      	RCALL __UNPACK
000667 3870      	CPI  R23,0x80
000668 f421      	BRNE __DIVF210
000669 2011      	TST  R1
                 __DIVF211:
00066a f40a      	BRPL __DIVF219
00066b cf9f      	RJMP __MINRES
                 __DIVF219:
00066c cfa4      	RJMP __MAXRES
                 __DIVF210:
00066d 3890      	CPI  R25,0x80
00066e f409      	BRNE __DIVF218
                 __DIVF217:
00066f cf95      	RJMP __ZERORES
                 __DIVF218:
000670 2401      	EOR  R0,R1
000671 9408      	SEC
000672 0b97      	SBC  R25,R23
000673 f41b      	BRVC __DIVF216
000674 f3d4      	BRLT __DIVF217
000675 2000      	TST  R0
000676 cff3      	RJMP __DIVF211
                 __DIVF216:
000677 2f79      	MOV  R23,R25
000678 931f      	PUSH R17
000679 932f      	PUSH R18
00067a 933f      	PUSH R19
00067b 934f      	PUSH R20
00067c 2411      	CLR  R1
00067d 2711      	CLR  R17
00067e 2722      	CLR  R18
00067f 2733      	CLR  R19
000680 2744      	CLR  R20
000681 2755      	CLR  R21
000682 e290      	LDI  R25,32
                 __DIVF212:
000683 17ae      	CP   R26,R30
000684 07bf      	CPC  R27,R31
000685 0786      	CPC  R24,R22
000686 0741      	CPC  R20,R17
000687 f030      	BRLO __DIVF213
000688 1bae      	SUB  R26,R30
000689 0bbf      	SBC  R27,R31
00068a 0b86      	SBC  R24,R22
00068b 0b41      	SBC  R20,R17
00068c 9408      	SEC
00068d c001      	RJMP __DIVF214
                 __DIVF213:
00068e 9488      	CLC
                 __DIVF214:
00068f 1f55      	ROL  R21
000690 1f22      	ROL  R18
000691 1f33      	ROL  R19
000692 1c11      	ROL  R1
000693 1faa      	ROL  R26
000694 1fbb      	ROL  R27
000695 1f88      	ROL  R24
000696 1f44      	ROL  R20
000697 959a      	DEC  R25
000698 f751      	BRNE __DIVF212
000699 01f9      	MOVW R30,R18
00069a 2d61      	MOV  R22,R1
00069b 914f      	POP  R20
00069c 913f      	POP  R19
00069d 912f      	POP  R18
00069e 911f      	POP  R17
00069f 2366      	TST  R22
0006a0 f032      	BRMI __DIVF215
0006a1 0f55      	LSL  R21
0006a2 1fee      	ROL  R30
0006a3 1fff      	ROL  R31
0006a4 1f66      	ROL  R22
0006a5 957a      	DEC  R23
0006a6 f243      	BRVS __DIVF217
                 __DIVF215:
0006a7 de7f      	RCALL __ROUND_REPACK
0006a8 915f      	POP  R21
0006a9 9508      	RET
                 
                 __ADDW2R15:
0006aa 2400      	CLR  R0
0006ab 0daf      	ADD  R26,R15
0006ac 1db0      	ADC  R27,R0
0006ad 9508      	RET
                 
                 __ANEGW1:
0006ae 95f1      	NEG  R31
0006af 95e1      	NEG  R30
0006b0 40f0      	SBCI R31,0
0006b1 9508      	RET
                 
                 __ANEGD1:
0006b2 95f0      	COM  R31
0006b3 9560      	COM  R22
0006b4 9570      	COM  R23
0006b5 95e1      	NEG  R30
0006b6 4fff      	SBCI R31,-1
0006b7 4f6f      	SBCI R22,-1
0006b8 4f7f      	SBCI R23,-1
0006b9 9508      	RET
                 
                 __ASRW8:
0006ba 2fef      	MOV  R30,R31
0006bb 27ff      	CLR  R31
0006bc fde7      	SBRC R30,7
0006bd efff      	SER  R31
0006be 9508      	RET
                 
                 __CWD1:
0006bf 2f6f      	MOV  R22,R31
0006c0 0f66      	ADD  R22,R22
0006c1 0b66      	SBC  R22,R22
0006c2 2f76      	MOV  R23,R22
0006c3 9508      	RET
                 
                 __MULW12U:
0006c4 9ffa      	MUL  R31,R26
0006c5 2df0      	MOV  R31,R0
0006c6 9feb      	MUL  R30,R27
0006c7 0df0      	ADD  R31,R0
0006c8 9fea      	MUL  R30,R26
0006c9 2de0      	MOV  R30,R0
0006ca 0df1      	ADD  R31,R1
0006cb 9508      	RET
                 
                 __GETW1P:
0006cc 91ed      	LD   R30,X+
0006cd 91fc      	LD   R31,X
0006ce 9711      	SBIW R26,1
0006cf 9508      	RET
                 
                 __GETD1P:
0006d0 91ed      	LD   R30,X+
0006d1 91fd      	LD   R31,X+
0006d2 916d      	LD   R22,X+
0006d3 917c      	LD   R23,X
0006d4 9713      	SBIW R26,3
0006d5 9508      	RET
                 
                 __PUTDP1:
0006d6 93ed      	ST   X+,R30
0006d7 93fd      	ST   X+,R31
0006d8 936d      	ST   X+,R22
0006d9 937c      	ST   X,R23
0006da 9508      	RET
                 
                 __GETD1S0:
0006db 81e8      	LD   R30,Y
0006dc 81f9      	LDD  R31,Y+1
0006dd 816a      	LDD  R22,Y+2
0006de 817b      	LDD  R23,Y+3
0006df 9508      	RET
                 
                 __PUTD1S0:
0006e0 83e8      	ST   Y,R30
0006e1 83f9      	STD  Y+1,R31
0006e2 836a      	STD  Y+2,R22
0006e3 837b      	STD  Y+3,R23
0006e4 9508      	RET
                 
                 __PUTPARD1L:
0006e5 e060      	LDI  R22,0
0006e6 e070      	LDI  R23,0
                 __PUTPARD1:
0006e7 937a      	ST   -Y,R23
0006e8 936a      	ST   -Y,R22
0006e9 93fa      	ST   -Y,R31
0006ea 93ea      	ST   -Y,R30
0006eb 9508      	RET
                 
                 __SWAPD12:
0006ec 2e18      	MOV  R1,R24
0006ed 2f86      	MOV  R24,R22
0006ee 2d61      	MOV  R22,R1
0006ef 2e19      	MOV  R1,R25
0006f0 2f97      	MOV  R25,R23
0006f1 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
0006f2 2e1b      	MOV  R1,R27
0006f3 2fbf      	MOV  R27,R31
0006f4 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
0006f5 2e1a      	MOV  R1,R26
0006f6 2fae      	MOV  R26,R30
0006f7 2de1      	MOV  R30,R1
0006f8 9508      	RET
                 
                 __SAVELOCR6:
0006f9 935a      	ST   -Y,R21
                 __SAVELOCR5:
0006fa 934a      	ST   -Y,R20
                 __SAVELOCR4:
0006fb 933a      	ST   -Y,R19
                 __SAVELOCR3:
0006fc 932a      	ST   -Y,R18
                 __SAVELOCR2:
0006fd 931a      	ST   -Y,R17
0006fe 930a      	ST   -Y,R16
0006ff 9508      	RET
                 
                 __LOADLOCR6:
000700 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000701 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000702 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000703 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000704 8119      	LDD  R17,Y+1
000705 8108      	LD   R16,Y
000706 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
000707 0fac      	ADD  R26,R28
000708 1fbd      	ADC  R27,R29
                 __INITLOC0:
000709 9005      	LPM  R0,Z+
00070a 920d      	ST   X+,R0
00070b 958a      	DEC  R24
00070c f7e1      	BRNE __INITLOC0
00070d 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :  40 r1 :  31 r2 :   0 r3 :   0 r4 :   4 r5 :   3 r6 :   3 r7 :   1 
r8 :   0 r9 :   3 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  21 r17:  38 r18:  36 r19:  52 r20:  47 r21:  81 r22:  66 r23:  57 
r24:  39 r25:  35 r26:  94 r27:  59 r28:  32 r29:   2 r30: 396 r31: 188 
x  :  51 y  : 240 z  :  19 
Registers used: 27 out of 35 (77.1%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  21 add   :  14 
adiw  :  24 and   :   2 andi  :   6 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   4 brcs  :   4 break :   0 breq  :  32 
brge  :  10 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  14 
brlt  :   4 brmi  :   8 brne  :  35 brpl  :   6 brsh  :   2 brtc  :   1 
brts  :   1 brvc  :   4 brvs  :   4 bset  :   1 bst   :   0 call  :  90 
cbi   :   2 cbr   :   0 clc   :   1 clh   :   0 cli   :   1 cln   :   0 
clr   :  31 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   8 
cp    :   6 cpc   :   9 cpi   :  62 cpse  :   0 dec   :   9 des   :   0 
elpm  :   0 eor   :  11 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   1 
ijmp  :   0 in    :  24 inc   :   6 jmp   :  41 ld    :  40 ldd   :  86 
ldi   : 169 lds   :   5 lpm   :  11 lsl   :  11 lsr   :   3 mov   :  69 
movw  :  44 mul   :  13 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 
or    :   1 ori   :   1 out   :  22 pop   :  41 push  :  41 rcall :  28 
ret   :  57 reti  :   3 rjmp  :  82 rol   :  24 ror   :  13 sbc   :   7 
sbci  :  24 sbi   :   4 sbic  :   0 sbis  :   2 sbiw  :  24 sbr   :   0 
sbrc  :   2 sbrs  :   1 sec   :   3 seh   :   0 sei   :   0 sen   :   0 
ser   :  10 ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    : 126 std   :  48 sts   :  12 sub   :   4 subi  :  26 
swap  :   0 tst   :  16 wdr   :   1 
Instructions used: 76 out of 117 (65.0%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000e1c   3458    154   3612  131072   2.8%
[.dseg] 0x000100 0x00057c      0    124    124    4351   2.8%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 8 warnings
