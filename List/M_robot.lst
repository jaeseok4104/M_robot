
AVRASM ver. 2.1.30  C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm Tue Jan 14 14:25:45 2020

C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1061): warning: Register r5 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1062): warning: Register r4 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1063): warning: Register r7 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1064): warning: Register r6 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\M_robot\List\M_robot.asm(1065): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega128
                 ;Program type             : Application
                 ;Clock frequency          : 14.745600 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 1024 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : No
                 ;global 'const' stored in FLASH: Yes
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4351
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _TIMER2_OVERFLOW=R5
                 	.DEF _PACKET_BUFF_IDX=R4
                 	.DEF _TIMER0_OVERFLOW=R7
                 	.DEF _VELOCITY_BUFF_IDX=R6
                 	.DEF _CHECK_GETS=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0088 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 01c5 	JMP  _timer2_comp
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 01d0 	JMP  _timer0_comp
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 018c 	JMP  _usart0_rxc
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 01a7 	JMP  _usart1_rxc
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x39:
00004f 0000
000050 0000
000051 0000
000052 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000053 0000
000054 0000
000055 0000
000056 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000057 0000
000058 0000
000059 0000
00005a 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00005b 0000
00005c 0000
00005d 0000
00005e 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00005f 0000
000060 0000
000061 0000
000062 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000063 0000
000064 0000
000065 0000
000066 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000067 0000
000068 0000
000069 0000
00006a 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00006b 0000
00006c 0000
00006d 0000
00006e 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00006f 0000
000070 0000
000071 0000
000072 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000073 0000
000074 0000
000075 0000
000076 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000077 0000
000078 0000
000079 0000
00007a 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00007b 0000
00007c 0000
00007d 0000
00007e 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00007f 0000
000080 0000      	.DB  0x0,0x0,0x0,0x0
                 _0x43:
000081 0000
000082 0000
000083 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0
                 
                 __GLOBAL_INI_TBL:
000084 0006      	.DW  0x06
000085 0004      	.DW  0x04
000086 0102      	.DW  _0x43*2
                 
                 _0xFFFFFFFF:
000087 0000      	.DW  0
                 
                 __RESET:
000088 94f8      	CLI
000089 27ee      	CLR  R30
00008a bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00008b e0f1      	LDI  R31,1
00008c bff5      	OUT  MCUCR,R31
00008d bfe5      	OUT  MCUCR,R30
00008e 93e0 006c 	STS  XMCRB,R30
                 
                 ;DISABLE WATCHDOG
000090 e1f8      	LDI  R31,0x18
000091 bdf1      	OUT  WDTCR,R31
000092 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000093 e08d      	LDI  R24,(14-2)+1
000094 e0a2      	LDI  R26,2
000095 27bb      	CLR  R27
                 __CLEAR_REG:
000096 93ed      	ST   X+,R30
000097 958a      	DEC  R24
000098 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000099 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00009a e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00009b e0a0      	LDI  R26,LOW(__SRAM_START)
00009c e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00009d 93ed      	ST   X+,R30
00009e 9701      	SBIW R24,1
00009f f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000a0 e0e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000a1 e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000a2 9185      	LPM  R24,Z+
0000a3 9195      	LPM  R25,Z+
0000a4 9700      	SBIW R24,0
0000a5 f061      	BREQ __GLOBAL_INI_END
0000a6 91a5      	LPM  R26,Z+
0000a7 91b5      	LPM  R27,Z+
0000a8 9005      	LPM  R0,Z+
0000a9 9015      	LPM  R1,Z+
0000aa 01bf      	MOVW R22,R30
0000ab 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000ac 9005      	LPM  R0,Z+
0000ad 920d      	ST   X+,R0
0000ae 9701      	SBIW R24,1
0000af f7e1      	BRNE __GLOBAL_INI_LOOP
0000b0 01fb      	MOVW R30,R22
0000b1 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
0000b2 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000b3 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000b4 bfed      	OUT  SPL,R30
0000b5 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000b6 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000b7 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000b8 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000b9 940c 01d6 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdio.h>
                 ;#include <delay.h>
                 ;
                 ;#define bps_115200 0x0007
                 ;
                 ;#define POLYNORMIAL 0xA001
                 ;
                 ;#define CHARACTER3_5 25
                 ;
                 ;#define R 0x01
                 ;#define L 0x02
                 ;
                 ;unsigned char TIMER2_OVERFLOW = 0;
                 ;unsigned char PACKET_BUFF[100] = {0,};
                 ;unsigned char PACKET_BUFF_IDX = 0;
                 ;
                 ;unsigned char TIMER0_OVERFLOW = 0;
                 ;unsigned char VELOCITY_BUFF[20] = {0,};
                 ;unsigned char VELOCITY_BUFF_IDX = 0;
                 ;unsigned char CHECK_GETS = 0;
                 ;
                 ;void usart1_init(int bps)
                 ; 0000 0018 {
                 
                 	.CSEG
                 _usart1_init:
                 ; 0000 0019     UCSR1A = 0x00;
                 ;	bps -> Y+0
0000bb e0e0      	LDI  R30,LOW(0)
0000bc 93e0 009b 	STS  155,R30
                 ; 0000 001A     UCSR1B = (1<<RXEN1)|(1<<TXEN1)|(1<<RXCIE1); // RXCIE1 bit is recevie interrupt allow
0000be e9e8      	LDI  R30,LOW(152)
0000bf 93e0 009a 	STS  154,R30
                 ; 0000 001B     UCSR1C = (1<<UCSZ11)|(1<<UCSZ10);
0000c1 e0e6      	LDI  R30,LOW(6)
0000c2 93e0 009d 	STS  157,R30
                 ; 0000 001C     UCSR1C &= ~(1<<UMSEL1);
0000c4 91e0 009d 	LDS  R30,157
0000c6 7bef      	ANDI R30,0xBF
0000c7 93e0 009d 	STS  157,R30
                 ; 0000 001D 
                 ; 0000 001E     UBRR1H = (unsigned char)((bps>>8)  & 0x00ff);
0000c9 81e8      	LD   R30,Y
0000ca 81f9      	LDD  R31,Y+1
0000cb 940e 022e 	CALL __ASRW8
0000cd 93e0 0098 	STS  152,R30
                 ; 0000 001F     UBRR1L = (unsigned char)(bps & 0x00ff);
0000cf 81e8      	LD   R30,Y
0000d0 93e0 0099 	STS  153,R30
                 ; 0000 0020 }
0000d2 c014      	RJMP _0x2060002
                 ;
                 ;void usart0_init(int bps)
                 ; 0000 0023 {
                 _usart0_init:
                 ; 0000 0024     UCSR0A = 0x00;
                 ;	bps -> Y+0
0000d3 e0e0      	LDI  R30,LOW(0)
0000d4 b9eb      	OUT  0xB,R30
                 ; 0000 0025     UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0); // RXCIE1 bit is recevie interrupt allow
0000d5 e9e8      	LDI  R30,LOW(152)
0000d6 b9ea      	OUT  0xA,R30
                 ; 0000 0026     UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
0000d7 e0e6      	LDI  R30,LOW(6)
0000d8 93e0 0095 	STS  149,R30
                 ; 0000 0027     UCSR0C &= ~(1<<UMSEL0);
0000da 91e0 0095 	LDS  R30,149
0000dc 7bef      	ANDI R30,0xBF
0000dd 93e0 0095 	STS  149,R30
                 ; 0000 0028 
                 ; 0000 0029     UBRR0H = (unsigned char)((bps>>8)  & 0x00ff);
0000df 81e8      	LD   R30,Y
0000e0 81f9      	LDD  R31,Y+1
0000e1 940e 022e 	CALL __ASRW8
0000e3 93e0 0090 	STS  144,R30
                 ; 0000 002A     UBRR0L = (unsigned char)(bps & 0x00ff);
0000e5 81e8      	LD   R30,Y
0000e6 b9e9      	OUT  0x9,R30
                 ; 0000 002B }
                 _0x2060002:
0000e7 9622      	ADIW R28,2
0000e8 9508      	RET
                 ;
                 ;void timer2_init(void)
                 ; 0000 002E {
                 _timer2_init:
                 ; 0000 002F     //TIMER2
                 ; 0000 0030     TCCR2 = (1<<WGM21)|(1<<CS22)|(1<<CS20);// CTC모드, 1024분주
0000e9 e0ed      	LDI  R30,LOW(13)
0000ea bde5      	OUT  0x25,R30
                 ; 0000 0031 
                 ; 0000 0032     OCR2 = 40;
0000eb e2e8      	LDI  R30,LOW(40)
0000ec bde3      	OUT  0x23,R30
                 ; 0000 0033     TIMSK = (1<<OCIE2)|(1<<OCIE0);
0000ed e8e2      	LDI  R30,LOW(130)
0000ee bfe7      	OUT  0x37,R30
                 ; 0000 0034     //TIMSK = (1<<OCIE2);
                 ; 0000 0035 }
0000ef 9508      	RET
                 ;void timer0_init(void)
                 ; 0000 0037 {
                 ; 0000 0038     TCCR0 = (1<<WGM01)|(1<<CS02)|(1<<CS01)|(1<<CS00); // CTC모드, 1024분주
                 ; 0000 0039     OCR0 = 40;
                 ; 0000 003A     TIMSK = (1<<OCIE2)|(1<<OCIE0);
                 ; 0000 003B }
                 ;
                 ;void putch_USART1(char data)
                 ; 0000 003E {
                 _putch_USART1:
                 ; 0000 003F     while(!(UCSR1A & (1<<UDRE1))); // UDRE flag is USART Data Register Empty
                 ;	data -> Y+0
                 _0x3:
0000f0 91e0 009b 	LDS  R30,155
0000f2 72e0      	ANDI R30,LOW(0x20)
0000f3 f3e1      	BREQ _0x3
                 ; 0000 0040     UDR1 = data;
0000f4 81e8      	LD   R30,Y
0000f5 93e0 009c 	STS  156,R30
                 ; 0000 0041 }
0000f7 c028      	RJMP _0x2060001
                 ;
                 ;//USART 문자열 송신
                 ;void puts_USART1(char *str,char IDX)
                 ; 0000 0045 {
                 ; 0000 0046     unsigned char i = 0;
                 ; 0000 0047 
                 ; 0000 0048     for(i = 0;i<IDX;i++)
                 ;	*str -> Y+2
                 ;	IDX -> Y+1
                 ;	i -> R17
                 ; 0000 0049     {
                 ; 0000 004A         putch_USART1(*(str+i));
                 ; 0000 004B     }
                 ; 0000 004C 
                 ; 0000 004D     for(i = 0; i<IDX; i++)
                 ; 0000 004E     {
                 ; 0000 004F         *(str+i) = 0;
                 ; 0000 0050     }
                 ; 0000 0051 }
                 ;
                 ;void puts_Modbus1(char *str,char IDX)
                 ; 0000 0054 {
                 _puts_Modbus1:
                 ; 0000 0055     unsigned char i = 0;
                 ; 0000 0056     UCSR0B &= ~(1<<RXEN0);
0000f8 931a      	ST   -Y,R17
                 ;	*str -> Y+2
                 ;	IDX -> Y+1
                 ;	i -> R17
0000f9 e010      	LDI  R17,0
0000fa 9854      	CBI  0xA,4
                 ; 0000 0057     if(TIMER2_OVERFLOW>0)
0000fb e0e0      	LDI  R30,LOW(0)
0000fc 15e5      	CP   R30,R5
0000fd f4d0      	BRSH _0xC
                 ; 0000 0058     {
                 ; 0000 0059         for(i = 0;i<IDX-1;i++) putch_USART1(*(str+i));
0000fe e010      	LDI  R17,LOW(0)
                 _0xE:
0000ff 81e9      	LDD  R30,Y+1
000100 e0f0      	LDI  R31,0
000101 9731      	SBIW R30,1
000102 2fa1      	MOV  R26,R17
000103 e0b0      	LDI  R27,0
000104 17ae      	CP   R26,R30
000105 07bf      	CPC  R27,R31
000106 f43c      	BRGE _0xF
000107 940e 020a 	CALL SUBOPT_0x0
000109 91ec      	LD   R30,X
00010a 93ea      	ST   -Y,R30
00010b dfe4      	RCALL _putch_USART1
00010c 5f1f      	SUBI R17,-1
00010d cff1      	RJMP _0xE
                 _0xF:
                 ; 0000 005B for(i = 0; i<IDX; i++) *(str+i) = 0;
00010e e010      	LDI  R17,LOW(0)
                 _0x11:
00010f 81e9      	LDD  R30,Y+1
000110 171e      	CP   R17,R30
000111 f430      	BRSH _0x12
000112 940e 020a 	CALL SUBOPT_0x0
000114 e0e0      	LDI  R30,LOW(0)
000115 93ec      	ST   X,R30
000116 5f1f      	SUBI R17,-1
000117 cff7      	RJMP _0x11
                 _0x12:
                 ; 0000 005C }
                 ; 0000 005D     UCSR0B |= (1<<RXEN0);
                 _0xC:
000118 9a54      	SBI  0xA,4
                 ; 0000 005E }
000119 8118      	LDD  R17,Y+0
00011a 9624      	ADIW R28,4
00011b 9508      	RET
                 ;
                 ;void putch_USART0(char data)
                 ; 0000 0061 {
                 _putch_USART0:
                 ; 0000 0062     while(!(UCSR0A & (1<<UDRE0))); // UDRE flag is USART Data Register Empty
                 ;	data -> Y+0
                 _0x13:
00011c 9b5d      	SBIS 0xB,5
00011d cffe      	RJMP _0x13
                 ; 0000 0063     UDR0 = data;
00011e 81e8      	LD   R30,Y
00011f b9ec      	OUT  0xC,R30
                 ; 0000 0064 }
                 _0x2060001:
000120 9621      	ADIW R28,1
000121 9508      	RET
                 ;
                 ;void puts_USART0(char *str,char IDX)
                 ; 0000 0067 {
                 ; 0000 0068     //PACKET_BUFF[PACKET_BUFF_IDX] = 0;
                 ; 0000 0069     unsigned char i = 0;
                 ; 0000 006A     for(i = 0;i<IDX-1;i++)
                 ;	*str -> Y+2
                 ;	IDX -> Y+1
                 ;	i -> R17
                 ; 0000 006B     {
                 ; 0000 006C         putch_USART1(*(str+i));
                 ; 0000 006D     }
                 ; 0000 006E 
                 ; 0000 006F     for(i = 0; i<IDX; i++)
                 ; 0000 0070     {
                 ; 0000 0071         *(str+i) = 0;
                 ; 0000 0072     }
                 ; 0000 0073 }
                 ;
                 ;unsigned short CRC16(unsigned char *puchMsg, int usDataLen)
                 ; 0000 0076 {
                 _CRC16:
                 ; 0000 0077     int i;
                 ; 0000 0078     unsigned short crc, flag;
                 ; 0000 0079     crc = 0xffff;
000122 940e 0233 	CALL __SAVELOCR6
                 ;	*puchMsg -> Y+8
                 ;	usDataLen -> Y+6
                 ;	i -> R16,R17
                 ;	crc -> R18,R19
                 ;	flag -> R20,R21
                +
000124 ef2f     +LDI R18 , LOW ( - 1 )
000125 ef3f     +LDI R19 , HIGH ( - 1 )
                 	__GETWRN 18,19,-1
                 ; 0000 007A 
                 ; 0000 007B     while(usDataLen--){
                 _0x1C:
000126 81ee      	LDD  R30,Y+6
000127 81ff      	LDD  R31,Y+6+1
000128 9731      	SBIW R30,1
000129 83ee      	STD  Y+6,R30
00012a 83ff      	STD  Y+6+1,R31
00012b 9631      	ADIW R30,1
00012c f0f9      	BREQ _0x1E
                 ; 0000 007C         crc ^= *puchMsg++;
00012d 85a8      	LDD  R26,Y+8
00012e 85b9      	LDD  R27,Y+8+1
00012f 91ed      	LD   R30,X+
000130 87a8      	STD  Y+8,R26
000131 87b9      	STD  Y+8+1,R27
000132 e0f0      	LDI  R31,0
                +
000133 272e     +EOR R18 , R30
000134 273f     +EOR R19 , R31
                 	__EORWRR 18,19,30,31
                 ; 0000 007D 
                 ; 0000 007E         for (i=0; i<8; i++){
                +
000135 e000     +LDI R16 , LOW ( 0 )
000136 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x20:
                +
000137 3008     +CPI R16 , LOW ( 8 )
000138 e0e0     +LDI R30 , HIGH ( 8 )
000139 071e     +CPC R17 , R30
                 	__CPWRN 16,17,8
00013a f484      	BRGE _0x21
                 ; 0000 007F             flag = crc & 0x0001;
00013b 01f9      	MOVW R30,R18
00013c 70e1      	ANDI R30,LOW(0x1)
00013d 70f0      	ANDI R31,HIGH(0x1)
00013e 01af      	MOVW R20,R30
                 ; 0000 0080             crc >>= 1;
00013f 9536      	LSR  R19
000140 9527      	ROR  R18
                 ; 0000 0081             if(flag) crc ^= POLYNORMIAL;
000141 2e04      	MOV  R0,R20
000142 2a05      	OR   R0,R21
000143 f021      	BREQ _0x22
000144 e0e1      	LDI  R30,LOW(40961)
000145 eaf0      	LDI  R31,HIGH(40961)
                +
000146 272e     +EOR R18 , R30
000147 273f     +EOR R19 , R31
                 	__EORWRR 18,19,30,31
                 ; 0000 0082         }
                 _0x22:
                +
000148 5f0f     +SUBI R16 , LOW ( - 1 )
000149 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00014a cfec      	RJMP _0x20
                 _0x21:
                 ; 0000 0083     }
00014b cfda      	RJMP _0x1C
                 _0x1E:
                 ; 0000 0084     return crc;
00014c 01f9      	MOVW R30,R18
00014d 940e 023a 	CALL __LOADLOCR6
00014f 962a      	ADIW R28,10
000150 9508      	RET
                 ; 0000 0085 }
                 ;
                 ;int RTU_WriteOperate0(char device_address,int starting_address,int data)
                 ; 0000 0088 {
                 _RTU_WriteOperate0:
                 ; 0000 0089     char protocol[8];
                 ; 0000 008A     unsigned short crc16;
                 ; 0000 008B     int i=0;
                 ; 0000 008C     //PACKET_BUFF_IDX = 0;
                 ; 0000 008D 
                 ; 0000 008E     protocol[0]=device_address;
000151 9728      	SBIW R28,8
000152 940e 0235 	CALL __SAVELOCR4
                 ;	device_address -> Y+16
                 ;	starting_address -> Y+14
                 ;	data -> Y+12
                 ;	protocol -> Y+4
                 ;	crc16 -> R16,R17
                 ;	i -> R18,R19
                +
000154 e020     +LDI R18 , LOW ( 0 )
000155 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
000156 89e8      	LDD  R30,Y+16
000157 83ec      	STD  Y+4,R30
                 ; 0000 008F     protocol[1]=0x06;
000158 e0e6      	LDI  R30,LOW(6)
000159 83ed      	STD  Y+5,R30
                 ; 0000 0090     protocol[2]=((starting_address>>8)  & 0x00ff);
00015a 85ee      	LDD  R30,Y+14
00015b 85ff      	LDD  R31,Y+14+1
00015c 940e 022e 	CALL __ASRW8
00015e 83ee      	STD  Y+6,R30
                 ; 0000 0091     protocol[3]=((starting_address)     & 0x00ff);
00015f 85ee      	LDD  R30,Y+14
000160 83ef      	STD  Y+7,R30
                 ; 0000 0092     protocol[4]=((data>>8)              & 0x00ff);
000161 85ec      	LDD  R30,Y+12
000162 85fd      	LDD  R31,Y+12+1
000163 940e 022e 	CALL __ASRW8
000165 87e8      	STD  Y+8,R30
                 ; 0000 0093     protocol[5]=((data)                 & 0x00ff);
000166 85ec      	LDD  R30,Y+12
000167 87e9      	STD  Y+9,R30
                 ; 0000 0094     protocol[6]=0;
000168 e0e0      	LDI  R30,LOW(0)
000169 87ea      	STD  Y+10,R30
                 ; 0000 0095     protocol[7]=0;
00016a 87eb      	STD  Y+11,R30
                 ; 0000 0096 
                 ; 0000 0097     crc16 = CRC16(protocol, 6);
00016b 01fe      	MOVW R30,R28
00016c 9634      	ADIW R30,4
00016d 93fa      	ST   -Y,R31
00016e 93ea      	ST   -Y,R30
00016f e0e6      	LDI  R30,LOW(6)
000170 e0f0      	LDI  R31,HIGH(6)
000171 93fa      	ST   -Y,R31
000172 93ea      	ST   -Y,R30
000173 dfae      	RCALL _CRC16
000174 018f      	MOVW R16,R30
                 ; 0000 0098 
                 ; 0000 0099     protocol[6] = (unsigned char)((crc16>>0) & 0x00ff);
000175 01f8      	MOVW R30,R16
000176 87ea      	STD  Y+10,R30
                 ; 0000 009A     protocol[7] = (unsigned char)((crc16>>8) & 0x00ff);
                +
000177 871b     +STD Y + 11 , R17
                 	__PUTBSR 17,11
                 ; 0000 009B 
                 ; 0000 009C 
                 ; 0000 009D     for(i=0;i<8;i++)
                +
000178 e020     +LDI R18 , LOW ( 0 )
000179 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x24:
                +
00017a 3028     +CPI R18 , LOW ( 8 )
00017b e0e0     +LDI R30 , HIGH ( 8 )
00017c 073e     +CPC R19 , R30
                 	__CPWRN 18,19,8
00017d f454      	BRGE _0x25
                 ; 0000 009E     {
                 ; 0000 009F         putch_USART0(*(protocol+i));
00017e 01de      	MOVW R26,R28
00017f 9614      	ADIW R26,4
000180 0fa2      	ADD  R26,R18
000181 1fb3      	ADC  R27,R19
000182 91ec      	LD   R30,X
000183 93ea      	ST   -Y,R30
000184 df97      	RCALL _putch_USART0
                 ; 0000 00A0     }
                +
000185 5f2f     +SUBI R18 , LOW ( - 1 )
000186 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000187 cff2      	RJMP _0x24
                 _0x25:
                 ; 0000 00A1 }
000188 940e 023c 	CALL __LOADLOCR4
00018a 9661      	ADIW R28,17
00018b 9508      	RET
                 ;
                 ;int RTU_WriteOperate1(char device_address,int starting_address,int data)
                 ; 0000 00A4 {
                 ; 0000 00A5     char protocol[8];
                 ; 0000 00A6     unsigned short crc16;
                 ; 0000 00A7     int i=0;
                 ; 0000 00A8    // PACKET_BUFF_IDX = 0;
                 ; 0000 00A9 
                 ; 0000 00AA     protocol[0]=device_address;
                 ;	device_address -> Y+16
                 ;	starting_address -> Y+14
                 ;	data -> Y+12
                 ;	protocol -> Y+4
                 ;	crc16 -> R16,R17
                 ;	i -> R18,R19
                 ; 0000 00AB     protocol[1]=0x06;
                 ; 0000 00AC     protocol[2]=((starting_address>>8)  & 0x00ff);
                 ; 0000 00AD     protocol[3]=((starting_address)     & 0x00ff);
                 ; 0000 00AE     protocol[4]=((data>>8)              & 0x00ff);
                 ; 0000 00AF     protocol[5]=((data)                 & 0x00ff);
                 ; 0000 00B0     protocol[6]=0;
                 ; 0000 00B1     protocol[7]=0;
                 ; 0000 00B2 
                 ; 0000 00B3     crc16 = CRC16(protocol, 6);
                 ; 0000 00B4 
                 ; 0000 00B5     protocol[6] = (unsigned char)((crc16>>0) & 0x00ff);
                 ; 0000 00B6     protocol[7] = (unsigned char)((crc16>>8) & 0x00ff);
                 ; 0000 00B7 
                 ; 0000 00B8 
                 ; 0000 00B9     for(i=0;i<8;i++)
                 ; 0000 00BA     {
                 ; 0000 00BB         putch_USART1(*(protocol+i));
                 ; 0000 00BC     }
                 ; 0000 00BD }
                 ;
                 ;int RTU_ReedOperate0(char device_address,int starting_address,int data)
                 ; 0000 00C0 {
                 ; 0000 00C1     char protocol[8];
                 ; 0000 00C2     unsigned short crc16;
                 ; 0000 00C3     int i=0;
                 ; 0000 00C4     //PACKET_BUFF_IDX = 0;
                 ; 0000 00C5 
                 ; 0000 00C6     protocol[0]=device_address;
                 ;	device_address -> Y+16
                 ;	starting_address -> Y+14
                 ;	data -> Y+12
                 ;	protocol -> Y+4
                 ;	crc16 -> R16,R17
                 ;	i -> R18,R19
                 ; 0000 00C7     protocol[1]=0x03;
                 ; 0000 00C8     protocol[2]=((starting_address>>8)  & 0x00ff);
                 ; 0000 00C9     protocol[3]=((starting_address)     & 0x00ff);
                 ; 0000 00CA     protocol[4]=((data>>8)              & 0x00ff);
                 ; 0000 00CB     protocol[5]=((data)                 & 0x00ff);
                 ; 0000 00CC     protocol[6]=0;
                 ; 0000 00CD     protocol[7]=0;
                 ; 0000 00CE 
                 ; 0000 00CF     crc16 = CRC16(protocol, 6);
                 ; 0000 00D0 
                 ; 0000 00D1     protocol[6] = (unsigned char)((crc16>>0) & 0x00ff);
                 ; 0000 00D2     protocol[7] = (unsigned char)((crc16>>8) & 0x00ff);
                 ; 0000 00D3 
                 ; 0000 00D4 
                 ; 0000 00D5     for(i=0;i<8;i++)
                 ; 0000 00D6     {
                 ; 0000 00D7         putch_USART0(*(protocol+i));
                 ; 0000 00D8     }
                 ; 0000 00D9 }
                 ;
                 ;// interrupt [USART0_RXC] void usart0_rxc(void)
                 ;// {
                 ;//     unsigned char i = 0;
                 ;
                 ;//     i = UDR0;
                 ;//     if(i == '<'){
                 ;//         PACKET_BUFF_IDX = 0;
                 ;//         PACKET_BUFF[PACKET_BUFF_IDX] = i;
                 ;//         PACKET_BUFF_IDX++;
                 ;//     }
                 ;//     else if(i == '>'){
                 ;//         PACKET_BUFF[PACKET_BUFF_IDX] = i;
                 ;//         PACKET_BUFF_IDX+=2;
                 ;//     }
                 ;//     else{
                 ;//         PACKET_BUFF[PACKET_BUFF_IDX] = i;
                 ;//         PACKET_BUFF_IDX++;
                 ;//     }
                 ;// }
                 ;
                 ;interrupt [USART0_RXC] void usart0_rxc(void)
                 ; 0000 00F0 {
                 _usart0_rxc:
00018c 93aa      	ST   -Y,R26
00018d 93ba      	ST   -Y,R27
00018e 93ea      	ST   -Y,R30
00018f b7ef      	IN   R30,SREG
000190 93ea      	ST   -Y,R30
                 ; 0000 00F1     if(((TCNT2 < CHARACTER3_5) && (TIMER2_OVERFLOW == 0)) || PACKET_BUFF_IDX == 0)
000191 b5e4      	IN   R30,0x24
000192 31e9      	CPI  R30,LOW(0x19)
000193 f418      	BRSH _0x2D
000194 e0e0      	LDI  R30,LOW(0)
000195 15e5      	CP   R30,R5
000196 f019      	BREQ _0x2F
                 _0x2D:
000197 e0e0      	LDI  R30,LOW(0)
000198 15e4      	CP   R30,R4
000199 f419      	BRNE _0x2C
                 _0x2F:
                 ; 0000 00F2     {
                 ; 0000 00F3         PACKET_BUFF[PACKET_BUFF_IDX] = UDR0;
00019a 940e 0211 	CALL SUBOPT_0x1
                 ; 0000 00F4         PACKET_BUFF_IDX++;
                 ; 0000 00F5         TCNT2 = 0;
                 ; 0000 00F6     }
                 ; 0000 00F7     else {
00019c c004      	RJMP _0x31
                 _0x2C:
                 ; 0000 00F8         PACKET_BUFF_IDX = 0;
00019d 2444      	CLR  R4
                 ; 0000 00F9         PACKET_BUFF[PACKET_BUFF_IDX] = UDR0;
00019e 940e 0211 	CALL SUBOPT_0x1
                 ; 0000 00FA         PACKET_BUFF_IDX++;
                 ; 0000 00FB         TCNT2 = 0;
                 ; 0000 00FC         TIMER2_OVERFLOW = 0;
0001a0 2455      	CLR  R5
                 ; 0000 00FD     }
                 _0x31:
                 ; 0000 00FE }
0001a1 91e9      	LD   R30,Y+
0001a2 bfef      	OUT  SREG,R30
0001a3 91e9      	LD   R30,Y+
0001a4 91b9      	LD   R27,Y+
0001a5 91a9      	LD   R26,Y+
0001a6 9518      	RETI
                 ;
                 ;interrupt [USART1_RXC] void usart1_rxc(void)
                 ; 0000 0101 {
                 _usart1_rxc:
0001a7 93ea      	ST   -Y,R30
0001a8 93fa      	ST   -Y,R31
0001a9 b7ef      	IN   R30,SREG
0001aa 93ea      	ST   -Y,R30
                 ; 0000 0102     unsigned char i = 0;
                 ; 0000 0103     i = UDR1;
0001ab 931a      	ST   -Y,R17
                 ;	i -> R17
0001ac e010      	LDI  R17,0
0001ad 9110 009c 	LDS  R17,156
                 ; 0000 0104     if(i == '<'){
0001af 331c      	CPI  R17,60
0001b0 f431      	BRNE _0x32
                 ; 0000 0105         VELOCITY_BUFF_IDX = 0;
0001b1 2466      	CLR  R6
                 ; 0000 0106         VELOCITY_BUFF[VELOCITY_BUFF_IDX] = i;
0001b2 940e 021b 	CALL SUBOPT_0x2
                 ; 0000 0107         VELOCITY_BUFF_IDX++;
                 ; 0000 0108         CHECK_GETS = 1;
0001b4 e0e1      	LDI  R30,LOW(1)
0001b5 2e9e      	MOV  R9,R30
                 ; 0000 0109     }
                 ; 0000 010A     else if(i == '>'){
0001b6 c008      	RJMP _0x33
                 _0x32:
0001b7 331e      	CPI  R17,62
0001b8 f421      	BRNE _0x34
                 ; 0000 010B         VELOCITY_BUFF[VELOCITY_BUFF_IDX] = i;
0001b9 940e 021b 	CALL SUBOPT_0x2
                 ; 0000 010C         VELOCITY_BUFF_IDX++;
                 ; 0000 010D         CHECK_GETS = 0;
0001bb 2499      	CLR  R9
                 ; 0000 010E     }
                 ; 0000 010F     else{
0001bc c002      	RJMP _0x35
                 _0x34:
                 ; 0000 0110         VELOCITY_BUFF[VELOCITY_BUFF_IDX] = i;
0001bd 940e 021b 	CALL SUBOPT_0x2
                 ; 0000 0111         VELOCITY_BUFF_IDX++;
                 ; 0000 0112     }
                 _0x35:
                 _0x33:
                 ; 0000 0113 }
0001bf 9119      	LD   R17,Y+
0001c0 91e9      	LD   R30,Y+
0001c1 bfef      	OUT  SREG,R30
0001c2 91f9      	LD   R31,Y+
0001c3 91e9      	LD   R30,Y+
0001c4 9518      	RETI
                 ;
                 ;// interrupt [USART1_RXC] void usart1_rxc(void)
                 ;// {
                 ;//     if(((TCNT0 < CHARACTER3_5) && (TIMER2_OVERFLOW == 0)) || VELOCITY_BUFF_IDX == 0)
                 ;//     {
                 ;//         VELOCITY_BUFF[VELOCITY_BUFF_IDX] = UDR1;
                 ;//         TCNT0 = 0;
                 ;//         //PORTB.1 = ~PORTB.1;
                 ;//     }
                 ;//     else {
                 ;//         VELOCITY_BUFF_IDX = 0;
                 ;//         VELOCITY_BUFF[VELOCITY_BUFF_IDX] = UDR0;
                 ;//         VELOCITY_BUFF_IDX++;
                 ;//         TCNT0 = 0;
                 ;//         //PORTB.1 = ~PORTB.1;
                 ;//         TIMER2_OVERFLOW = 0;
                 ;
                 ;//     }
                 ;// }
                 ;
                 ;// interrupt [USART1_RXC] void usart1_rxc(void)
                 ;// {
                 ;//     if(((TCNT0 < CHARACTER3_5) && (TIMER2_OVERFLOW == 0)) || VELOCITY_BUFF_IDX == 0)
                 ;//     {
                 ;//         VELOCITY_BUFF[VELOCITY_BUFF_IDX] = UDR1;
                 ;//         TCNT0 = 0;
                 ;//         //PORTB.1 = ~PORTB.1;
                 ;//     }
                 ;//     else {
                 ;//         VELOCITY_BUFF_IDX = 0;
                 ;//         VELOCITY_BUFF[VELOCITY_BUFF_IDX] = UDR0;
                 ;//         VELOCITY_BUFF_IDX++;
                 ;//         TCNT0 = 0;
                 ;//         //PORTB.1 = ~PORTB.1;
                 ;//     }
                 ;// }
                 ;
                 ;interrupt [TIM2_COMP] void timer2_comp(void)
                 ; 0000 013A {
                 _timer2_comp:
0001c5 93ea      	ST   -Y,R30
0001c6 b7ef      	IN   R30,SREG
                 ; 0000 013B     if(TIMER2_OVERFLOW == 0) PORTB.1 = ~PORTB.1;
0001c7 2055      	TST  R5
0001c8 f429      	BRNE _0x36
0001c9 9bc1      	SBIS 0x18,1
0001ca c002      	RJMP _0x37
0001cb 98c1      	CBI  0x18,1
0001cc c001      	RJMP _0x38
                 _0x37:
0001cd 9ac1      	SBI  0x18,1
                 _0x38:
                 ; 0000 013C 
                 ; 0000 013D     TIMER2_OVERFLOW++;
                 _0x36:
0001ce 9453      	INC  R5
                 ; 0000 013E }
0001cf c003      	RJMP _0x42
                 ;
                 ;interrupt [TIM0_COMP] void timer0_comp(void)
                 ; 0000 0141 {
                 _timer0_comp:
0001d0 93ea      	ST   -Y,R30
0001d1 b7ef      	IN   R30,SREG
                 ; 0000 0142     TIMER0_OVERFLOW++;
0001d2 9473      	INC  R7
                 ; 0000 0143 }
                 _0x42:
0001d3 bfef      	OUT  SREG,R30
0001d4 91e9      	LD   R30,Y+
0001d5 9518      	RETI
                 ;
                 ;void main(void)
                 ; 0000 0146 {
                 _main:
                 ; 0000 0147     int velocity_R = 0;
                 ; 0000 0148     int velocity_L = 0;
                 ; 0000 0149     unsigned char BUFF[100] = {0,};
                 ; 0000 014A 
                 ; 0000 014B     usart1_init(bps_115200);
0001d6 97ef      	SBIW R28,63
0001d7 97a5      	SBIW R28,37
0001d8 e684      	LDI  R24,100
0001d9 e0a0      	LDI  R26,LOW(0)
0001da e0b0      	LDI  R27,HIGH(0)
0001db e9ee      	LDI  R30,LOW(_0x39*2)
0001dc e0f0      	LDI  R31,HIGH(_0x39*2)
0001dd 940e 0241 	CALL __INITLOCB
                 ;	velocity_R -> R16,R17
                 ;	velocity_L -> R18,R19
                 ;	BUFF -> Y+0
                +
0001df e000     +LDI R16 , LOW ( 0 )
0001e0 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
0001e1 e020     +LDI R18 , LOW ( 0 )
0001e2 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
0001e3 e0e7      	LDI  R30,LOW(7)
0001e4 e0f0      	LDI  R31,HIGH(7)
0001e5 93fa      	ST   -Y,R31
0001e6 93ea      	ST   -Y,R30
0001e7 ded3      	RCALL _usart1_init
                 ; 0000 014C     usart0_init(bps_115200);
0001e8 e0e7      	LDI  R30,LOW(7)
0001e9 e0f0      	LDI  R31,HIGH(7)
0001ea 93fa      	ST   -Y,R31
0001eb 93ea      	ST   -Y,R30
0001ec dee6      	RCALL _usart0_init
                 ; 0000 014D     timer2_init();
0001ed defb      	RCALL _timer2_init
                 ; 0000 014E     SREG |= 0x80;
0001ee 9478      	BSET 7
                 ; 0000 014F     DDRB.1 = 1;
0001ef 9ab9      	SBI  0x17,1
                 ; 0000 0150     PORTB.1 = 0;
0001f0 98c1      	CBI  0x18,1
                 ; 0000 0151     //delay_ms(5000);
                 ; 0000 0152     while(1)
                 _0x3E:
                 ; 0000 0153     {
                 ; 0000 0154         // if(CHECK_GETS == 0)
                 ; 0000 0155         // {
                 ; 0000 0156             // //UCSR1B &= ~(1<<RXEN1);
                 ; 0000 0157             // sscanf(VELOCITY_BUFF,"<%d,%d>", &velocity_R, &velocity_L);
                 ; 0000 0158             // sprintf(BUFF,"<%d,%d>", velocity_R, velocity_L);
                 ; 0000 0159 
                 ; 0000 015A             //puts_USART1(BUFF,VELOCITY_BUFF_IDX);
                 ; 0000 015B 
                 ; 0000 015C             //UCSR1B |=(1<<RXEN1);
                 ; 0000 015D             RTU_WriteOperate0(R,(unsigned int)121,(int)(300));
0001f1 e0e1      	LDI  R30,LOW(1)
0001f2 93ea      	ST   -Y,R30
0001f3 e7e9      	LDI  R30,LOW(121)
0001f4 e0f0      	LDI  R31,HIGH(121)
0001f5 93fa      	ST   -Y,R31
0001f6 93ea      	ST   -Y,R30
0001f7 e2ec      	LDI  R30,LOW(300)
0001f8 e0f1      	LDI  R31,HIGH(300)
0001f9 93fa      	ST   -Y,R31
0001fa 93ea      	ST   -Y,R30
0001fb df55      	RCALL _RTU_WriteOperate0
                 ; 0000 015E             puts_Modbus1(PACKET_BUFF,PACKET_BUFF_IDX);
0001fc e0e0      	LDI  R30,LOW(_PACKET_BUFF)
0001fd e0f5      	LDI  R31,HIGH(_PACKET_BUFF)
0001fe 93fa      	ST   -Y,R31
0001ff 93ea      	ST   -Y,R30
000200 924a      	ST   -Y,R4
000201 def6      	RCALL _puts_Modbus1
                 ; 0000 015F             delay_ms(50);
000202 e3e2      	LDI  R30,LOW(50)
000203 e0f0      	LDI  R31,HIGH(50)
000204 93fa      	ST   -Y,R31
000205 93ea      	ST   -Y,R30
000206 940e 0222 	CALL _delay_ms
                 ; 0000 0160 
                 ; 0000 0161             // RTU_WriteOperate0(L,(unsigned int)121,(int)-(velocity_L));
                 ; 0000 0162             // delay_ms(5);
                 ; 0000 0163 
                 ; 0000 0164             // RTU_WriteOperate0(R,(unsigned int)120,(int)(1));
                 ; 0000 0165             // delay_ms(5);
                 ; 0000 0166 
                 ; 0000 0167             // RTU_WriteOperate0(L,(unsigned int)120,(int)(1));
                 ; 0000 0168             // delay_ms(5);
                 ; 0000 0169         // }
                 ; 0000 016A     }
000208 cfe8      	RJMP _0x3E
                 ; 0000 016B }
                 _0x41:
000209 cfff      	RJMP _0x41
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _PACKET_BUFF:
000500           	.BYTE 0x64
                 _VELOCITY_BUFF:
000564           	.BYTE 0x14
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
00020a 2fe1      	MOV  R30,R17
00020b e0f0      	LDI  R31,0
00020c 81aa      	LDD  R26,Y+2
00020d 81bb      	LDD  R27,Y+2+1
00020e 0fae      	ADD  R26,R30
00020f 1fbf      	ADC  R27,R31
000210 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x1:
000211 2da4      	MOV  R26,R4
000212 e0b0      	LDI  R27,0
000213 50a0      	SUBI R26,LOW(-_PACKET_BUFF)
000214 4fbb      	SBCI R27,HIGH(-_PACKET_BUFF)
000215 b1ec      	IN   R30,0xC
000216 93ec      	ST   X,R30
000217 9443      	INC  R4
000218 e0e0      	LDI  R30,LOW(0)
000219 bde4      	OUT  0x24,R30
00021a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2:
00021b 2de6      	MOV  R30,R6
00021c e0f0      	LDI  R31,0
00021d 59ec      	SUBI R30,LOW(-_VELOCITY_BUFF)
00021e 4ffa      	SBCI R31,HIGH(-_VELOCITY_BUFF)
00021f 8310      	ST   Z,R17
000220 9463      	INC  R6
000221 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000222 91e9      	ld   r30,y+
000223 91f9      	ld   r31,y+
000224 9630      	adiw r30,0
000225 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000226 e686     +LDI R24 , LOW ( 0xE66 )
000227 e09e     +LDI R25 , HIGH ( 0xE66 )
                +__DELAY_USW_LOOP :
000228 9701     +SBIW R24 , 1
000229 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xE66
00022a 95a8      	wdr
00022b 9731      	sbiw r30,1
00022c f7c9      	brne __delay_ms0
                 __delay_ms1:
00022d 9508      	ret
                 
                 __ASRW8:
00022e 2fef      	MOV  R30,R31
00022f 27ff      	CLR  R31
000230 fde7      	SBRC R30,7
000231 efff      	SER  R31
000232 9508      	RET
                 
                 __SAVELOCR6:
000233 935a      	ST   -Y,R21
                 __SAVELOCR5:
000234 934a      	ST   -Y,R20
                 __SAVELOCR4:
000235 933a      	ST   -Y,R19
                 __SAVELOCR3:
000236 932a      	ST   -Y,R18
                 __SAVELOCR2:
000237 931a      	ST   -Y,R17
000238 930a      	ST   -Y,R16
000239 9508      	RET
                 
                 __LOADLOCR6:
00023a 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00023b 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00023c 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00023d 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00023e 8119      	LDD  R17,Y+1
00023f 8108      	LD   R16,Y
000240 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
000241 0fac      	ADD  R26,R28
000242 1fbd      	ADC  R27,R29
                 __INITLOC0:
000243 9005      	LPM  R0,Z+
000244 920d      	ST   X+,R0
000245 958a      	DEC  R24
000246 f7e1      	BRNE __INITLOC0
000247 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :   8 r1 :   1 r2 :   0 r3 :   0 r4 :   5 r5 :   5 r6 :   3 r7 :   1 
r8 :   0 r9 :   2 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   8 r17:  24 r18:  14 r19:  12 r20:   4 r21:   3 r22:   2 r23:   0 
r24:  12 r25:   3 r26:  18 r27:  16 r28:  12 r29:   2 r30: 159 r31:  44 
x  :   9 y  :  92 z  :   9 
Registers used: 25 out of 35 (71.4%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   3 add   :   3 
adiw  :   9 and   :   0 andi  :   5 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   6 
brge  :   3 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  10 brpl  :   0 brsh  :   3 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   1 bst   :   0 call  :  17 
cbi   :   3 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   7 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   5 cpc   :   3 cpi   :   5 cpse  :   0 dec   :   2 des   :   0 
elpm  :   0 eor   :   4 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :   6 inc   :   4 jmp   :  36 ld    :  21 ldd   :  23 
ldi   :  79 lds   :   4 lpm   :   8 lsl   :   0 lsr   :   1 mov   :   7 
movw  :  10 mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 
or    :   1 ori   :   0 out   :  19 pop   :   0 push  :   0 rcall :   8 
ret   :  14 reti  :   3 rjmp  :  17 rol   :   0 ror   :   1 sbc   :   0 
sbci  :   4 sbi   :   3 sbic  :   0 sbis  :   2 sbiw  :  10 sbr   :   0 
sbrc  :   1 sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 
ser   :   1 ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :  44 std   :  14 sts   :  11 sub   :   0 subi  :   6 
swap  :   0 tst   :   1 wdr   :   1 
Instructions used: 48 out of 117 (41.0%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000490   1036    132   1168  131072   0.9%
[.dseg] 0x000100 0x000578      0    120    120    4351   2.8%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 5 warnings
